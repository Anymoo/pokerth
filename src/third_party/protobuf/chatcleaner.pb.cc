// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatcleaner.proto

#include "chatcleaner.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_chatcleaner_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CleanerChatReplyMessage_chatcleaner_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chatcleaner_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CleanerChatRequestMessage_chatcleaner_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chatcleaner_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CleanerInitAckMessage_chatcleaner_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chatcleaner_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CleanerInitMessage_chatcleaner_2eproto;
class CleanerInitMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CleanerInitMessage> _instance;
} _CleanerInitMessage_default_instance_;
class CleanerInitAckMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CleanerInitAckMessage> _instance;
} _CleanerInitAckMessage_default_instance_;
class CleanerChatRequestMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CleanerChatRequestMessage> _instance;
} _CleanerChatRequestMessage_default_instance_;
class CleanerChatReplyMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CleanerChatReplyMessage> _instance;
} _CleanerChatReplyMessage_default_instance_;
class ChatCleanerMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatCleanerMessage> _instance;
} _ChatCleanerMessage_default_instance_;
static void InitDefaultsCleanerInitMessage_chatcleaner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CleanerInitMessage_default_instance_;
    new (ptr) ::CleanerInitMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CleanerInitMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CleanerInitMessage_chatcleaner_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCleanerInitMessage_chatcleaner_2eproto}, {}};

static void InitDefaultsCleanerInitAckMessage_chatcleaner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CleanerInitAckMessage_default_instance_;
    new (ptr) ::CleanerInitAckMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CleanerInitAckMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CleanerInitAckMessage_chatcleaner_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCleanerInitAckMessage_chatcleaner_2eproto}, {}};

static void InitDefaultsCleanerChatRequestMessage_chatcleaner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CleanerChatRequestMessage_default_instance_;
    new (ptr) ::CleanerChatRequestMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CleanerChatRequestMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CleanerChatRequestMessage_chatcleaner_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCleanerChatRequestMessage_chatcleaner_2eproto}, {}};

static void InitDefaultsCleanerChatReplyMessage_chatcleaner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CleanerChatReplyMessage_default_instance_;
    new (ptr) ::CleanerChatReplyMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CleanerChatReplyMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CleanerChatReplyMessage_chatcleaner_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCleanerChatReplyMessage_chatcleaner_2eproto}, {}};

static void InitDefaultsChatCleanerMessage_chatcleaner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChatCleanerMessage_default_instance_;
    new (ptr) ::ChatCleanerMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatCleanerMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_ChatCleanerMessage_chatcleaner_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsChatCleanerMessage_chatcleaner_2eproto}, {
      &scc_info_CleanerInitMessage_chatcleaner_2eproto.base,
      &scc_info_CleanerInitAckMessage_chatcleaner_2eproto.base,
      &scc_info_CleanerChatRequestMessage_chatcleaner_2eproto.base,
      &scc_info_CleanerChatReplyMessage_chatcleaner_2eproto.base,}};

bool CleanerChatReplyMessage_CleanerActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::cleanerActionNone;
const CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::cleanerActionWarning;
const CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::cleanerActionKick;
const CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::cleanerActionBan;
const CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::cleanerActionMute;
const CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::CleanerActionType_MIN;
const CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::CleanerActionType_MAX;
const int CleanerChatReplyMessage::CleanerActionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ChatCleanerMessage_ChatCleanerMessageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::Type_CleanerInitMessage;
const ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::Type_CleanerInitAckMessage;
const ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::Type_CleanerChatRequestMessage;
const ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::Type_CleanerChatReplyMessage;
const ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::ChatCleanerMessageType_MIN;
const ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::ChatCleanerMessageType_MAX;
const int ChatCleanerMessage::ChatCleanerMessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CleanerChatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CleanerInitMessage::InitAsDefaultInstance() {
}
class CleanerInitMessage::HasBitSetters {
 public:
  static void set_has_requestedversion(CleanerInitMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_clientsecret(CleanerInitMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanerInitMessage::kRequestedVersionFieldNumber;
const int CleanerInitMessage::kClientSecretFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanerInitMessage::CleanerInitMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CleanerInitMessage)
}
CleanerInitMessage::CleanerInitMessage(const CleanerInitMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientsecret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientsecret()) {
    clientsecret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientsecret_);
  }
  requestedversion_ = from.requestedversion_;
  // @@protoc_insertion_point(copy_constructor:CleanerInitMessage)
}

void CleanerInitMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CleanerInitMessage_chatcleaner_2eproto.base);
  clientsecret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestedversion_ = 0u;
}

CleanerInitMessage::~CleanerInitMessage() {
  // @@protoc_insertion_point(destructor:CleanerInitMessage)
  SharedDtor();
}

void CleanerInitMessage::SharedDtor() {
  clientsecret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CleanerInitMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CleanerInitMessage& CleanerInitMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CleanerInitMessage_chatcleaner_2eproto.base);
  return *internal_default_instance();
}


void CleanerInitMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CleanerInitMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    clientsecret_.ClearNonDefaultToEmptyNoArena();
  }
  requestedversion_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CleanerInitMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CleanerInitMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 requestedVersion = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_requestedversion(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required string clientSecret = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_clientsecret();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CleanerInitMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:CleanerInitMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 requestedVersion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_requestedversion(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestedversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string clientSecret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientsecret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CleanerInitMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CleanerInitMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CleanerInitMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CleanerInitMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 requestedVersion = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestedversion(), output);
  }

  // required string clientSecret = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientsecret(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:CleanerInitMessage)
}

size_t CleanerInitMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CleanerInitMessage)
  size_t total_size = 0;

  if (has_clientsecret()) {
    // required string clientSecret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientsecret());
  }

  if (has_requestedversion()) {
    // required uint32 requestedVersion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestedversion());
  }

  return total_size;
}
size_t CleanerInitMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CleanerInitMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string clientSecret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientsecret());

    // required uint32 requestedVersion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestedversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CleanerInitMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CleanerInitMessage*>(&from));
}

void CleanerInitMessage::MergeFrom(const CleanerInitMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CleanerInitMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      clientsecret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientsecret_);
    }
    if (cached_has_bits & 0x00000002u) {
      requestedversion_ = from.requestedversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CleanerInitMessage::CopyFrom(const CleanerInitMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CleanerInitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanerInitMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CleanerInitMessage::Swap(CleanerInitMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CleanerInitMessage::InternalSwap(CleanerInitMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clientsecret_.Swap(&other->clientsecret_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestedversion_, other->requestedversion_);
}

::std::string CleanerInitMessage::GetTypeName() const {
  return "CleanerInitMessage";
}


// ===================================================================

void CleanerInitAckMessage::InitAsDefaultInstance() {
}
class CleanerInitAckMessage::HasBitSetters {
 public:
  static void set_has_serverversion(CleanerInitAckMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_serversecret(CleanerInitAckMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanerInitAckMessage::kServerVersionFieldNumber;
const int CleanerInitAckMessage::kServerSecretFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanerInitAckMessage::CleanerInitAckMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CleanerInitAckMessage)
}
CleanerInitAckMessage::CleanerInitAckMessage(const CleanerInitAckMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serversecret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serversecret()) {
    serversecret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serversecret_);
  }
  serverversion_ = from.serverversion_;
  // @@protoc_insertion_point(copy_constructor:CleanerInitAckMessage)
}

void CleanerInitAckMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CleanerInitAckMessage_chatcleaner_2eproto.base);
  serversecret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverversion_ = 0u;
}

CleanerInitAckMessage::~CleanerInitAckMessage() {
  // @@protoc_insertion_point(destructor:CleanerInitAckMessage)
  SharedDtor();
}

void CleanerInitAckMessage::SharedDtor() {
  serversecret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CleanerInitAckMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CleanerInitAckMessage& CleanerInitAckMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CleanerInitAckMessage_chatcleaner_2eproto.base);
  return *internal_default_instance();
}


void CleanerInitAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CleanerInitAckMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    serversecret_.ClearNonDefaultToEmptyNoArena();
  }
  serverversion_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CleanerInitAckMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CleanerInitAckMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 serverVersion = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_serverversion(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required string serverSecret = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_serversecret();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CleanerInitAckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:CleanerInitAckMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serverVersion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_serverversion(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string serverSecret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serversecret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CleanerInitAckMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CleanerInitAckMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CleanerInitAckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CleanerInitAckMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 serverVersion = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serverversion(), output);
  }

  // required string serverSecret = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serversecret(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:CleanerInitAckMessage)
}

size_t CleanerInitAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CleanerInitAckMessage)
  size_t total_size = 0;

  if (has_serversecret()) {
    // required string serverSecret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serversecret());
  }

  if (has_serverversion()) {
    // required uint32 serverVersion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serverversion());
  }

  return total_size;
}
size_t CleanerInitAckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CleanerInitAckMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string serverSecret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serversecret());

    // required uint32 serverVersion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serverversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CleanerInitAckMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CleanerInitAckMessage*>(&from));
}

void CleanerInitAckMessage::MergeFrom(const CleanerInitAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CleanerInitAckMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      serversecret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serversecret_);
    }
    if (cached_has_bits & 0x00000002u) {
      serverversion_ = from.serverversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CleanerInitAckMessage::CopyFrom(const CleanerInitAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CleanerInitAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanerInitAckMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CleanerInitAckMessage::Swap(CleanerInitAckMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CleanerInitAckMessage::InternalSwap(CleanerInitAckMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serversecret_.Swap(&other->serversecret_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(serverversion_, other->serverversion_);
}

::std::string CleanerInitAckMessage::GetTypeName() const {
  return "CleanerInitAckMessage";
}


// ===================================================================

void CleanerChatRequestMessage::InitAsDefaultInstance() {
}
class CleanerChatRequestMessage::HasBitSetters {
 public:
  static void set_has_requestid(CleanerChatRequestMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_cleanerchattype(CleanerChatRequestMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_gameid(CleanerChatRequestMessage* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_playerid(CleanerChatRequestMessage* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_playername(CleanerChatRequestMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_chatmessage(CleanerChatRequestMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanerChatRequestMessage::kRequestIdFieldNumber;
const int CleanerChatRequestMessage::kCleanerChatTypeFieldNumber;
const int CleanerChatRequestMessage::kGameIdFieldNumber;
const int CleanerChatRequestMessage::kPlayerIdFieldNumber;
const int CleanerChatRequestMessage::kPlayerNameFieldNumber;
const int CleanerChatRequestMessage::kChatMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanerChatRequestMessage::CleanerChatRequestMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CleanerChatRequestMessage)
}
CleanerChatRequestMessage::CleanerChatRequestMessage(const CleanerChatRequestMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_playername()) {
    playername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playername_);
  }
  chatmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chatmessage()) {
    chatmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatmessage_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:CleanerChatRequestMessage)
}

void CleanerChatRequestMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CleanerChatRequestMessage_chatcleaner_2eproto.base);
  playername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(playerid_));
}

CleanerChatRequestMessage::~CleanerChatRequestMessage() {
  // @@protoc_insertion_point(destructor:CleanerChatRequestMessage)
  SharedDtor();
}

void CleanerChatRequestMessage::SharedDtor() {
  playername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chatmessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CleanerChatRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CleanerChatRequestMessage& CleanerChatRequestMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CleanerChatRequestMessage_chatcleaner_2eproto.base);
  return *internal_default_instance();
}


void CleanerChatRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CleanerChatRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      playername_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      chatmessage_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playerid_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(playerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CleanerChatRequestMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CleanerChatRequestMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_requestid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .CleanerChatType cleanerChatType = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::CleanerChatType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_cleanerchattype(static_cast<::CleanerChatType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 gameId = 3 [default = 0];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerId = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required string playerName = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_playername();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // required string chatMessage = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_chatmessage();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CleanerChatRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:CleanerChatRequestMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 requestId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_requestid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .CleanerChatType cleanerChatType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CleanerChatType_IsValid(value)) {
            set_cleanerchattype(static_cast< ::CleanerChatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gameId = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string playerName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string chatMessage = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CleanerChatRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CleanerChatRequestMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CleanerChatRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CleanerChatRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestid(), output);
  }

  // required .CleanerChatType cleanerChatType = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cleanerchattype(), output);
  }

  // optional uint32 gameId = 3 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gameid(), output);
  }

  // required uint32 playerId = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->playerid(), output);
  }

  // required string playerName = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->playername(), output);
  }

  // required string chatMessage = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->chatmessage(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:CleanerChatRequestMessage)
}

size_t CleanerChatRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CleanerChatRequestMessage)
  size_t total_size = 0;

  if (has_playername()) {
    // required string playerName = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playername());
  }

  if (has_chatmessage()) {
    // required string chatMessage = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chatmessage());
  }

  if (has_requestid()) {
    // required uint32 requestId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());
  }

  if (has_cleanerchattype()) {
    // required .CleanerChatType cleanerChatType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cleanerchattype());
  }

  if (has_playerid()) {
    // required uint32 playerId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  return total_size;
}
size_t CleanerChatRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CleanerChatRequestMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000002f) ^ 0x0000002f) == 0) {  // All required fields are present.
    // required string playerName = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playername());

    // required string chatMessage = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chatmessage());

    // required uint32 requestId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());

    // required .CleanerChatType cleanerChatType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cleanerchattype());

    // required uint32 playerId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 gameId = 3 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CleanerChatRequestMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CleanerChatRequestMessage*>(&from));
}

void CleanerChatRequestMessage::MergeFrom(const CleanerChatRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CleanerChatRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      playername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playername_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      chatmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chatmessage_);
    }
    if (cached_has_bits & 0x00000004u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000008u) {
      cleanerchattype_ = from.cleanerchattype_;
    }
    if (cached_has_bits & 0x00000010u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000020u) {
      playerid_ = from.playerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CleanerChatRequestMessage::CopyFrom(const CleanerChatRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CleanerChatRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanerChatRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;
  return true;
}

void CleanerChatRequestMessage::Swap(CleanerChatRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CleanerChatRequestMessage::InternalSwap(CleanerChatRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playername_.Swap(&other->playername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chatmessage_.Swap(&other->chatmessage_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(cleanerchattype_, other->cleanerchattype_);
  swap(gameid_, other->gameid_);
  swap(playerid_, other->playerid_);
}

::std::string CleanerChatRequestMessage::GetTypeName() const {
  return "CleanerChatRequestMessage";
}


// ===================================================================

void CleanerChatReplyMessage::InitAsDefaultInstance() {
}
class CleanerChatReplyMessage::HasBitSetters {
 public:
  static void set_has_requestid(CleanerChatReplyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_cleanerchattype(CleanerChatReplyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_gameid(CleanerChatReplyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_playerid(CleanerChatReplyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_cleaneractiontype(CleanerChatReplyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_cleanertext(CleanerChatReplyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanerChatReplyMessage::kRequestIdFieldNumber;
const int CleanerChatReplyMessage::kCleanerChatTypeFieldNumber;
const int CleanerChatReplyMessage::kGameIdFieldNumber;
const int CleanerChatReplyMessage::kPlayerIdFieldNumber;
const int CleanerChatReplyMessage::kCleanerActionTypeFieldNumber;
const int CleanerChatReplyMessage::kCleanerTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanerChatReplyMessage::CleanerChatReplyMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CleanerChatReplyMessage)
}
CleanerChatReplyMessage::CleanerChatReplyMessage(const CleanerChatReplyMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cleanertext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cleanertext()) {
    cleanertext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cleanertext_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cleaneractiontype_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(cleaneractiontype_));
  // @@protoc_insertion_point(copy_constructor:CleanerChatReplyMessage)
}

void CleanerChatReplyMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CleanerChatReplyMessage_chatcleaner_2eproto.base);
  cleanertext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cleaneractiontype_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(cleaneractiontype_));
}

CleanerChatReplyMessage::~CleanerChatReplyMessage() {
  // @@protoc_insertion_point(destructor:CleanerChatReplyMessage)
  SharedDtor();
}

void CleanerChatReplyMessage::SharedDtor() {
  cleanertext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CleanerChatReplyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CleanerChatReplyMessage& CleanerChatReplyMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CleanerChatReplyMessage_chatcleaner_2eproto.base);
  return *internal_default_instance();
}


void CleanerChatReplyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CleanerChatReplyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    cleanertext_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cleaneractiontype_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(cleaneractiontype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CleanerChatReplyMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CleanerChatReplyMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_requestid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .CleanerChatType cleanerChatType = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::CleanerChatType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_cleanerchattype(static_cast<::CleanerChatType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 gameId = 3 [default = 0];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerId = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .CleanerChatReplyMessage.CleanerActionType cleanerActionType = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::CleanerChatReplyMessage_CleanerActionType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(5, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_cleaneractiontype(static_cast<::CleanerChatReplyMessage_CleanerActionType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string cleanerText = 6 [default = ""];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_cleanertext();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CleanerChatReplyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:CleanerChatReplyMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 requestId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_requestid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .CleanerChatType cleanerChatType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CleanerChatType_IsValid(value)) {
            set_cleanerchattype(static_cast< ::CleanerChatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gameId = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .CleanerChatReplyMessage.CleanerActionType cleanerActionType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CleanerChatReplyMessage_CleanerActionType_IsValid(value)) {
            set_cleaneractiontype(static_cast< ::CleanerChatReplyMessage_CleanerActionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cleanerText = 6 [default = ""];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cleanertext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CleanerChatReplyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CleanerChatReplyMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CleanerChatReplyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CleanerChatReplyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestid(), output);
  }

  // required .CleanerChatType cleanerChatType = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cleanerchattype(), output);
  }

  // optional uint32 gameId = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gameid(), output);
  }

  // required uint32 playerId = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->playerid(), output);
  }

  // required .CleanerChatReplyMessage.CleanerActionType cleanerActionType = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->cleaneractiontype(), output);
  }

  // optional string cleanerText = 6 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->cleanertext(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:CleanerChatReplyMessage)
}

size_t CleanerChatReplyMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CleanerChatReplyMessage)
  size_t total_size = 0;

  if (has_requestid()) {
    // required uint32 requestId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());
  }

  if (has_cleanerchattype()) {
    // required .CleanerChatType cleanerChatType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cleanerchattype());
  }

  if (has_playerid()) {
    // required uint32 playerId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_cleaneractiontype()) {
    // required .CleanerChatReplyMessage.CleanerActionType cleanerActionType = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cleaneractiontype());
  }

  return total_size;
}
size_t CleanerChatReplyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CleanerChatReplyMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000036) ^ 0x00000036) == 0) {  // All required fields are present.
    // required uint32 requestId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());

    // required .CleanerChatType cleanerChatType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cleanerchattype());

    // required uint32 playerId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required .CleanerChatReplyMessage.CleanerActionType cleanerActionType = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cleaneractiontype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string cleanerText = 6 [default = ""];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cleanertext());
  }

  // optional uint32 gameId = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CleanerChatReplyMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CleanerChatReplyMessage*>(&from));
}

void CleanerChatReplyMessage::MergeFrom(const CleanerChatReplyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CleanerChatReplyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      cleanertext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cleanertext_);
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000004u) {
      cleanerchattype_ = from.cleanerchattype_;
    }
    if (cached_has_bits & 0x00000008u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000010u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000020u) {
      cleaneractiontype_ = from.cleaneractiontype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CleanerChatReplyMessage::CopyFrom(const CleanerChatReplyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CleanerChatReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanerChatReplyMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000036) != 0x00000036) return false;
  return true;
}

void CleanerChatReplyMessage::Swap(CleanerChatReplyMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CleanerChatReplyMessage::InternalSwap(CleanerChatReplyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cleanertext_.Swap(&other->cleanertext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(cleanerchattype_, other->cleanerchattype_);
  swap(gameid_, other->gameid_);
  swap(playerid_, other->playerid_);
  swap(cleaneractiontype_, other->cleaneractiontype_);
}

::std::string CleanerChatReplyMessage::GetTypeName() const {
  return "CleanerChatReplyMessage";
}


// ===================================================================

void ChatCleanerMessage::InitAsDefaultInstance() {
  ::_ChatCleanerMessage_default_instance_._instance.get_mutable()->cleanerinitmessage_ = const_cast< ::CleanerInitMessage*>(
      ::CleanerInitMessage::internal_default_instance());
  ::_ChatCleanerMessage_default_instance_._instance.get_mutable()->cleanerinitackmessage_ = const_cast< ::CleanerInitAckMessage*>(
      ::CleanerInitAckMessage::internal_default_instance());
  ::_ChatCleanerMessage_default_instance_._instance.get_mutable()->cleanerchatrequestmessage_ = const_cast< ::CleanerChatRequestMessage*>(
      ::CleanerChatRequestMessage::internal_default_instance());
  ::_ChatCleanerMessage_default_instance_._instance.get_mutable()->cleanerchatreplymessage_ = const_cast< ::CleanerChatReplyMessage*>(
      ::CleanerChatReplyMessage::internal_default_instance());
}
class ChatCleanerMessage::HasBitSetters {
 public:
  static void set_has_messagetype(ChatCleanerMessage* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::CleanerInitMessage& cleanerinitmessage(const ChatCleanerMessage* msg);
  static void set_has_cleanerinitmessage(ChatCleanerMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::CleanerInitAckMessage& cleanerinitackmessage(const ChatCleanerMessage* msg);
  static void set_has_cleanerinitackmessage(ChatCleanerMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::CleanerChatRequestMessage& cleanerchatrequestmessage(const ChatCleanerMessage* msg);
  static void set_has_cleanerchatrequestmessage(ChatCleanerMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::CleanerChatReplyMessage& cleanerchatreplymessage(const ChatCleanerMessage* msg);
  static void set_has_cleanerchatreplymessage(ChatCleanerMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

const ::CleanerInitMessage&
ChatCleanerMessage::HasBitSetters::cleanerinitmessage(const ChatCleanerMessage* msg) {
  return *msg->cleanerinitmessage_;
}
const ::CleanerInitAckMessage&
ChatCleanerMessage::HasBitSetters::cleanerinitackmessage(const ChatCleanerMessage* msg) {
  return *msg->cleanerinitackmessage_;
}
const ::CleanerChatRequestMessage&
ChatCleanerMessage::HasBitSetters::cleanerchatrequestmessage(const ChatCleanerMessage* msg) {
  return *msg->cleanerchatrequestmessage_;
}
const ::CleanerChatReplyMessage&
ChatCleanerMessage::HasBitSetters::cleanerchatreplymessage(const ChatCleanerMessage* msg) {
  return *msg->cleanerchatreplymessage_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatCleanerMessage::kMessageTypeFieldNumber;
const int ChatCleanerMessage::kCleanerInitMessageFieldNumber;
const int ChatCleanerMessage::kCleanerInitAckMessageFieldNumber;
const int ChatCleanerMessage::kCleanerChatRequestMessageFieldNumber;
const int ChatCleanerMessage::kCleanerChatReplyMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatCleanerMessage::ChatCleanerMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatCleanerMessage)
}
ChatCleanerMessage::ChatCleanerMessage(const ChatCleanerMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cleanerinitmessage()) {
    cleanerinitmessage_ = new ::CleanerInitMessage(*from.cleanerinitmessage_);
  } else {
    cleanerinitmessage_ = nullptr;
  }
  if (from.has_cleanerinitackmessage()) {
    cleanerinitackmessage_ = new ::CleanerInitAckMessage(*from.cleanerinitackmessage_);
  } else {
    cleanerinitackmessage_ = nullptr;
  }
  if (from.has_cleanerchatrequestmessage()) {
    cleanerchatrequestmessage_ = new ::CleanerChatRequestMessage(*from.cleanerchatrequestmessage_);
  } else {
    cleanerchatrequestmessage_ = nullptr;
  }
  if (from.has_cleanerchatreplymessage()) {
    cleanerchatreplymessage_ = new ::CleanerChatReplyMessage(*from.cleanerchatreplymessage_);
  } else {
    cleanerchatreplymessage_ = nullptr;
  }
  messagetype_ = from.messagetype_;
  // @@protoc_insertion_point(copy_constructor:ChatCleanerMessage)
}

void ChatCleanerMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ChatCleanerMessage_chatcleaner_2eproto.base);
  ::memset(&cleanerinitmessage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cleanerchatreplymessage_) -
      reinterpret_cast<char*>(&cleanerinitmessage_)) + sizeof(cleanerchatreplymessage_));
  messagetype_ = 1;
}

ChatCleanerMessage::~ChatCleanerMessage() {
  // @@protoc_insertion_point(destructor:ChatCleanerMessage)
  SharedDtor();
}

void ChatCleanerMessage::SharedDtor() {
  if (this != internal_default_instance()) delete cleanerinitmessage_;
  if (this != internal_default_instance()) delete cleanerinitackmessage_;
  if (this != internal_default_instance()) delete cleanerchatrequestmessage_;
  if (this != internal_default_instance()) delete cleanerchatreplymessage_;
}

void ChatCleanerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatCleanerMessage& ChatCleanerMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ChatCleanerMessage_chatcleaner_2eproto.base);
  return *internal_default_instance();
}


void ChatCleanerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatCleanerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cleanerinitmessage_ != nullptr);
      cleanerinitmessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cleanerinitackmessage_ != nullptr);
      cleanerinitackmessage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cleanerchatrequestmessage_ != nullptr);
      cleanerchatrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(cleanerchatreplymessage_ != nullptr);
      cleanerchatreplymessage_->Clear();
    }
    messagetype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChatCleanerMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ChatCleanerMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .ChatCleanerMessage.ChatCleanerMessageType messageType = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::ChatCleanerMessage_ChatCleanerMessageType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_messagetype(static_cast<::ChatCleanerMessage_ChatCleanerMessageType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .CleanerInitMessage cleanerInitMessage = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::CleanerInitMessage::_InternalParse;
        object = msg->mutable_cleanerinitmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .CleanerInitAckMessage cleanerInitAckMessage = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::CleanerInitAckMessage::_InternalParse;
        object = msg->mutable_cleanerinitackmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .CleanerChatRequestMessage cleanerChatRequestMessage = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::CleanerChatRequestMessage::_InternalParse;
        object = msg->mutable_cleanerchatrequestmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .CleanerChatReplyMessage cleanerChatReplyMessage = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::CleanerChatReplyMessage::_InternalParse;
        object = msg->mutable_cleanerchatreplymessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChatCleanerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ChatCleanerMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ChatCleanerMessage.ChatCleanerMessageType messageType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChatCleanerMessage_ChatCleanerMessageType_IsValid(value)) {
            set_messagetype(static_cast< ::ChatCleanerMessage_ChatCleanerMessageType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CleanerInitMessage cleanerInitMessage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cleanerinitmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CleanerInitAckMessage cleanerInitAckMessage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cleanerinitackmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CleanerChatRequestMessage cleanerChatRequestMessage = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cleanerchatrequestmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CleanerChatReplyMessage cleanerChatReplyMessage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cleanerchatreplymessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChatCleanerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChatCleanerMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChatCleanerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChatCleanerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ChatCleanerMessage.ChatCleanerMessageType messageType = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->messagetype(), output);
  }

  // optional .CleanerInitMessage cleanerInitMessage = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, HasBitSetters::cleanerinitmessage(this), output);
  }

  // optional .CleanerInitAckMessage cleanerInitAckMessage = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, HasBitSetters::cleanerinitackmessage(this), output);
  }

  // optional .CleanerChatRequestMessage cleanerChatRequestMessage = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, HasBitSetters::cleanerchatrequestmessage(this), output);
  }

  // optional .CleanerChatReplyMessage cleanerChatReplyMessage = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, HasBitSetters::cleanerchatreplymessage(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ChatCleanerMessage)
}

size_t ChatCleanerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatCleanerMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .ChatCleanerMessage.ChatCleanerMessageType messageType = 1;
  if (has_messagetype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagetype());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CleanerInitMessage cleanerInitMessage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cleanerinitmessage_);
    }

    // optional .CleanerInitAckMessage cleanerInitAckMessage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cleanerinitackmessage_);
    }

    // optional .CleanerChatRequestMessage cleanerChatRequestMessage = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cleanerchatrequestmessage_);
    }

    // optional .CleanerChatReplyMessage cleanerChatReplyMessage = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cleanerchatreplymessage_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatCleanerMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChatCleanerMessage*>(&from));
}

void ChatCleanerMessage::MergeFrom(const ChatCleanerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatCleanerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_cleanerinitmessage()->::CleanerInitMessage::MergeFrom(from.cleanerinitmessage());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cleanerinitackmessage()->::CleanerInitAckMessage::MergeFrom(from.cleanerinitackmessage());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_cleanerchatrequestmessage()->::CleanerChatRequestMessage::MergeFrom(from.cleanerchatrequestmessage());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_cleanerchatreplymessage()->::CleanerChatReplyMessage::MergeFrom(from.cleanerchatreplymessage());
    }
    if (cached_has_bits & 0x00000010u) {
      messagetype_ = from.messagetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatCleanerMessage::CopyFrom(const ChatCleanerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatCleanerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatCleanerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  if (has_cleanerinitmessage()) {
    if (!this->cleanerinitmessage_->IsInitialized()) return false;
  }
  if (has_cleanerinitackmessage()) {
    if (!this->cleanerinitackmessage_->IsInitialized()) return false;
  }
  if (has_cleanerchatrequestmessage()) {
    if (!this->cleanerchatrequestmessage_->IsInitialized()) return false;
  }
  if (has_cleanerchatreplymessage()) {
    if (!this->cleanerchatreplymessage_->IsInitialized()) return false;
  }
  return true;
}

void ChatCleanerMessage::Swap(ChatCleanerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatCleanerMessage::InternalSwap(ChatCleanerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cleanerinitmessage_, other->cleanerinitmessage_);
  swap(cleanerinitackmessage_, other->cleanerinitackmessage_);
  swap(cleanerchatrequestmessage_, other->cleanerchatrequestmessage_);
  swap(cleanerchatreplymessage_, other->cleanerchatreplymessage_);
  swap(messagetype_, other->messagetype_);
}

::std::string ChatCleanerMessage::GetTypeName() const {
  return "ChatCleanerMessage";
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::CleanerInitMessage* Arena::CreateMaybeMessage< ::CleanerInitMessage >(Arena* arena) {
  return Arena::CreateInternal< ::CleanerInitMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CleanerInitAckMessage* Arena::CreateMaybeMessage< ::CleanerInitAckMessage >(Arena* arena) {
  return Arena::CreateInternal< ::CleanerInitAckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CleanerChatRequestMessage* Arena::CreateMaybeMessage< ::CleanerChatRequestMessage >(Arena* arena) {
  return Arena::CreateInternal< ::CleanerChatRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CleanerChatReplyMessage* Arena::CreateMaybeMessage< ::CleanerChatReplyMessage >(Arena* arena) {
  return Arena::CreateInternal< ::CleanerChatReplyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatCleanerMessage* Arena::CreateMaybeMessage< ::ChatCleanerMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ChatCleanerMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
