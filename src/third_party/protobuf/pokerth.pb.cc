// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pokerth.proto

#include "pokerth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AdminBanPlayerAckMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AdminBanPlayerMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AdminRemoveGameAckMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AdminRemoveGameMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AllInShowCardsMessage_PlayerAllIn_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AnnounceMessage_Version_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AskKickDeniedMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AskKickPlayerMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AuthClientResponseMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AuthServerChallengeMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AuthServerVerificationMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AvatarDataMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AvatarEndMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AvatarHeaderMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AvatarRequestMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChatMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChatRejectMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChatRequestMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DealFlopCardsMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DealRiverCardMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DealTurnCardMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DialogMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EndKickPetitionMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EndOfGameMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EndOfHandHideCardsMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ErrorMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameAdminChangedMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameListAdminChangedMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameListPlayerJoinedMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameListPlayerLeftMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameListSpectatorJoinedMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameListSpectatorLeftMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameListUpdateMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GamePlayerJoinedMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GamePlayerLeftMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameSpectatorJoinedMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameSpectatorLeftMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameStartInitialMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameStartRejoinMessage_RejoinPlayerData_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HandStartMessage_PlainCards_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InitAckMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InviteNotifyMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InvitePlayerToGameMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_JoinExistingGameMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_JoinGameFailedMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_KickPetitionUpdateMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_KickPlayerRequestMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LeaveGameRequestMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MyActionRequestMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NetGameInfo_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerIdChangedMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerInfoReplyMessage_PlayerInfoData_AvatarData_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerInfoRequestMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerListMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerResult_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayersActionDoneMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayersTurnMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RejectGameInvitationMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RejectInvNotifyMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RejoinExistingGameMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RemovedFromGameMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReportAvatarAckMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReportAvatarMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReportGameAckMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReportGameMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResetTimeoutMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ShowMyCardsRequestMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StartEventAckMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StartEventMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StartKickPetitionMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StatisticsMessage_StatisticsData_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SubscriptionRequestMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TimeoutWarningMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UnknownAvatarMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VoteKickReplyMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VoteKickRequestMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_YourActionRejectedMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AfterHandShowCardsMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AllInShowCardsMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AnnounceMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EndOfHandShowCardsMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameListNewMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameStartRejoinMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_HandStartMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_InitMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_JoinGameAckMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_JoinNewGameMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PlayerInfoReplyMessage_PlayerInfoData_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PlayerInfoReplyMessage_pokerth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pokerth_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StatisticsMessage_pokerth_2eproto;
class NetGameInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetGameInfo> _instance;
} _NetGameInfo_default_instance_;
class PlayerResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerResult> _instance;
} _PlayerResult_default_instance_;
class AnnounceMessage_VersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnnounceMessage_Version> _instance;
} _AnnounceMessage_Version_default_instance_;
class AnnounceMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnnounceMessage> _instance;
} _AnnounceMessage_default_instance_;
class InitMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InitMessage> _instance;
} _InitMessage_default_instance_;
class AuthServerChallengeMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthServerChallengeMessage> _instance;
} _AuthServerChallengeMessage_default_instance_;
class AuthClientResponseMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthClientResponseMessage> _instance;
} _AuthClientResponseMessage_default_instance_;
class AuthServerVerificationMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthServerVerificationMessage> _instance;
} _AuthServerVerificationMessage_default_instance_;
class InitAckMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InitAckMessage> _instance;
} _InitAckMessage_default_instance_;
class AvatarRequestMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AvatarRequestMessage> _instance;
} _AvatarRequestMessage_default_instance_;
class AvatarHeaderMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AvatarHeaderMessage> _instance;
} _AvatarHeaderMessage_default_instance_;
class AvatarDataMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AvatarDataMessage> _instance;
} _AvatarDataMessage_default_instance_;
class AvatarEndMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AvatarEndMessage> _instance;
} _AvatarEndMessage_default_instance_;
class UnknownAvatarMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnknownAvatarMessage> _instance;
} _UnknownAvatarMessage_default_instance_;
class PlayerListMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerListMessage> _instance;
} _PlayerListMessage_default_instance_;
class GameListNewMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameListNewMessage> _instance;
} _GameListNewMessage_default_instance_;
class GameListUpdateMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameListUpdateMessage> _instance;
} _GameListUpdateMessage_default_instance_;
class GameListPlayerJoinedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameListPlayerJoinedMessage> _instance;
} _GameListPlayerJoinedMessage_default_instance_;
class GameListPlayerLeftMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameListPlayerLeftMessage> _instance;
} _GameListPlayerLeftMessage_default_instance_;
class GameListSpectatorJoinedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameListSpectatorJoinedMessage> _instance;
} _GameListSpectatorJoinedMessage_default_instance_;
class GameListSpectatorLeftMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameListSpectatorLeftMessage> _instance;
} _GameListSpectatorLeftMessage_default_instance_;
class GameListAdminChangedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameListAdminChangedMessage> _instance;
} _GameListAdminChangedMessage_default_instance_;
class PlayerInfoRequestMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerInfoRequestMessage> _instance;
} _PlayerInfoRequestMessage_default_instance_;
class PlayerInfoReplyMessage_PlayerInfoData_AvatarDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerInfoReplyMessage_PlayerInfoData_AvatarData> _instance;
} _PlayerInfoReplyMessage_PlayerInfoData_AvatarData_default_instance_;
class PlayerInfoReplyMessage_PlayerInfoDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerInfoReplyMessage_PlayerInfoData> _instance;
} _PlayerInfoReplyMessage_PlayerInfoData_default_instance_;
class PlayerInfoReplyMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerInfoReplyMessage> _instance;
} _PlayerInfoReplyMessage_default_instance_;
class SubscriptionRequestMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubscriptionRequestMessage> _instance;
} _SubscriptionRequestMessage_default_instance_;
class JoinExistingGameMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JoinExistingGameMessage> _instance;
} _JoinExistingGameMessage_default_instance_;
class JoinNewGameMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JoinNewGameMessage> _instance;
} _JoinNewGameMessage_default_instance_;
class RejoinExistingGameMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RejoinExistingGameMessage> _instance;
} _RejoinExistingGameMessage_default_instance_;
class JoinGameAckMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JoinGameAckMessage> _instance;
} _JoinGameAckMessage_default_instance_;
class JoinGameFailedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JoinGameFailedMessage> _instance;
} _JoinGameFailedMessage_default_instance_;
class GamePlayerJoinedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GamePlayerJoinedMessage> _instance;
} _GamePlayerJoinedMessage_default_instance_;
class GamePlayerLeftMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GamePlayerLeftMessage> _instance;
} _GamePlayerLeftMessage_default_instance_;
class GameSpectatorJoinedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameSpectatorJoinedMessage> _instance;
} _GameSpectatorJoinedMessage_default_instance_;
class GameSpectatorLeftMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameSpectatorLeftMessage> _instance;
} _GameSpectatorLeftMessage_default_instance_;
class GameAdminChangedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameAdminChangedMessage> _instance;
} _GameAdminChangedMessage_default_instance_;
class RemovedFromGameMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemovedFromGameMessage> _instance;
} _RemovedFromGameMessage_default_instance_;
class KickPlayerRequestMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KickPlayerRequestMessage> _instance;
} _KickPlayerRequestMessage_default_instance_;
class LeaveGameRequestMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeaveGameRequestMessage> _instance;
} _LeaveGameRequestMessage_default_instance_;
class InvitePlayerToGameMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InvitePlayerToGameMessage> _instance;
} _InvitePlayerToGameMessage_default_instance_;
class InviteNotifyMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InviteNotifyMessage> _instance;
} _InviteNotifyMessage_default_instance_;
class RejectGameInvitationMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RejectGameInvitationMessage> _instance;
} _RejectGameInvitationMessage_default_instance_;
class RejectInvNotifyMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RejectInvNotifyMessage> _instance;
} _RejectInvNotifyMessage_default_instance_;
class StartEventMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartEventMessage> _instance;
} _StartEventMessage_default_instance_;
class StartEventAckMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartEventAckMessage> _instance;
} _StartEventAckMessage_default_instance_;
class GameStartInitialMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameStartInitialMessage> _instance;
} _GameStartInitialMessage_default_instance_;
class GameStartRejoinMessage_RejoinPlayerDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameStartRejoinMessage_RejoinPlayerData> _instance;
} _GameStartRejoinMessage_RejoinPlayerData_default_instance_;
class GameStartRejoinMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameStartRejoinMessage> _instance;
} _GameStartRejoinMessage_default_instance_;
class HandStartMessage_PlainCardsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HandStartMessage_PlainCards> _instance;
} _HandStartMessage_PlainCards_default_instance_;
class HandStartMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HandStartMessage> _instance;
} _HandStartMessage_default_instance_;
class PlayersTurnMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayersTurnMessage> _instance;
} _PlayersTurnMessage_default_instance_;
class MyActionRequestMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MyActionRequestMessage> _instance;
} _MyActionRequestMessage_default_instance_;
class YourActionRejectedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<YourActionRejectedMessage> _instance;
} _YourActionRejectedMessage_default_instance_;
class PlayersActionDoneMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayersActionDoneMessage> _instance;
} _PlayersActionDoneMessage_default_instance_;
class DealFlopCardsMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DealFlopCardsMessage> _instance;
} _DealFlopCardsMessage_default_instance_;
class DealTurnCardMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DealTurnCardMessage> _instance;
} _DealTurnCardMessage_default_instance_;
class DealRiverCardMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DealRiverCardMessage> _instance;
} _DealRiverCardMessage_default_instance_;
class AllInShowCardsMessage_PlayerAllInDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AllInShowCardsMessage_PlayerAllIn> _instance;
} _AllInShowCardsMessage_PlayerAllIn_default_instance_;
class AllInShowCardsMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AllInShowCardsMessage> _instance;
} _AllInShowCardsMessage_default_instance_;
class EndOfHandShowCardsMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EndOfHandShowCardsMessage> _instance;
} _EndOfHandShowCardsMessage_default_instance_;
class EndOfHandHideCardsMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EndOfHandHideCardsMessage> _instance;
} _EndOfHandHideCardsMessage_default_instance_;
class ShowMyCardsRequestMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShowMyCardsRequestMessage> _instance;
} _ShowMyCardsRequestMessage_default_instance_;
class AfterHandShowCardsMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AfterHandShowCardsMessage> _instance;
} _AfterHandShowCardsMessage_default_instance_;
class EndOfGameMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EndOfGameMessage> _instance;
} _EndOfGameMessage_default_instance_;
class PlayerIdChangedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerIdChangedMessage> _instance;
} _PlayerIdChangedMessage_default_instance_;
class AskKickPlayerMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AskKickPlayerMessage> _instance;
} _AskKickPlayerMessage_default_instance_;
class AskKickDeniedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AskKickDeniedMessage> _instance;
} _AskKickDeniedMessage_default_instance_;
class StartKickPetitionMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartKickPetitionMessage> _instance;
} _StartKickPetitionMessage_default_instance_;
class VoteKickRequestMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VoteKickRequestMessage> _instance;
} _VoteKickRequestMessage_default_instance_;
class VoteKickReplyMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VoteKickReplyMessage> _instance;
} _VoteKickReplyMessage_default_instance_;
class KickPetitionUpdateMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KickPetitionUpdateMessage> _instance;
} _KickPetitionUpdateMessage_default_instance_;
class EndKickPetitionMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EndKickPetitionMessage> _instance;
} _EndKickPetitionMessage_default_instance_;
class StatisticsMessage_StatisticsDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StatisticsMessage_StatisticsData> _instance;
} _StatisticsMessage_StatisticsData_default_instance_;
class StatisticsMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StatisticsMessage> _instance;
} _StatisticsMessage_default_instance_;
class ChatRequestMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatRequestMessage> _instance;
} _ChatRequestMessage_default_instance_;
class ChatMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatMessage> _instance;
} _ChatMessage_default_instance_;
class ChatRejectMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatRejectMessage> _instance;
} _ChatRejectMessage_default_instance_;
class DialogMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DialogMessage> _instance;
} _DialogMessage_default_instance_;
class TimeoutWarningMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimeoutWarningMessage> _instance;
} _TimeoutWarningMessage_default_instance_;
class ResetTimeoutMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResetTimeoutMessage> _instance;
} _ResetTimeoutMessage_default_instance_;
class ReportAvatarMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportAvatarMessage> _instance;
} _ReportAvatarMessage_default_instance_;
class ReportAvatarAckMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportAvatarAckMessage> _instance;
} _ReportAvatarAckMessage_default_instance_;
class ReportGameMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportGameMessage> _instance;
} _ReportGameMessage_default_instance_;
class ReportGameAckMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportGameAckMessage> _instance;
} _ReportGameAckMessage_default_instance_;
class ErrorMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ErrorMessage> _instance;
} _ErrorMessage_default_instance_;
class AdminRemoveGameMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdminRemoveGameMessage> _instance;
} _AdminRemoveGameMessage_default_instance_;
class AdminRemoveGameAckMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdminRemoveGameAckMessage> _instance;
} _AdminRemoveGameAckMessage_default_instance_;
class AdminBanPlayerMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdminBanPlayerMessage> _instance;
} _AdminBanPlayerMessage_default_instance_;
class AdminBanPlayerAckMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdminBanPlayerAckMessage> _instance;
} _AdminBanPlayerAckMessage_default_instance_;
class PokerTHMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PokerTHMessage> _instance;
} _PokerTHMessage_default_instance_;
static void InitDefaultsNetGameInfo_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NetGameInfo_default_instance_;
    new (ptr) ::NetGameInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NetGameInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NetGameInfo_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNetGameInfo_pokerth_2eproto}, {}};

static void InitDefaultsPlayerResult_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerResult_default_instance_;
    new (ptr) ::PlayerResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerResult_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerResult_pokerth_2eproto}, {}};

static void InitDefaultsAnnounceMessage_Version_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AnnounceMessage_Version_default_instance_;
    new (ptr) ::AnnounceMessage_Version();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AnnounceMessage_Version::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AnnounceMessage_Version_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAnnounceMessage_Version_pokerth_2eproto}, {}};

static void InitDefaultsAnnounceMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AnnounceMessage_default_instance_;
    new (ptr) ::AnnounceMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AnnounceMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnnounceMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnnounceMessage_pokerth_2eproto}, {
      &scc_info_AnnounceMessage_Version_pokerth_2eproto.base,}};

static void InitDefaultsInitMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InitMessage_default_instance_;
    new (ptr) ::InitMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InitMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_InitMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInitMessage_pokerth_2eproto}, {
      &scc_info_AnnounceMessage_Version_pokerth_2eproto.base,}};

static void InitDefaultsAuthServerChallengeMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AuthServerChallengeMessage_default_instance_;
    new (ptr) ::AuthServerChallengeMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AuthServerChallengeMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AuthServerChallengeMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthServerChallengeMessage_pokerth_2eproto}, {}};

static void InitDefaultsAuthClientResponseMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AuthClientResponseMessage_default_instance_;
    new (ptr) ::AuthClientResponseMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AuthClientResponseMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AuthClientResponseMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthClientResponseMessage_pokerth_2eproto}, {}};

static void InitDefaultsAuthServerVerificationMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AuthServerVerificationMessage_default_instance_;
    new (ptr) ::AuthServerVerificationMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AuthServerVerificationMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AuthServerVerificationMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthServerVerificationMessage_pokerth_2eproto}, {}};

static void InitDefaultsInitAckMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InitAckMessage_default_instance_;
    new (ptr) ::InitAckMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InitAckMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InitAckMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInitAckMessage_pokerth_2eproto}, {}};

static void InitDefaultsAvatarRequestMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AvatarRequestMessage_default_instance_;
    new (ptr) ::AvatarRequestMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AvatarRequestMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AvatarRequestMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAvatarRequestMessage_pokerth_2eproto}, {}};

static void InitDefaultsAvatarHeaderMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AvatarHeaderMessage_default_instance_;
    new (ptr) ::AvatarHeaderMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AvatarHeaderMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AvatarHeaderMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAvatarHeaderMessage_pokerth_2eproto}, {}};

static void InitDefaultsAvatarDataMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AvatarDataMessage_default_instance_;
    new (ptr) ::AvatarDataMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AvatarDataMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AvatarDataMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAvatarDataMessage_pokerth_2eproto}, {}};

static void InitDefaultsAvatarEndMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AvatarEndMessage_default_instance_;
    new (ptr) ::AvatarEndMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AvatarEndMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AvatarEndMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAvatarEndMessage_pokerth_2eproto}, {}};

static void InitDefaultsUnknownAvatarMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UnknownAvatarMessage_default_instance_;
    new (ptr) ::UnknownAvatarMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UnknownAvatarMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UnknownAvatarMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUnknownAvatarMessage_pokerth_2eproto}, {}};

static void InitDefaultsPlayerListMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerListMessage_default_instance_;
    new (ptr) ::PlayerListMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerListMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerListMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerListMessage_pokerth_2eproto}, {}};

static void InitDefaultsGameListNewMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameListNewMessage_default_instance_;
    new (ptr) ::GameListNewMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameListNewMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameListNewMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameListNewMessage_pokerth_2eproto}, {
      &scc_info_NetGameInfo_pokerth_2eproto.base,}};

static void InitDefaultsGameListUpdateMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameListUpdateMessage_default_instance_;
    new (ptr) ::GameListUpdateMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameListUpdateMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameListUpdateMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameListUpdateMessage_pokerth_2eproto}, {}};

static void InitDefaultsGameListPlayerJoinedMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameListPlayerJoinedMessage_default_instance_;
    new (ptr) ::GameListPlayerJoinedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameListPlayerJoinedMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameListPlayerJoinedMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameListPlayerJoinedMessage_pokerth_2eproto}, {}};

static void InitDefaultsGameListPlayerLeftMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameListPlayerLeftMessage_default_instance_;
    new (ptr) ::GameListPlayerLeftMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameListPlayerLeftMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameListPlayerLeftMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameListPlayerLeftMessage_pokerth_2eproto}, {}};

static void InitDefaultsGameListSpectatorJoinedMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameListSpectatorJoinedMessage_default_instance_;
    new (ptr) ::GameListSpectatorJoinedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameListSpectatorJoinedMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameListSpectatorJoinedMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameListSpectatorJoinedMessage_pokerth_2eproto}, {}};

static void InitDefaultsGameListSpectatorLeftMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameListSpectatorLeftMessage_default_instance_;
    new (ptr) ::GameListSpectatorLeftMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameListSpectatorLeftMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameListSpectatorLeftMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameListSpectatorLeftMessage_pokerth_2eproto}, {}};

static void InitDefaultsGameListAdminChangedMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameListAdminChangedMessage_default_instance_;
    new (ptr) ::GameListAdminChangedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameListAdminChangedMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameListAdminChangedMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameListAdminChangedMessage_pokerth_2eproto}, {}};

static void InitDefaultsPlayerInfoRequestMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerInfoRequestMessage_default_instance_;
    new (ptr) ::PlayerInfoRequestMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerInfoRequestMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerInfoRequestMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerInfoRequestMessage_pokerth_2eproto}, {}};

static void InitDefaultsPlayerInfoReplyMessage_PlayerInfoData_AvatarData_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerInfoReplyMessage_PlayerInfoData_AvatarData_default_instance_;
    new (ptr) ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerInfoReplyMessage_PlayerInfoData_AvatarData_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerInfoReplyMessage_PlayerInfoData_AvatarData_pokerth_2eproto}, {}};

static void InitDefaultsPlayerInfoReplyMessage_PlayerInfoData_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerInfoReplyMessage_PlayerInfoData_default_instance_;
    new (ptr) ::PlayerInfoReplyMessage_PlayerInfoData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerInfoReplyMessage_PlayerInfoData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PlayerInfoReplyMessage_PlayerInfoData_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlayerInfoReplyMessage_PlayerInfoData_pokerth_2eproto}, {
      &scc_info_PlayerInfoReplyMessage_PlayerInfoData_AvatarData_pokerth_2eproto.base,}};

static void InitDefaultsPlayerInfoReplyMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerInfoReplyMessage_default_instance_;
    new (ptr) ::PlayerInfoReplyMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerInfoReplyMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PlayerInfoReplyMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlayerInfoReplyMessage_pokerth_2eproto}, {
      &scc_info_PlayerInfoReplyMessage_PlayerInfoData_pokerth_2eproto.base,}};

static void InitDefaultsSubscriptionRequestMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SubscriptionRequestMessage_default_instance_;
    new (ptr) ::SubscriptionRequestMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubscriptionRequestMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubscriptionRequestMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubscriptionRequestMessage_pokerth_2eproto}, {}};

static void InitDefaultsJoinExistingGameMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_JoinExistingGameMessage_default_instance_;
    new (ptr) ::JoinExistingGameMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JoinExistingGameMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_JoinExistingGameMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsJoinExistingGameMessage_pokerth_2eproto}, {}};

static void InitDefaultsJoinNewGameMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_JoinNewGameMessage_default_instance_;
    new (ptr) ::JoinNewGameMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JoinNewGameMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_JoinNewGameMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsJoinNewGameMessage_pokerth_2eproto}, {
      &scc_info_NetGameInfo_pokerth_2eproto.base,}};

static void InitDefaultsRejoinExistingGameMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RejoinExistingGameMessage_default_instance_;
    new (ptr) ::RejoinExistingGameMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RejoinExistingGameMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RejoinExistingGameMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRejoinExistingGameMessage_pokerth_2eproto}, {}};

static void InitDefaultsJoinGameAckMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_JoinGameAckMessage_default_instance_;
    new (ptr) ::JoinGameAckMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JoinGameAckMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_JoinGameAckMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsJoinGameAckMessage_pokerth_2eproto}, {
      &scc_info_NetGameInfo_pokerth_2eproto.base,}};

static void InitDefaultsJoinGameFailedMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_JoinGameFailedMessage_default_instance_;
    new (ptr) ::JoinGameFailedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JoinGameFailedMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_JoinGameFailedMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsJoinGameFailedMessage_pokerth_2eproto}, {}};

static void InitDefaultsGamePlayerJoinedMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GamePlayerJoinedMessage_default_instance_;
    new (ptr) ::GamePlayerJoinedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GamePlayerJoinedMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GamePlayerJoinedMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGamePlayerJoinedMessage_pokerth_2eproto}, {}};

static void InitDefaultsGamePlayerLeftMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GamePlayerLeftMessage_default_instance_;
    new (ptr) ::GamePlayerLeftMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GamePlayerLeftMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GamePlayerLeftMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGamePlayerLeftMessage_pokerth_2eproto}, {}};

static void InitDefaultsGameSpectatorJoinedMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameSpectatorJoinedMessage_default_instance_;
    new (ptr) ::GameSpectatorJoinedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameSpectatorJoinedMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameSpectatorJoinedMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameSpectatorJoinedMessage_pokerth_2eproto}, {}};

static void InitDefaultsGameSpectatorLeftMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameSpectatorLeftMessage_default_instance_;
    new (ptr) ::GameSpectatorLeftMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameSpectatorLeftMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameSpectatorLeftMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameSpectatorLeftMessage_pokerth_2eproto}, {}};

static void InitDefaultsGameAdminChangedMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameAdminChangedMessage_default_instance_;
    new (ptr) ::GameAdminChangedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameAdminChangedMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameAdminChangedMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameAdminChangedMessage_pokerth_2eproto}, {}};

static void InitDefaultsRemovedFromGameMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RemovedFromGameMessage_default_instance_;
    new (ptr) ::RemovedFromGameMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RemovedFromGameMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RemovedFromGameMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRemovedFromGameMessage_pokerth_2eproto}, {}};

static void InitDefaultsKickPlayerRequestMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KickPlayerRequestMessage_default_instance_;
    new (ptr) ::KickPlayerRequestMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KickPlayerRequestMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KickPlayerRequestMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKickPlayerRequestMessage_pokerth_2eproto}, {}};

static void InitDefaultsLeaveGameRequestMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LeaveGameRequestMessage_default_instance_;
    new (ptr) ::LeaveGameRequestMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LeaveGameRequestMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LeaveGameRequestMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLeaveGameRequestMessage_pokerth_2eproto}, {}};

static void InitDefaultsInvitePlayerToGameMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InvitePlayerToGameMessage_default_instance_;
    new (ptr) ::InvitePlayerToGameMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InvitePlayerToGameMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InvitePlayerToGameMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInvitePlayerToGameMessage_pokerth_2eproto}, {}};

static void InitDefaultsInviteNotifyMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InviteNotifyMessage_default_instance_;
    new (ptr) ::InviteNotifyMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InviteNotifyMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InviteNotifyMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInviteNotifyMessage_pokerth_2eproto}, {}};

static void InitDefaultsRejectGameInvitationMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RejectGameInvitationMessage_default_instance_;
    new (ptr) ::RejectGameInvitationMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RejectGameInvitationMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RejectGameInvitationMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRejectGameInvitationMessage_pokerth_2eproto}, {}};

static void InitDefaultsRejectInvNotifyMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RejectInvNotifyMessage_default_instance_;
    new (ptr) ::RejectInvNotifyMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RejectInvNotifyMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RejectInvNotifyMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRejectInvNotifyMessage_pokerth_2eproto}, {}};

static void InitDefaultsStartEventMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StartEventMessage_default_instance_;
    new (ptr) ::StartEventMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StartEventMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StartEventMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStartEventMessage_pokerth_2eproto}, {}};

static void InitDefaultsStartEventAckMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StartEventAckMessage_default_instance_;
    new (ptr) ::StartEventAckMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StartEventAckMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StartEventAckMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStartEventAckMessage_pokerth_2eproto}, {}};

static void InitDefaultsGameStartInitialMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameStartInitialMessage_default_instance_;
    new (ptr) ::GameStartInitialMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameStartInitialMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameStartInitialMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameStartInitialMessage_pokerth_2eproto}, {}};

static void InitDefaultsGameStartRejoinMessage_RejoinPlayerData_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameStartRejoinMessage_RejoinPlayerData_default_instance_;
    new (ptr) ::GameStartRejoinMessage_RejoinPlayerData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameStartRejoinMessage_RejoinPlayerData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameStartRejoinMessage_RejoinPlayerData_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameStartRejoinMessage_RejoinPlayerData_pokerth_2eproto}, {}};

static void InitDefaultsGameStartRejoinMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameStartRejoinMessage_default_instance_;
    new (ptr) ::GameStartRejoinMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameStartRejoinMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameStartRejoinMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameStartRejoinMessage_pokerth_2eproto}, {
      &scc_info_GameStartRejoinMessage_RejoinPlayerData_pokerth_2eproto.base,}};

static void InitDefaultsHandStartMessage_PlainCards_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HandStartMessage_PlainCards_default_instance_;
    new (ptr) ::HandStartMessage_PlainCards();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HandStartMessage_PlainCards::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HandStartMessage_PlainCards_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHandStartMessage_PlainCards_pokerth_2eproto}, {}};

static void InitDefaultsHandStartMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HandStartMessage_default_instance_;
    new (ptr) ::HandStartMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HandStartMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HandStartMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHandStartMessage_pokerth_2eproto}, {
      &scc_info_HandStartMessage_PlainCards_pokerth_2eproto.base,}};

static void InitDefaultsPlayersTurnMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayersTurnMessage_default_instance_;
    new (ptr) ::PlayersTurnMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayersTurnMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayersTurnMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayersTurnMessage_pokerth_2eproto}, {}};

static void InitDefaultsMyActionRequestMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MyActionRequestMessage_default_instance_;
    new (ptr) ::MyActionRequestMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MyActionRequestMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MyActionRequestMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMyActionRequestMessage_pokerth_2eproto}, {}};

static void InitDefaultsYourActionRejectedMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_YourActionRejectedMessage_default_instance_;
    new (ptr) ::YourActionRejectedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::YourActionRejectedMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_YourActionRejectedMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsYourActionRejectedMessage_pokerth_2eproto}, {}};

static void InitDefaultsPlayersActionDoneMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayersActionDoneMessage_default_instance_;
    new (ptr) ::PlayersActionDoneMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayersActionDoneMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayersActionDoneMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayersActionDoneMessage_pokerth_2eproto}, {}};

static void InitDefaultsDealFlopCardsMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DealFlopCardsMessage_default_instance_;
    new (ptr) ::DealFlopCardsMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DealFlopCardsMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DealFlopCardsMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDealFlopCardsMessage_pokerth_2eproto}, {}};

static void InitDefaultsDealTurnCardMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DealTurnCardMessage_default_instance_;
    new (ptr) ::DealTurnCardMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DealTurnCardMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DealTurnCardMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDealTurnCardMessage_pokerth_2eproto}, {}};

static void InitDefaultsDealRiverCardMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DealRiverCardMessage_default_instance_;
    new (ptr) ::DealRiverCardMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DealRiverCardMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DealRiverCardMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDealRiverCardMessage_pokerth_2eproto}, {}};

static void InitDefaultsAllInShowCardsMessage_PlayerAllIn_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AllInShowCardsMessage_PlayerAllIn_default_instance_;
    new (ptr) ::AllInShowCardsMessage_PlayerAllIn();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AllInShowCardsMessage_PlayerAllIn::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AllInShowCardsMessage_PlayerAllIn_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAllInShowCardsMessage_PlayerAllIn_pokerth_2eproto}, {}};

static void InitDefaultsAllInShowCardsMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AllInShowCardsMessage_default_instance_;
    new (ptr) ::AllInShowCardsMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AllInShowCardsMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AllInShowCardsMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAllInShowCardsMessage_pokerth_2eproto}, {
      &scc_info_AllInShowCardsMessage_PlayerAllIn_pokerth_2eproto.base,}};

static void InitDefaultsEndOfHandShowCardsMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EndOfHandShowCardsMessage_default_instance_;
    new (ptr) ::EndOfHandShowCardsMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EndOfHandShowCardsMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EndOfHandShowCardsMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEndOfHandShowCardsMessage_pokerth_2eproto}, {
      &scc_info_PlayerResult_pokerth_2eproto.base,}};

static void InitDefaultsEndOfHandHideCardsMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EndOfHandHideCardsMessage_default_instance_;
    new (ptr) ::EndOfHandHideCardsMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EndOfHandHideCardsMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EndOfHandHideCardsMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEndOfHandHideCardsMessage_pokerth_2eproto}, {}};

static void InitDefaultsShowMyCardsRequestMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ShowMyCardsRequestMessage_default_instance_;
    new (ptr) ::ShowMyCardsRequestMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ShowMyCardsRequestMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ShowMyCardsRequestMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsShowMyCardsRequestMessage_pokerth_2eproto}, {}};

static void InitDefaultsAfterHandShowCardsMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AfterHandShowCardsMessage_default_instance_;
    new (ptr) ::AfterHandShowCardsMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AfterHandShowCardsMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AfterHandShowCardsMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAfterHandShowCardsMessage_pokerth_2eproto}, {
      &scc_info_PlayerResult_pokerth_2eproto.base,}};

static void InitDefaultsEndOfGameMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EndOfGameMessage_default_instance_;
    new (ptr) ::EndOfGameMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EndOfGameMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EndOfGameMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEndOfGameMessage_pokerth_2eproto}, {}};

static void InitDefaultsPlayerIdChangedMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerIdChangedMessage_default_instance_;
    new (ptr) ::PlayerIdChangedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerIdChangedMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerIdChangedMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerIdChangedMessage_pokerth_2eproto}, {}};

static void InitDefaultsAskKickPlayerMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AskKickPlayerMessage_default_instance_;
    new (ptr) ::AskKickPlayerMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AskKickPlayerMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AskKickPlayerMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAskKickPlayerMessage_pokerth_2eproto}, {}};

static void InitDefaultsAskKickDeniedMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AskKickDeniedMessage_default_instance_;
    new (ptr) ::AskKickDeniedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AskKickDeniedMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AskKickDeniedMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAskKickDeniedMessage_pokerth_2eproto}, {}};

static void InitDefaultsStartKickPetitionMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StartKickPetitionMessage_default_instance_;
    new (ptr) ::StartKickPetitionMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StartKickPetitionMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StartKickPetitionMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStartKickPetitionMessage_pokerth_2eproto}, {}};

static void InitDefaultsVoteKickRequestMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VoteKickRequestMessage_default_instance_;
    new (ptr) ::VoteKickRequestMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VoteKickRequestMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VoteKickRequestMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVoteKickRequestMessage_pokerth_2eproto}, {}};

static void InitDefaultsVoteKickReplyMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VoteKickReplyMessage_default_instance_;
    new (ptr) ::VoteKickReplyMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VoteKickReplyMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VoteKickReplyMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVoteKickReplyMessage_pokerth_2eproto}, {}};

static void InitDefaultsKickPetitionUpdateMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_KickPetitionUpdateMessage_default_instance_;
    new (ptr) ::KickPetitionUpdateMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KickPetitionUpdateMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KickPetitionUpdateMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKickPetitionUpdateMessage_pokerth_2eproto}, {}};

static void InitDefaultsEndKickPetitionMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EndKickPetitionMessage_default_instance_;
    new (ptr) ::EndKickPetitionMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EndKickPetitionMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EndKickPetitionMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEndKickPetitionMessage_pokerth_2eproto}, {}};

static void InitDefaultsStatisticsMessage_StatisticsData_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StatisticsMessage_StatisticsData_default_instance_;
    new (ptr) ::StatisticsMessage_StatisticsData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StatisticsMessage_StatisticsData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StatisticsMessage_StatisticsData_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStatisticsMessage_StatisticsData_pokerth_2eproto}, {}};

static void InitDefaultsStatisticsMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StatisticsMessage_default_instance_;
    new (ptr) ::StatisticsMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StatisticsMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StatisticsMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStatisticsMessage_pokerth_2eproto}, {
      &scc_info_StatisticsMessage_StatisticsData_pokerth_2eproto.base,}};

static void InitDefaultsChatRequestMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChatRequestMessage_default_instance_;
    new (ptr) ::ChatRequestMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatRequestMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChatRequestMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChatRequestMessage_pokerth_2eproto}, {}};

static void InitDefaultsChatMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChatMessage_default_instance_;
    new (ptr) ::ChatMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChatMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChatMessage_pokerth_2eproto}, {}};

static void InitDefaultsChatRejectMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChatRejectMessage_default_instance_;
    new (ptr) ::ChatRejectMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatRejectMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChatRejectMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChatRejectMessage_pokerth_2eproto}, {}};

static void InitDefaultsDialogMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DialogMessage_default_instance_;
    new (ptr) ::DialogMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DialogMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DialogMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDialogMessage_pokerth_2eproto}, {}};

static void InitDefaultsTimeoutWarningMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TimeoutWarningMessage_default_instance_;
    new (ptr) ::TimeoutWarningMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TimeoutWarningMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TimeoutWarningMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTimeoutWarningMessage_pokerth_2eproto}, {}};

static void InitDefaultsResetTimeoutMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ResetTimeoutMessage_default_instance_;
    new (ptr) ::ResetTimeoutMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ResetTimeoutMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResetTimeoutMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResetTimeoutMessage_pokerth_2eproto}, {}};

static void InitDefaultsReportAvatarMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReportAvatarMessage_default_instance_;
    new (ptr) ::ReportAvatarMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ReportAvatarMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReportAvatarMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReportAvatarMessage_pokerth_2eproto}, {}};

static void InitDefaultsReportAvatarAckMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReportAvatarAckMessage_default_instance_;
    new (ptr) ::ReportAvatarAckMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ReportAvatarAckMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReportAvatarAckMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReportAvatarAckMessage_pokerth_2eproto}, {}};

static void InitDefaultsReportGameMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReportGameMessage_default_instance_;
    new (ptr) ::ReportGameMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ReportGameMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReportGameMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReportGameMessage_pokerth_2eproto}, {}};

static void InitDefaultsReportGameAckMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReportGameAckMessage_default_instance_;
    new (ptr) ::ReportGameAckMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ReportGameAckMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReportGameAckMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReportGameAckMessage_pokerth_2eproto}, {}};

static void InitDefaultsErrorMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ErrorMessage_default_instance_;
    new (ptr) ::ErrorMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ErrorMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ErrorMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsErrorMessage_pokerth_2eproto}, {}};

static void InitDefaultsAdminRemoveGameMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AdminRemoveGameMessage_default_instance_;
    new (ptr) ::AdminRemoveGameMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AdminRemoveGameMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AdminRemoveGameMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAdminRemoveGameMessage_pokerth_2eproto}, {}};

static void InitDefaultsAdminRemoveGameAckMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AdminRemoveGameAckMessage_default_instance_;
    new (ptr) ::AdminRemoveGameAckMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AdminRemoveGameAckMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AdminRemoveGameAckMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAdminRemoveGameAckMessage_pokerth_2eproto}, {}};

static void InitDefaultsAdminBanPlayerMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AdminBanPlayerMessage_default_instance_;
    new (ptr) ::AdminBanPlayerMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AdminBanPlayerMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AdminBanPlayerMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAdminBanPlayerMessage_pokerth_2eproto}, {}};

static void InitDefaultsAdminBanPlayerAckMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AdminBanPlayerAckMessage_default_instance_;
    new (ptr) ::AdminBanPlayerAckMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AdminBanPlayerAckMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AdminBanPlayerAckMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAdminBanPlayerAckMessage_pokerth_2eproto}, {}};

static void InitDefaultsPokerTHMessage_pokerth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PokerTHMessage_default_instance_;
    new (ptr) ::PokerTHMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PokerTHMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<81> scc_info_PokerTHMessage_pokerth_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 81, InitDefaultsPokerTHMessage_pokerth_2eproto}, {
      &scc_info_AnnounceMessage_pokerth_2eproto.base,
      &scc_info_InitMessage_pokerth_2eproto.base,
      &scc_info_AuthServerChallengeMessage_pokerth_2eproto.base,
      &scc_info_AuthClientResponseMessage_pokerth_2eproto.base,
      &scc_info_AuthServerVerificationMessage_pokerth_2eproto.base,
      &scc_info_InitAckMessage_pokerth_2eproto.base,
      &scc_info_AvatarRequestMessage_pokerth_2eproto.base,
      &scc_info_AvatarHeaderMessage_pokerth_2eproto.base,
      &scc_info_AvatarDataMessage_pokerth_2eproto.base,
      &scc_info_AvatarEndMessage_pokerth_2eproto.base,
      &scc_info_UnknownAvatarMessage_pokerth_2eproto.base,
      &scc_info_PlayerListMessage_pokerth_2eproto.base,
      &scc_info_GameListNewMessage_pokerth_2eproto.base,
      &scc_info_GameListUpdateMessage_pokerth_2eproto.base,
      &scc_info_GameListPlayerJoinedMessage_pokerth_2eproto.base,
      &scc_info_GameListPlayerLeftMessage_pokerth_2eproto.base,
      &scc_info_GameListAdminChangedMessage_pokerth_2eproto.base,
      &scc_info_PlayerInfoRequestMessage_pokerth_2eproto.base,
      &scc_info_PlayerInfoReplyMessage_pokerth_2eproto.base,
      &scc_info_SubscriptionRequestMessage_pokerth_2eproto.base,
      &scc_info_JoinExistingGameMessage_pokerth_2eproto.base,
      &scc_info_JoinNewGameMessage_pokerth_2eproto.base,
      &scc_info_RejoinExistingGameMessage_pokerth_2eproto.base,
      &scc_info_JoinGameAckMessage_pokerth_2eproto.base,
      &scc_info_JoinGameFailedMessage_pokerth_2eproto.base,
      &scc_info_GamePlayerJoinedMessage_pokerth_2eproto.base,
      &scc_info_GamePlayerLeftMessage_pokerth_2eproto.base,
      &scc_info_GameAdminChangedMessage_pokerth_2eproto.base,
      &scc_info_RemovedFromGameMessage_pokerth_2eproto.base,
      &scc_info_KickPlayerRequestMessage_pokerth_2eproto.base,
      &scc_info_LeaveGameRequestMessage_pokerth_2eproto.base,
      &scc_info_InvitePlayerToGameMessage_pokerth_2eproto.base,
      &scc_info_InviteNotifyMessage_pokerth_2eproto.base,
      &scc_info_RejectGameInvitationMessage_pokerth_2eproto.base,
      &scc_info_RejectInvNotifyMessage_pokerth_2eproto.base,
      &scc_info_StartEventMessage_pokerth_2eproto.base,
      &scc_info_StartEventAckMessage_pokerth_2eproto.base,
      &scc_info_GameStartInitialMessage_pokerth_2eproto.base,
      &scc_info_GameStartRejoinMessage_pokerth_2eproto.base,
      &scc_info_HandStartMessage_pokerth_2eproto.base,
      &scc_info_PlayersTurnMessage_pokerth_2eproto.base,
      &scc_info_MyActionRequestMessage_pokerth_2eproto.base,
      &scc_info_YourActionRejectedMessage_pokerth_2eproto.base,
      &scc_info_PlayersActionDoneMessage_pokerth_2eproto.base,
      &scc_info_DealFlopCardsMessage_pokerth_2eproto.base,
      &scc_info_DealTurnCardMessage_pokerth_2eproto.base,
      &scc_info_DealRiverCardMessage_pokerth_2eproto.base,
      &scc_info_AllInShowCardsMessage_pokerth_2eproto.base,
      &scc_info_EndOfHandShowCardsMessage_pokerth_2eproto.base,
      &scc_info_EndOfHandHideCardsMessage_pokerth_2eproto.base,
      &scc_info_ShowMyCardsRequestMessage_pokerth_2eproto.base,
      &scc_info_AfterHandShowCardsMessage_pokerth_2eproto.base,
      &scc_info_EndOfGameMessage_pokerth_2eproto.base,
      &scc_info_PlayerIdChangedMessage_pokerth_2eproto.base,
      &scc_info_AskKickPlayerMessage_pokerth_2eproto.base,
      &scc_info_AskKickDeniedMessage_pokerth_2eproto.base,
      &scc_info_StartKickPetitionMessage_pokerth_2eproto.base,
      &scc_info_VoteKickRequestMessage_pokerth_2eproto.base,
      &scc_info_VoteKickReplyMessage_pokerth_2eproto.base,
      &scc_info_KickPetitionUpdateMessage_pokerth_2eproto.base,
      &scc_info_EndKickPetitionMessage_pokerth_2eproto.base,
      &scc_info_StatisticsMessage_pokerth_2eproto.base,
      &scc_info_ChatRequestMessage_pokerth_2eproto.base,
      &scc_info_ChatMessage_pokerth_2eproto.base,
      &scc_info_ChatRejectMessage_pokerth_2eproto.base,
      &scc_info_DialogMessage_pokerth_2eproto.base,
      &scc_info_TimeoutWarningMessage_pokerth_2eproto.base,
      &scc_info_ResetTimeoutMessage_pokerth_2eproto.base,
      &scc_info_ReportAvatarMessage_pokerth_2eproto.base,
      &scc_info_ReportAvatarAckMessage_pokerth_2eproto.base,
      &scc_info_ReportGameMessage_pokerth_2eproto.base,
      &scc_info_ReportGameAckMessage_pokerth_2eproto.base,
      &scc_info_ErrorMessage_pokerth_2eproto.base,
      &scc_info_AdminRemoveGameMessage_pokerth_2eproto.base,
      &scc_info_AdminRemoveGameAckMessage_pokerth_2eproto.base,
      &scc_info_AdminBanPlayerMessage_pokerth_2eproto.base,
      &scc_info_AdminBanPlayerAckMessage_pokerth_2eproto.base,
      &scc_info_GameListSpectatorJoinedMessage_pokerth_2eproto.base,
      &scc_info_GameListSpectatorLeftMessage_pokerth_2eproto.base,
      &scc_info_GameSpectatorJoinedMessage_pokerth_2eproto.base,
      &scc_info_GameSpectatorLeftMessage_pokerth_2eproto.base,}};

bool NetGameInfo_NetGameType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NetGameInfo_NetGameType NetGameInfo::normalGame;
const NetGameInfo_NetGameType NetGameInfo::registeredOnlyGame;
const NetGameInfo_NetGameType NetGameInfo::inviteOnlyGame;
const NetGameInfo_NetGameType NetGameInfo::rankingGame;
const NetGameInfo_NetGameType NetGameInfo::NetGameType_MIN;
const NetGameInfo_NetGameType NetGameInfo::NetGameType_MAX;
const int NetGameInfo::NetGameType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool NetGameInfo_RaiseIntervalMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NetGameInfo_RaiseIntervalMode NetGameInfo::raiseOnHandNum;
const NetGameInfo_RaiseIntervalMode NetGameInfo::raiseOnMinutes;
const NetGameInfo_RaiseIntervalMode NetGameInfo::RaiseIntervalMode_MIN;
const NetGameInfo_RaiseIntervalMode NetGameInfo::RaiseIntervalMode_MAX;
const int NetGameInfo::RaiseIntervalMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool NetGameInfo_EndRaiseMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NetGameInfo_EndRaiseMode NetGameInfo::doubleBlinds;
const NetGameInfo_EndRaiseMode NetGameInfo::raiseByEndValue;
const NetGameInfo_EndRaiseMode NetGameInfo::keepLastBlind;
const NetGameInfo_EndRaiseMode NetGameInfo::EndRaiseMode_MIN;
const NetGameInfo_EndRaiseMode NetGameInfo::EndRaiseMode_MAX;
const int NetGameInfo::EndRaiseMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool AnnounceMessage_ServerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AnnounceMessage_ServerType AnnounceMessage::serverTypeLAN;
const AnnounceMessage_ServerType AnnounceMessage::serverTypeInternetNoAuth;
const AnnounceMessage_ServerType AnnounceMessage::serverTypeInternetAuth;
const AnnounceMessage_ServerType AnnounceMessage::ServerType_MIN;
const AnnounceMessage_ServerType AnnounceMessage::ServerType_MAX;
const int AnnounceMessage::ServerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool InitMessage_LoginType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const InitMessage_LoginType InitMessage::guestLogin;
const InitMessage_LoginType InitMessage::authenticatedLogin;
const InitMessage_LoginType InitMessage::unauthenticatedLogin;
const InitMessage_LoginType InitMessage::LoginType_MIN;
const InitMessage_LoginType InitMessage::LoginType_MAX;
const int InitMessage::LoginType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PlayerListMessage_PlayerListNotification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PlayerListMessage_PlayerListNotification PlayerListMessage::playerListNew;
const PlayerListMessage_PlayerListNotification PlayerListMessage::playerListLeft;
const PlayerListMessage_PlayerListNotification PlayerListMessage::PlayerListNotification_MIN;
const PlayerListMessage_PlayerListNotification PlayerListMessage::PlayerListNotification_MAX;
const int PlayerListMessage::PlayerListNotification_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SubscriptionRequestMessage_SubscriptionAction_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SubscriptionRequestMessage_SubscriptionAction SubscriptionRequestMessage::unsubscribeGameList;
const SubscriptionRequestMessage_SubscriptionAction SubscriptionRequestMessage::resubscribeGameList;
const SubscriptionRequestMessage_SubscriptionAction SubscriptionRequestMessage::SubscriptionAction_MIN;
const SubscriptionRequestMessage_SubscriptionAction SubscriptionRequestMessage::SubscriptionAction_MAX;
const int SubscriptionRequestMessage::SubscriptionAction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool JoinGameFailedMessage_JoinGameFailureReason_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::invalidGame;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::gameIsFull;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::gameIsRunning;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::invalidPassword;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::notAllowedAsGuest;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::notInvited;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::gameNameInUse;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::badGameName;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::invalidSettings;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::ipAddressBlocked;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::rejoinFailed;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::noSpectatorsAllowed;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::JoinGameFailureReason_MIN;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::JoinGameFailureReason_MAX;
const int JoinGameFailedMessage::JoinGameFailureReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool GamePlayerLeftMessage_GamePlayerLeftReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::leftOnRequest;
const GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::leftKicked;
const GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::leftError;
const GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::GamePlayerLeftReason_MIN;
const GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::GamePlayerLeftReason_MAX;
const int GamePlayerLeftMessage::GamePlayerLeftReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool RemovedFromGameMessage_RemovedFromGameReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::removedOnRequest;
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::kickedFromGame;
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::gameIsFull;
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::gameIsRunning;
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::gameTimeout;
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::removedStartFailed;
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::gameClosed;
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::RemovedFromGameReason_MIN;
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::RemovedFromGameReason_MAX;
const int RemovedFromGameMessage::RemovedFromGameReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool RejectGameInvitationMessage_RejectGameInvReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RejectGameInvitationMessage_RejectGameInvReason RejectGameInvitationMessage::rejectReasonNo;
const RejectGameInvitationMessage_RejectGameInvReason RejectGameInvitationMessage::rejectReasonBusy;
const RejectGameInvitationMessage_RejectGameInvReason RejectGameInvitationMessage::RejectGameInvReason_MIN;
const RejectGameInvitationMessage_RejectGameInvReason RejectGameInvitationMessage::RejectGameInvReason_MAX;
const int RejectGameInvitationMessage::RejectGameInvReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool StartEventMessage_StartEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StartEventMessage_StartEventType StartEventMessage::startEvent;
const StartEventMessage_StartEventType StartEventMessage::rejoinEvent;
const StartEventMessage_StartEventType StartEventMessage::StartEventType_MIN;
const StartEventMessage_StartEventType StartEventMessage::StartEventType_MAX;
const int StartEventMessage::StartEventType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool YourActionRejectedMessage_RejectionReason_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::rejectedInvalidGameState;
const YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::rejectedNotYourTurn;
const YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::rejectedActionNotAllowed;
const YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::RejectionReason_MIN;
const YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::RejectionReason_MAX;
const int YourActionRejectedMessage::RejectionReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool AskKickDeniedMessage_KickDeniedReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedInvalidGameState;
const AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedNotPossible;
const AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedTryAgainLater;
const AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedAlreadyInProgress;
const AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedInvalidPlayerId;
const AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::KickDeniedReason_MIN;
const AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::KickDeniedReason_MAX;
const int AskKickDeniedMessage::KickDeniedReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool VoteKickReplyMessage_VoteKickReplyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::voteKickAck;
const VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::voteKickDeniedInvalid;
const VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::voteKickDeniedAlreadyVoted;
const VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::VoteKickReplyType_MIN;
const VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::VoteKickReplyType_MAX;
const int VoteKickReplyMessage::VoteKickReplyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool EndKickPetitionMessage_PetitionEndReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::petitionEndEnoughVotes;
const EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::petitionEndTooFewPlayers;
const EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::petitionEndPlayerLeft;
const EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::petitionEndTimeout;
const EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::PetitionEndReason_MIN;
const EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::PetitionEndReason_MAX;
const int EndKickPetitionMessage::PetitionEndReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool StatisticsMessage_StatisticsData_StatisticsType_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StatisticsMessage_StatisticsData_StatisticsType StatisticsMessage_StatisticsData::statNumberOfPlayers;
const StatisticsMessage_StatisticsData_StatisticsType StatisticsMessage_StatisticsData::StatisticsType_MIN;
const StatisticsMessage_StatisticsData_StatisticsType StatisticsMessage_StatisticsData::StatisticsType_MAX;
const int StatisticsMessage_StatisticsData::StatisticsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ChatMessage_ChatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChatMessage_ChatType ChatMessage::chatTypeLobby;
const ChatMessage_ChatType ChatMessage::chatTypeGame;
const ChatMessage_ChatType ChatMessage::chatTypeBot;
const ChatMessage_ChatType ChatMessage::chatTypeBroadcast;
const ChatMessage_ChatType ChatMessage::chatTypePrivate;
const ChatMessage_ChatType ChatMessage::ChatType_MIN;
const ChatMessage_ChatType ChatMessage::ChatType_MAX;
const int ChatMessage::ChatType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool TimeoutWarningMessage_TimeoutReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::timeoutNoDataReceived;
const TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::timeoutInactiveGame;
const TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::timeoutKickAfterAutofold;
const TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::TimeoutReason_MIN;
const TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::TimeoutReason_MAX;
const int TimeoutWarningMessage::TimeoutReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ReportAvatarAckMessage_ReportAvatarResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::avatarReportAccepted;
const ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::avatarReportDuplicate;
const ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::avatarReportInvalid;
const ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::ReportAvatarResult_MIN;
const ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::ReportAvatarResult_MAX;
const int ReportAvatarAckMessage::ReportAvatarResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ReportGameAckMessage_ReportGameResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReportGameAckMessage_ReportGameResult ReportGameAckMessage::gameReportAccepted;
const ReportGameAckMessage_ReportGameResult ReportGameAckMessage::gameReportDuplicate;
const ReportGameAckMessage_ReportGameResult ReportGameAckMessage::gameReportInvalid;
const ReportGameAckMessage_ReportGameResult ReportGameAckMessage::ReportGameResult_MIN;
const ReportGameAckMessage_ReportGameResult ReportGameAckMessage::ReportGameResult_MAX;
const int ReportGameAckMessage::ReportGameResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ErrorMessage_ErrorReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ErrorMessage_ErrorReason ErrorMessage::custReserved;
const ErrorMessage_ErrorReason ErrorMessage::initVersionNotSupported;
const ErrorMessage_ErrorReason ErrorMessage::initServerFull;
const ErrorMessage_ErrorReason ErrorMessage::initAuthFailure;
const ErrorMessage_ErrorReason ErrorMessage::initPlayerNameInUse;
const ErrorMessage_ErrorReason ErrorMessage::initInvalidPlayerName;
const ErrorMessage_ErrorReason ErrorMessage::initServerMaintenance;
const ErrorMessage_ErrorReason ErrorMessage::initBlocked;
const ErrorMessage_ErrorReason ErrorMessage::avatarTooLarge;
const ErrorMessage_ErrorReason ErrorMessage::invalidPacket;
const ErrorMessage_ErrorReason ErrorMessage::invalidState;
const ErrorMessage_ErrorReason ErrorMessage::kickedFromServer;
const ErrorMessage_ErrorReason ErrorMessage::bannedFromServer;
const ErrorMessage_ErrorReason ErrorMessage::blockedByServer;
const ErrorMessage_ErrorReason ErrorMessage::sessionTimeout;
const ErrorMessage_ErrorReason ErrorMessage::ErrorReason_MIN;
const ErrorMessage_ErrorReason ErrorMessage::ErrorReason_MAX;
const int ErrorMessage::ErrorReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool AdminRemoveGameAckMessage_AdminRemoveGameResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AdminRemoveGameAckMessage_AdminRemoveGameResult AdminRemoveGameAckMessage::gameRemoveAccepted;
const AdminRemoveGameAckMessage_AdminRemoveGameResult AdminRemoveGameAckMessage::gameRemoveInvalid;
const AdminRemoveGameAckMessage_AdminRemoveGameResult AdminRemoveGameAckMessage::AdminRemoveGameResult_MIN;
const AdminRemoveGameAckMessage_AdminRemoveGameResult AdminRemoveGameAckMessage::AdminRemoveGameResult_MAX;
const int AdminRemoveGameAckMessage::AdminRemoveGameResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool AdminBanPlayerAckMessage_AdminBanPlayerResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::banPlayerAccepted;
const AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::banPlayerPending;
const AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::banPlayerNoDB;
const AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::banPlayerDBError;
const AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::banPlayerInvalid;
const AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::AdminBanPlayerResult_MIN;
const AdminBanPlayerAckMessage_AdminBanPlayerResult AdminBanPlayerAckMessage::AdminBanPlayerResult_MAX;
const int AdminBanPlayerAckMessage::AdminBanPlayerResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PokerTHMessage_PokerTHMessageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AnnounceMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_InitMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AuthServerChallengeMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AuthClientResponseMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AuthServerVerificationMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_InitAckMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AvatarRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AvatarHeaderMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AvatarDataMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AvatarEndMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_UnknownAvatarMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_PlayerListMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameListNewMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameListUpdateMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameListPlayerJoinedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameListPlayerLeftMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameListAdminChangedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_PlayerInfoRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_PlayerInfoReplyMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_SubscriptionRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_JoinExistingGameMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_JoinNewGameMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_RejoinExistingGameMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_JoinGameAckMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_JoinGameFailedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GamePlayerJoinedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GamePlayerLeftMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameAdminChangedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_RemovedFromGameMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_KickPlayerRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_LeaveGameRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_InvitePlayerToGameMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_InviteNotifyMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_RejectGameInvitationMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_RejectInvNotifyMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_StartEventMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_StartEventAckMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameStartInitialMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameStartRejoinMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_HandStartMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_PlayersTurnMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_MyActionRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_YourActionRejectedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_PlayersActionDoneMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_DealFlopCardsMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_DealTurnCardMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_DealRiverCardMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AllInShowCardsMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_EndOfHandShowCardsMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_EndOfHandHideCardsMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ShowMyCardsRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AfterHandShowCardsMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_EndOfGameMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_PlayerIdChangedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AskKickPlayerMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AskKickDeniedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_StartKickPetitionMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_VoteKickRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_VoteKickReplyMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_KickPetitionUpdateMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_EndKickPetitionMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_StatisticsMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ChatRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ChatMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ChatRejectMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_DialogMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_TimeoutWarningMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ResetTimeoutMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ReportAvatarMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ReportAvatarAckMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ReportGameMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ReportGameAckMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ErrorMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AdminRemoveGameMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AdminRemoveGameAckMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AdminBanPlayerMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AdminBanPlayerAckMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameListSpectatorJoinedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameListSpectatorLeftMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameSpectatorJoinedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameSpectatorLeftMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::PokerTHMessageType_MIN;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::PokerTHMessageType_MAX;
const int PokerTHMessage::PokerTHMessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool NetGameMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool NetGameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

bool NetPlayerAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

bool NetPlayerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool NetPlayerInfoRights_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool NetAvatarType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void NetGameInfo::InitAsDefaultInstance() {
}
class NetGameInfo::HasBitSetters {
 public:
  static void set_has_gamename(NetGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_netgametype(NetGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_maxnumplayers(NetGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_raiseintervalmode(NetGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_raiseeveryhands(NetGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_raiseeveryminutes(NetGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_endraisemode(NetGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_endraisesmallblindvalue(NetGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_proposedguispeed(NetGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_delaybetweenhands(NetGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_playeractiontimeout(NetGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_firstsmallblind(NetGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_startmoney(NetGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_allowspectators(NetGameInfo* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetGameInfo::kGameNameFieldNumber;
const int NetGameInfo::kNetGameTypeFieldNumber;
const int NetGameInfo::kMaxNumPlayersFieldNumber;
const int NetGameInfo::kRaiseIntervalModeFieldNumber;
const int NetGameInfo::kRaiseEveryHandsFieldNumber;
const int NetGameInfo::kRaiseEveryMinutesFieldNumber;
const int NetGameInfo::kEndRaiseModeFieldNumber;
const int NetGameInfo::kEndRaiseSmallBlindValueFieldNumber;
const int NetGameInfo::kProposedGuiSpeedFieldNumber;
const int NetGameInfo::kDelayBetweenHandsFieldNumber;
const int NetGameInfo::kPlayerActionTimeoutFieldNumber;
const int NetGameInfo::kFirstSmallBlindFieldNumber;
const int NetGameInfo::kStartMoneyFieldNumber;
const int NetGameInfo::kManualBlindsFieldNumber;
const int NetGameInfo::kAllowSpectatorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetGameInfo::NetGameInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetGameInfo)
}
NetGameInfo::NetGameInfo(const NetGameInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      manualblinds_(from.manualblinds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gamename()) {
    gamename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamename_);
  }
  ::memcpy(&maxnumplayers_, &from.maxnumplayers_,
    static_cast<size_t>(reinterpret_cast<char*>(&allowspectators_) -
    reinterpret_cast<char*>(&maxnumplayers_)) + sizeof(allowspectators_));
  // @@protoc_insertion_point(copy_constructor:NetGameInfo)
}

void NetGameInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NetGameInfo_pokerth_2eproto.base);
  gamename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxnumplayers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startmoney_) -
      reinterpret_cast<char*>(&maxnumplayers_)) + sizeof(startmoney_));
  netgametype_ = 1;
  raiseintervalmode_ = 1;
  endraisemode_ = 1;
  allowspectators_ = true;
}

NetGameInfo::~NetGameInfo() {
  // @@protoc_insertion_point(destructor:NetGameInfo)
  SharedDtor();
}

void NetGameInfo::SharedDtor() {
  gamename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetGameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetGameInfo& NetGameInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NetGameInfo_pokerth_2eproto.base);
  return *internal_default_instance();
}


void NetGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NetGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manualblinds_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    gamename_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&maxnumplayers_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playeractiontimeout_) -
        reinterpret_cast<char*>(&maxnumplayers_)) + sizeof(playeractiontimeout_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&firstsmallblind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&startmoney_) -
        reinterpret_cast<char*>(&firstsmallblind_)) + sizeof(startmoney_));
    netgametype_ = 1;
    raiseintervalmode_ = 1;
    endraisemode_ = 1;
    allowspectators_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetGameInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NetGameInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required string gameName = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_gamename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // required .NetGameInfo.NetGameType netGameType = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::NetGameInfo_NetGameType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_netgametype(static_cast<::NetGameInfo_NetGameType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 maxNumPlayers = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_maxnumplayers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .NetGameInfo.RaiseIntervalMode raiseIntervalMode = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::NetGameInfo_RaiseIntervalMode_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_raiseintervalmode(static_cast<::NetGameInfo_RaiseIntervalMode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 raiseEveryHands = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_raiseeveryhands(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 raiseEveryMinutes = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_raiseeveryminutes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .NetGameInfo.EndRaiseMode endRaiseMode = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::NetGameInfo_EndRaiseMode_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(7, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_endraisemode(static_cast<::NetGameInfo_EndRaiseMode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 endRaiseSmallBlindValue = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_endraisesmallblindvalue(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 proposedGuiSpeed = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_proposedguispeed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 delayBetweenHands = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_delaybetweenhands(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerActionTimeout = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_playeractiontimeout(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 firstSmallBlind = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_firstsmallblind(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 startMoney = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_startmoney(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 manualBlinds = 14 [packed = true];
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) == 114) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_manualblinds();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        do {
          msg->add_manualblinds(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 112 && (ptr += 1));
        break;
      }
      // optional bool allowSpectators = 15 [default = true];
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_allowspectators(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:NetGameInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gameName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamename()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NetGameInfo.NetGameType netGameType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetGameInfo_NetGameType_IsValid(value)) {
            set_netgametype(static_cast< ::NetGameInfo_NetGameType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 maxNumPlayers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_maxnumplayers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxnumplayers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NetGameInfo.RaiseIntervalMode raiseIntervalMode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetGameInfo_RaiseIntervalMode_IsValid(value)) {
            set_raiseintervalmode(static_cast< ::NetGameInfo_RaiseIntervalMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raiseEveryHands = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_raiseeveryhands(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raiseeveryhands_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raiseEveryMinutes = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_raiseeveryminutes(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raiseeveryminutes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NetGameInfo.EndRaiseMode endRaiseMode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetGameInfo_EndRaiseMode_IsValid(value)) {
            set_endraisemode(static_cast< ::NetGameInfo_EndRaiseMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(56u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 endRaiseSmallBlindValue = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_endraisesmallblindvalue(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endraisesmallblindvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 proposedGuiSpeed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_proposedguispeed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proposedguispeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 delayBetweenHands = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_delaybetweenhands(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delaybetweenhands_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerActionTimeout = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_playeractiontimeout(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playeractiontimeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 firstSmallBlind = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_firstsmallblind(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firstsmallblind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 startMoney = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_startmoney(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startmoney_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 manualBlinds = 14 [packed = true];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_manualblinds())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 114u, input, this->mutable_manualblinds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allowSpectators = 15 [default = true];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_allowspectators(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowspectators_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetGameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetGameInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string gameName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamename(), output);
  }

  // required .NetGameInfo.NetGameType netGameType = 2;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->netgametype(), output);
  }

  // required uint32 maxNumPlayers = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxnumplayers(), output);
  }

  // required .NetGameInfo.RaiseIntervalMode raiseIntervalMode = 4;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->raiseintervalmode(), output);
  }

  // optional uint32 raiseEveryHands = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->raiseeveryhands(), output);
  }

  // optional uint32 raiseEveryMinutes = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->raiseeveryminutes(), output);
  }

  // required .NetGameInfo.EndRaiseMode endRaiseMode = 7;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->endraisemode(), output);
  }

  // optional uint32 endRaiseSmallBlindValue = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->endraisesmallblindvalue(), output);
  }

  // required uint32 proposedGuiSpeed = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->proposedguispeed(), output);
  }

  // required uint32 delayBetweenHands = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->delaybetweenhands(), output);
  }

  // required uint32 playerActionTimeout = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->playeractiontimeout(), output);
  }

  // required uint32 firstSmallBlind = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->firstsmallblind(), output);
  }

  // required uint32 startMoney = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->startmoney(), output);
  }

  // repeated uint32 manualBlinds = 14 [packed = true];
  if (this->manualblinds_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_manualblinds_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->manualblinds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->manualblinds(i), output);
  }

  // optional bool allowSpectators = 15 [default = true];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->allowspectators(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:NetGameInfo)
}

size_t NetGameInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NetGameInfo)
  size_t total_size = 0;

  if (has_gamename()) {
    // required string gameName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamename());
  }

  if (has_maxnumplayers()) {
    // required uint32 maxNumPlayers = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxnumplayers());
  }

  if (has_proposedguispeed()) {
    // required uint32 proposedGuiSpeed = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->proposedguispeed());
  }

  if (has_delaybetweenhands()) {
    // required uint32 delayBetweenHands = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->delaybetweenhands());
  }

  if (has_playeractiontimeout()) {
    // required uint32 playerActionTimeout = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playeractiontimeout());
  }

  if (has_firstsmallblind()) {
    // required uint32 firstSmallBlind = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->firstsmallblind());
  }

  if (has_startmoney()) {
    // required uint32 startMoney = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startmoney());
  }

  if (has_netgametype()) {
    // required .NetGameInfo.NetGameType netGameType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->netgametype());
  }

  if (has_raiseintervalmode()) {
    // required .NetGameInfo.RaiseIntervalMode raiseIntervalMode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->raiseintervalmode());
  }

  if (has_endraisemode()) {
    // required .NetGameInfo.EndRaiseMode endRaiseMode = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->endraisemode());
  }

  return total_size;
}
size_t NetGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetGameInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00001fe3) ^ 0x00001fe3) == 0) {  // All required fields are present.
    // required string gameName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamename());

    // required uint32 maxNumPlayers = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxnumplayers());

    // required uint32 proposedGuiSpeed = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->proposedguispeed());

    // required uint32 delayBetweenHands = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->delaybetweenhands());

    // required uint32 playerActionTimeout = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playeractiontimeout());

    // required uint32 firstSmallBlind = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->firstsmallblind());

    // required uint32 startMoney = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startmoney());

    // required .NetGameInfo.NetGameType netGameType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->netgametype());

    // required .NetGameInfo.RaiseIntervalMode raiseIntervalMode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->raiseintervalmode());

    // required .NetGameInfo.EndRaiseMode endRaiseMode = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->endraisemode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 manualBlinds = 14 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->manualblinds_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _manualblinds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional uint32 raiseEveryHands = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raiseeveryhands());
    }

    // optional uint32 raiseEveryMinutes = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raiseeveryminutes());
    }

    // optional uint32 endRaiseSmallBlindValue = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endraisesmallblindvalue());
    }

  }
  // optional bool allowSpectators = 15 [default = true];
  if (cached_has_bits & 0x00002000u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetGameInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetGameInfo*>(&from));
}

void NetGameInfo::MergeFrom(const NetGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  manualblinds_.MergeFrom(from.manualblinds_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      gamename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamename_);
    }
    if (cached_has_bits & 0x00000002u) {
      maxnumplayers_ = from.maxnumplayers_;
    }
    if (cached_has_bits & 0x00000004u) {
      raiseeveryhands_ = from.raiseeveryhands_;
    }
    if (cached_has_bits & 0x00000008u) {
      raiseeveryminutes_ = from.raiseeveryminutes_;
    }
    if (cached_has_bits & 0x00000010u) {
      endraisesmallblindvalue_ = from.endraisesmallblindvalue_;
    }
    if (cached_has_bits & 0x00000020u) {
      proposedguispeed_ = from.proposedguispeed_;
    }
    if (cached_has_bits & 0x00000040u) {
      delaybetweenhands_ = from.delaybetweenhands_;
    }
    if (cached_has_bits & 0x00000080u) {
      playeractiontimeout_ = from.playeractiontimeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      firstsmallblind_ = from.firstsmallblind_;
    }
    if (cached_has_bits & 0x00000200u) {
      startmoney_ = from.startmoney_;
    }
    if (cached_has_bits & 0x00000400u) {
      netgametype_ = from.netgametype_;
    }
    if (cached_has_bits & 0x00000800u) {
      raiseintervalmode_ = from.raiseintervalmode_;
    }
    if (cached_has_bits & 0x00001000u) {
      endraisemode_ = from.endraisemode_;
    }
    if (cached_has_bits & 0x00002000u) {
      allowspectators_ = from.allowspectators_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetGameInfo::CopyFrom(const NetGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetGameInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fe3) != 0x00001fe3) return false;
  return true;
}

void NetGameInfo::Swap(NetGameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetGameInfo::InternalSwap(NetGameInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  manualblinds_.InternalSwap(&other->manualblinds_);
  gamename_.Swap(&other->gamename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(maxnumplayers_, other->maxnumplayers_);
  swap(raiseeveryhands_, other->raiseeveryhands_);
  swap(raiseeveryminutes_, other->raiseeveryminutes_);
  swap(endraisesmallblindvalue_, other->endraisesmallblindvalue_);
  swap(proposedguispeed_, other->proposedguispeed_);
  swap(delaybetweenhands_, other->delaybetweenhands_);
  swap(playeractiontimeout_, other->playeractiontimeout_);
  swap(firstsmallblind_, other->firstsmallblind_);
  swap(startmoney_, other->startmoney_);
  swap(netgametype_, other->netgametype_);
  swap(raiseintervalmode_, other->raiseintervalmode_);
  swap(endraisemode_, other->endraisemode_);
  swap(allowspectators_, other->allowspectators_);
}

::std::string NetGameInfo::GetTypeName() const {
  return "NetGameInfo";
}


// ===================================================================

void PlayerResult::InitAsDefaultInstance() {
}
class PlayerResult::HasBitSetters {
 public:
  static void set_has_playerid(PlayerResult* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_resultcard1(PlayerResult* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_resultcard2(PlayerResult* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_moneywon(PlayerResult* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_playermoney(PlayerResult* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_cardsvalue(PlayerResult* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerResult::kPlayerIdFieldNumber;
const int PlayerResult::kResultCard1FieldNumber;
const int PlayerResult::kResultCard2FieldNumber;
const int PlayerResult::kBestHandPositionFieldNumber;
const int PlayerResult::kMoneyWonFieldNumber;
const int PlayerResult::kPlayerMoneyFieldNumber;
const int PlayerResult::kCardsValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerResult::PlayerResult()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerResult)
}
PlayerResult::PlayerResult(const PlayerResult& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      besthandposition_(from.besthandposition_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cardsvalue_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(cardsvalue_));
  // @@protoc_insertion_point(copy_constructor:PlayerResult)
}

void PlayerResult::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cardsvalue_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(cardsvalue_));
}

PlayerResult::~PlayerResult() {
  // @@protoc_insertion_point(destructor:PlayerResult)
  SharedDtor();
}

void PlayerResult::SharedDtor() {
}

void PlayerResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerResult& PlayerResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerResult_pokerth_2eproto.base);
  return *internal_default_instance();
}


void PlayerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  besthandposition_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cardsvalue_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(cardsvalue_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 resultCard1 = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_resultcard1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 resultCard2 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_resultcard2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 bestHandPosition = 4 [packed = true];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 34) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_besthandposition();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        do {
          msg->add_besthandposition(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
        break;
      }
      // required uint32 moneyWon = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_moneywon(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerMoney = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_playermoney(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 cardsValue = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_cardsvalue(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PlayerResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 resultCard1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_resultcard1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultcard1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 resultCard2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_resultcard2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultcard2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 bestHandPosition = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_besthandposition())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_besthandposition())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 moneyWon = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_moneywon(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneywon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerMoney = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_playermoney(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playermoney_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cardsValue = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_cardsvalue(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardsvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 resultCard1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resultcard1(), output);
  }

  // required uint32 resultCard2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->resultcard2(), output);
  }

  // repeated uint32 bestHandPosition = 4 [packed = true];
  if (this->besthandposition_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_besthandposition_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->besthandposition_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->besthandposition(i), output);
  }

  // required uint32 moneyWon = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->moneywon(), output);
  }

  // required uint32 playerMoney = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->playermoney(), output);
  }

  // optional uint32 cardsValue = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cardsvalue(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PlayerResult)
}

size_t PlayerResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerResult)
  size_t total_size = 0;

  if (has_playerid()) {
    // required uint32 playerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_resultcard1()) {
    // required uint32 resultCard1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resultcard1());
  }

  if (has_resultcard2()) {
    // required uint32 resultCard2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resultcard2());
  }

  if (has_moneywon()) {
    // required uint32 moneyWon = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->moneywon());
  }

  if (has_playermoney()) {
    // required uint32 playerMoney = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playermoney());
  }

  return total_size;
}
size_t PlayerResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerResult)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required uint32 resultCard1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resultcard1());

    // required uint32 resultCard2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resultcard2());

    // required uint32 moneyWon = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->moneywon());

    // required uint32 playerMoney = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playermoney());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 bestHandPosition = 4 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->besthandposition_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _besthandposition_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint32 cardsValue = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cardsvalue());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerResult*>(&from));
}

void PlayerResult::MergeFrom(const PlayerResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  besthandposition_.MergeFrom(from.besthandposition_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      resultcard1_ = from.resultcard1_;
    }
    if (cached_has_bits & 0x00000004u) {
      resultcard2_ = from.resultcard2_;
    }
    if (cached_has_bits & 0x00000008u) {
      moneywon_ = from.moneywon_;
    }
    if (cached_has_bits & 0x00000010u) {
      playermoney_ = from.playermoney_;
    }
    if (cached_has_bits & 0x00000020u) {
      cardsvalue_ = from.cardsvalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerResult::CopyFrom(const PlayerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void PlayerResult::Swap(PlayerResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerResult::InternalSwap(PlayerResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  besthandposition_.InternalSwap(&other->besthandposition_);
  swap(playerid_, other->playerid_);
  swap(resultcard1_, other->resultcard1_);
  swap(resultcard2_, other->resultcard2_);
  swap(moneywon_, other->moneywon_);
  swap(playermoney_, other->playermoney_);
  swap(cardsvalue_, other->cardsvalue_);
}

::std::string PlayerResult::GetTypeName() const {
  return "PlayerResult";
}


// ===================================================================

void AnnounceMessage_Version::InitAsDefaultInstance() {
}
class AnnounceMessage_Version::HasBitSetters {
 public:
  static void set_has_majorversion(AnnounceMessage_Version* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_minorversion(AnnounceMessage_Version* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnounceMessage_Version::kMajorVersionFieldNumber;
const int AnnounceMessage_Version::kMinorVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnounceMessage_Version::AnnounceMessage_Version()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AnnounceMessage.Version)
}
AnnounceMessage_Version::AnnounceMessage_Version(const AnnounceMessage_Version& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&majorversion_, &from.majorversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&minorversion_) -
    reinterpret_cast<char*>(&majorversion_)) + sizeof(minorversion_));
  // @@protoc_insertion_point(copy_constructor:AnnounceMessage.Version)
}

void AnnounceMessage_Version::SharedCtor() {
  ::memset(&majorversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minorversion_) -
      reinterpret_cast<char*>(&majorversion_)) + sizeof(minorversion_));
}

AnnounceMessage_Version::~AnnounceMessage_Version() {
  // @@protoc_insertion_point(destructor:AnnounceMessage.Version)
  SharedDtor();
}

void AnnounceMessage_Version::SharedDtor() {
}

void AnnounceMessage_Version::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnnounceMessage_Version& AnnounceMessage_Version::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AnnounceMessage_Version_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AnnounceMessage_Version::Clear() {
// @@protoc_insertion_point(message_clear_start:AnnounceMessage.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&majorversion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minorversion_) -
        reinterpret_cast<char*>(&majorversion_)) + sizeof(minorversion_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnnounceMessage_Version::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AnnounceMessage_Version*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 majorVersion = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_majorversion(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 minorVersion = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_minorversion(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnnounceMessage_Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:AnnounceMessage.Version)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 majorVersion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_majorversion(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &majorversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 minorVersion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_minorversion(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minorversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AnnounceMessage.Version)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AnnounceMessage.Version)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnnounceMessage_Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AnnounceMessage.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 majorVersion = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->majorversion(), output);
  }

  // required uint32 minorVersion = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minorversion(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AnnounceMessage.Version)
}

size_t AnnounceMessage_Version::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AnnounceMessage.Version)
  size_t total_size = 0;

  if (has_majorversion()) {
    // required uint32 majorVersion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->majorversion());
  }

  if (has_minorversion()) {
    // required uint32 minorVersion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minorversion());
  }

  return total_size;
}
size_t AnnounceMessage_Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AnnounceMessage.Version)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 majorVersion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->majorversion());

    // required uint32 minorVersion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minorversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnnounceMessage_Version::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AnnounceMessage_Version*>(&from));
}

void AnnounceMessage_Version::MergeFrom(const AnnounceMessage_Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AnnounceMessage.Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      majorversion_ = from.majorversion_;
    }
    if (cached_has_bits & 0x00000002u) {
      minorversion_ = from.minorversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AnnounceMessage_Version::CopyFrom(const AnnounceMessage_Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AnnounceMessage.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnounceMessage_Version::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AnnounceMessage_Version::Swap(AnnounceMessage_Version* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnnounceMessage_Version::InternalSwap(AnnounceMessage_Version* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(majorversion_, other->majorversion_);
  swap(minorversion_, other->minorversion_);
}

::std::string AnnounceMessage_Version::GetTypeName() const {
  return "AnnounceMessage.Version";
}


// ===================================================================

void AnnounceMessage::InitAsDefaultInstance() {
  ::_AnnounceMessage_default_instance_._instance.get_mutable()->protocolversion_ = const_cast< ::AnnounceMessage_Version*>(
      ::AnnounceMessage_Version::internal_default_instance());
  ::_AnnounceMessage_default_instance_._instance.get_mutable()->latestgameversion_ = const_cast< ::AnnounceMessage_Version*>(
      ::AnnounceMessage_Version::internal_default_instance());
}
class AnnounceMessage::HasBitSetters {
 public:
  static const ::AnnounceMessage_Version& protocolversion(const AnnounceMessage* msg);
  static void set_has_protocolversion(AnnounceMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::AnnounceMessage_Version& latestgameversion(const AnnounceMessage* msg);
  static void set_has_latestgameversion(AnnounceMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_latestbetarevision(AnnounceMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_servertype(AnnounceMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_numplayersonserver(AnnounceMessage* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

const ::AnnounceMessage_Version&
AnnounceMessage::HasBitSetters::protocolversion(const AnnounceMessage* msg) {
  return *msg->protocolversion_;
}
const ::AnnounceMessage_Version&
AnnounceMessage::HasBitSetters::latestgameversion(const AnnounceMessage* msg) {
  return *msg->latestgameversion_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnnounceMessage::kProtocolVersionFieldNumber;
const int AnnounceMessage::kLatestGameVersionFieldNumber;
const int AnnounceMessage::kLatestBetaRevisionFieldNumber;
const int AnnounceMessage::kServerTypeFieldNumber;
const int AnnounceMessage::kNumPlayersOnServerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnnounceMessage::AnnounceMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AnnounceMessage)
}
AnnounceMessage::AnnounceMessage(const AnnounceMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_protocolversion()) {
    protocolversion_ = new ::AnnounceMessage_Version(*from.protocolversion_);
  } else {
    protocolversion_ = nullptr;
  }
  if (from.has_latestgameversion()) {
    latestgameversion_ = new ::AnnounceMessage_Version(*from.latestgameversion_);
  } else {
    latestgameversion_ = nullptr;
  }
  ::memcpy(&latestbetarevision_, &from.latestbetarevision_,
    static_cast<size_t>(reinterpret_cast<char*>(&numplayersonserver_) -
    reinterpret_cast<char*>(&latestbetarevision_)) + sizeof(numplayersonserver_));
  // @@protoc_insertion_point(copy_constructor:AnnounceMessage)
}

void AnnounceMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AnnounceMessage_pokerth_2eproto.base);
  ::memset(&protocolversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numplayersonserver_) -
      reinterpret_cast<char*>(&protocolversion_)) + sizeof(numplayersonserver_));
}

AnnounceMessage::~AnnounceMessage() {
  // @@protoc_insertion_point(destructor:AnnounceMessage)
  SharedDtor();
}

void AnnounceMessage::SharedDtor() {
  if (this != internal_default_instance()) delete protocolversion_;
  if (this != internal_default_instance()) delete latestgameversion_;
}

void AnnounceMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnnounceMessage& AnnounceMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AnnounceMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AnnounceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AnnounceMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(protocolversion_ != nullptr);
      protocolversion_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(latestgameversion_ != nullptr);
      latestgameversion_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&latestbetarevision_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numplayersonserver_) -
        reinterpret_cast<char*>(&latestbetarevision_)) + sizeof(numplayersonserver_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnnounceMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AnnounceMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .AnnounceMessage.Version protocolVersion = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::AnnounceMessage_Version::_InternalParse;
        object = msg->mutable_protocolversion();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // required .AnnounceMessage.Version latestGameVersion = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::AnnounceMessage_Version::_InternalParse;
        object = msg->mutable_latestgameversion();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // required uint32 latestBetaRevision = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_latestbetarevision(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .AnnounceMessage.ServerType serverType = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::AnnounceMessage_ServerType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_servertype(static_cast<::AnnounceMessage_ServerType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 numPlayersOnServer = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_numplayersonserver(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnnounceMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:AnnounceMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AnnounceMessage.Version protocolVersion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_protocolversion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .AnnounceMessage.Version latestGameVersion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_latestgameversion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 latestBetaRevision = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_latestbetarevision(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latestbetarevision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .AnnounceMessage.ServerType serverType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AnnounceMessage_ServerType_IsValid(value)) {
            set_servertype(static_cast< ::AnnounceMessage_ServerType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 numPlayersOnServer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_numplayersonserver(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numplayersonserver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AnnounceMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AnnounceMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnnounceMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AnnounceMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .AnnounceMessage.Version protocolVersion = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, HasBitSetters::protocolversion(this), output);
  }

  // required .AnnounceMessage.Version latestGameVersion = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, HasBitSetters::latestgameversion(this), output);
  }

  // required uint32 latestBetaRevision = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->latestbetarevision(), output);
  }

  // required .AnnounceMessage.ServerType serverType = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->servertype(), output);
  }

  // required uint32 numPlayersOnServer = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->numplayersonserver(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AnnounceMessage)
}

size_t AnnounceMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AnnounceMessage)
  size_t total_size = 0;

  if (has_protocolversion()) {
    // required .AnnounceMessage.Version protocolVersion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *protocolversion_);
  }

  if (has_latestgameversion()) {
    // required .AnnounceMessage.Version latestGameVersion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *latestgameversion_);
  }

  if (has_latestbetarevision()) {
    // required uint32 latestBetaRevision = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latestbetarevision());
  }

  if (has_servertype()) {
    // required .AnnounceMessage.ServerType serverType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->servertype());
  }

  if (has_numplayersonserver()) {
    // required uint32 numPlayersOnServer = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numplayersonserver());
  }

  return total_size;
}
size_t AnnounceMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AnnounceMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .AnnounceMessage.Version protocolVersion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *protocolversion_);

    // required .AnnounceMessage.Version latestGameVersion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *latestgameversion_);

    // required uint32 latestBetaRevision = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->latestbetarevision());

    // required .AnnounceMessage.ServerType serverType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->servertype());

    // required uint32 numPlayersOnServer = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numplayersonserver());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnnounceMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AnnounceMessage*>(&from));
}

void AnnounceMessage::MergeFrom(const AnnounceMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AnnounceMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_protocolversion()->::AnnounceMessage_Version::MergeFrom(from.protocolversion());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_latestgameversion()->::AnnounceMessage_Version::MergeFrom(from.latestgameversion());
    }
    if (cached_has_bits & 0x00000004u) {
      latestbetarevision_ = from.latestbetarevision_;
    }
    if (cached_has_bits & 0x00000008u) {
      servertype_ = from.servertype_;
    }
    if (cached_has_bits & 0x00000010u) {
      numplayersonserver_ = from.numplayersonserver_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AnnounceMessage::CopyFrom(const AnnounceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AnnounceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnounceMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_protocolversion()) {
    if (!this->protocolversion_->IsInitialized()) return false;
  }
  if (has_latestgameversion()) {
    if (!this->latestgameversion_->IsInitialized()) return false;
  }
  return true;
}

void AnnounceMessage::Swap(AnnounceMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnnounceMessage::InternalSwap(AnnounceMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(protocolversion_, other->protocolversion_);
  swap(latestgameversion_, other->latestgameversion_);
  swap(latestbetarevision_, other->latestbetarevision_);
  swap(servertype_, other->servertype_);
  swap(numplayersonserver_, other->numplayersonserver_);
}

::std::string AnnounceMessage::GetTypeName() const {
  return "AnnounceMessage";
}


// ===================================================================

void InitMessage::InitAsDefaultInstance() {
  ::_InitMessage_default_instance_._instance.get_mutable()->requestedversion_ = const_cast< ::AnnounceMessage_Version*>(
      ::AnnounceMessage_Version::internal_default_instance());
}
class InitMessage::HasBitSetters {
 public:
  static const ::AnnounceMessage_Version& requestedversion(const InitMessage* msg);
  static void set_has_requestedversion(InitMessage* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_buildid(InitMessage* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_mylastsessionid(InitMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_authserverpassword(InitMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_login(InitMessage* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_nickname(InitMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_clientuserdata(InitMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_avatarhash(InitMessage* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

const ::AnnounceMessage_Version&
InitMessage::HasBitSetters::requestedversion(const InitMessage* msg) {
  return *msg->requestedversion_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitMessage::kRequestedVersionFieldNumber;
const int InitMessage::kBuildIdFieldNumber;
const int InitMessage::kMyLastSessionIdFieldNumber;
const int InitMessage::kAuthServerPasswordFieldNumber;
const int InitMessage::kLoginFieldNumber;
const int InitMessage::kNickNameFieldNumber;
const int InitMessage::kClientUserDataFieldNumber;
const int InitMessage::kAvatarHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitMessage::InitMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitMessage)
}
InitMessage::InitMessage(const InitMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mylastsessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mylastsessionid()) {
    mylastsessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mylastsessionid_);
  }
  authserverpassword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_authserverpassword()) {
    authserverpassword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authserverpassword_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nickname()) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  clientuserdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientuserdata()) {
    clientuserdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientuserdata_);
  }
  avatarhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_avatarhash()) {
    avatarhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatarhash_);
  }
  if (from.has_requestedversion()) {
    requestedversion_ = new ::AnnounceMessage_Version(*from.requestedversion_);
  } else {
    requestedversion_ = nullptr;
  }
  ::memcpy(&buildid_, &from.buildid_,
    static_cast<size_t>(reinterpret_cast<char*>(&login_) -
    reinterpret_cast<char*>(&buildid_)) + sizeof(login_));
  // @@protoc_insertion_point(copy_constructor:InitMessage)
}

void InitMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InitMessage_pokerth_2eproto.base);
  mylastsessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authserverpassword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientuserdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatarhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestedversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&login_) -
      reinterpret_cast<char*>(&requestedversion_)) + sizeof(login_));
}

InitMessage::~InitMessage() {
  // @@protoc_insertion_point(destructor:InitMessage)
  SharedDtor();
}

void InitMessage::SharedDtor() {
  mylastsessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authserverpassword_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientuserdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatarhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete requestedversion_;
}

void InitMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitMessage& InitMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InitMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void InitMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:InitMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mylastsessionid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      authserverpassword_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      nickname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      clientuserdata_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      avatarhash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(requestedversion_ != nullptr);
      requestedversion_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&buildid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&login_) -
        reinterpret_cast<char*>(&buildid_)) + sizeof(login_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InitMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InitMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .AnnounceMessage.Version requestedVersion = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::AnnounceMessage_Version::_InternalParse;
        object = msg->mutable_requestedversion();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // required uint32 buildId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_buildid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes myLastSessionId = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_mylastsessionid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string authServerPassword = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_authserverpassword();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // required .InitMessage.LoginType login = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::InitMessage_LoginType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(5, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_login(static_cast<::InitMessage_LoginType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string nickName = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_nickname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes clientUserData = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_clientuserdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes avatarHash = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_avatarhash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InitMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:InitMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AnnounceMessage.Version requestedVersion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_requestedversion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 buildId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_buildid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes myLastSessionId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mylastsessionid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string authServerPassword = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authserverpassword()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .InitMessage.LoginType login = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::InitMessage_LoginType_IsValid(value)) {
            set_login(static_cast< ::InitMessage_LoginType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nickName = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes clientUserData = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clientuserdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes avatarHash = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatarhash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InitMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .AnnounceMessage.Version requestedVersion = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, HasBitSetters::requestedversion(this), output);
  }

  // required uint32 buildId = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buildid(), output);
  }

  // optional bytes myLastSessionId = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mylastsessionid(), output);
  }

  // optional string authServerPassword = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->authserverpassword(), output);
  }

  // required .InitMessage.LoginType login = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->login(), output);
  }

  // optional string nickName = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->nickname(), output);
  }

  // optional bytes clientUserData = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->clientuserdata(), output);
  }

  // optional bytes avatarHash = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->avatarhash(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:InitMessage)
}

size_t InitMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:InitMessage)
  size_t total_size = 0;

  if (has_requestedversion()) {
    // required .AnnounceMessage.Version requestedVersion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *requestedversion_);
  }

  if (has_buildid()) {
    // required uint32 buildId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buildid());
  }

  if (has_login()) {
    // required .InitMessage.LoginType login = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->login());
  }

  return total_size;
}
size_t InitMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x000000e0) ^ 0x000000e0) == 0) {  // All required fields are present.
    // required .AnnounceMessage.Version requestedVersion = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *requestedversion_);

    // required uint32 buildId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buildid());

    // required .InitMessage.LoginType login = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->login());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes myLastSessionId = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mylastsessionid());
    }

    // optional string authServerPassword = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authserverpassword());
    }

    // optional string nickName = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional bytes clientUserData = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->clientuserdata());
    }

    // optional bytes avatarHash = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatarhash());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InitMessage*>(&from));
}

void InitMessage::MergeFrom(const InitMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      mylastsessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mylastsessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      authserverpassword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authserverpassword_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      clientuserdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientuserdata_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      avatarhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatarhash_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_requestedversion()->::AnnounceMessage_Version::MergeFrom(from.requestedversion());
    }
    if (cached_has_bits & 0x00000040u) {
      buildid_ = from.buildid_;
    }
    if (cached_has_bits & 0x00000080u) {
      login_ = from.login_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InitMessage::CopyFrom(const InitMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000e0) != 0x000000e0) return false;
  if (has_requestedversion()) {
    if (!this->requestedversion_->IsInitialized()) return false;
  }
  return true;
}

void InitMessage::Swap(InitMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitMessage::InternalSwap(InitMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mylastsessionid_.Swap(&other->mylastsessionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  authserverpassword_.Swap(&other->authserverpassword_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nickname_.Swap(&other->nickname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clientuserdata_.Swap(&other->clientuserdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatarhash_.Swap(&other->avatarhash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestedversion_, other->requestedversion_);
  swap(buildid_, other->buildid_);
  swap(login_, other->login_);
}

::std::string InitMessage::GetTypeName() const {
  return "InitMessage";
}


// ===================================================================

void AuthServerChallengeMessage::InitAsDefaultInstance() {
}
class AuthServerChallengeMessage::HasBitSetters {
 public:
  static void set_has_serverchallenge(AuthServerChallengeMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthServerChallengeMessage::kServerChallengeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthServerChallengeMessage::AuthServerChallengeMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuthServerChallengeMessage)
}
AuthServerChallengeMessage::AuthServerChallengeMessage(const AuthServerChallengeMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serverchallenge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serverchallenge()) {
    serverchallenge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverchallenge_);
  }
  // @@protoc_insertion_point(copy_constructor:AuthServerChallengeMessage)
}

void AuthServerChallengeMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AuthServerChallengeMessage_pokerth_2eproto.base);
  serverchallenge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AuthServerChallengeMessage::~AuthServerChallengeMessage() {
  // @@protoc_insertion_point(destructor:AuthServerChallengeMessage)
  SharedDtor();
}

void AuthServerChallengeMessage::SharedDtor() {
  serverchallenge_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthServerChallengeMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthServerChallengeMessage& AuthServerChallengeMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AuthServerChallengeMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AuthServerChallengeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthServerChallengeMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    serverchallenge_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AuthServerChallengeMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AuthServerChallengeMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required bytes serverChallenge = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_serverchallenge();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AuthServerChallengeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:AuthServerChallengeMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes serverChallenge = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serverchallenge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuthServerChallengeMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuthServerChallengeMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AuthServerChallengeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuthServerChallengeMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes serverChallenge = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->serverchallenge(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AuthServerChallengeMessage)
}

size_t AuthServerChallengeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AuthServerChallengeMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required bytes serverChallenge = 1;
  if (has_serverchallenge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->serverchallenge());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthServerChallengeMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthServerChallengeMessage*>(&from));
}

void AuthServerChallengeMessage::MergeFrom(const AuthServerChallengeMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AuthServerChallengeMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_serverchallenge()) {
    _has_bits_[0] |= 0x00000001u;
    serverchallenge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverchallenge_);
  }
}

void AuthServerChallengeMessage::CopyFrom(const AuthServerChallengeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthServerChallengeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthServerChallengeMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AuthServerChallengeMessage::Swap(AuthServerChallengeMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthServerChallengeMessage::InternalSwap(AuthServerChallengeMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serverchallenge_.Swap(&other->serverchallenge_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string AuthServerChallengeMessage::GetTypeName() const {
  return "AuthServerChallengeMessage";
}


// ===================================================================

void AuthClientResponseMessage::InitAsDefaultInstance() {
}
class AuthClientResponseMessage::HasBitSetters {
 public:
  static void set_has_clientresponse(AuthClientResponseMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthClientResponseMessage::kClientResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthClientResponseMessage::AuthClientResponseMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuthClientResponseMessage)
}
AuthClientResponseMessage::AuthClientResponseMessage(const AuthClientResponseMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientresponse_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientresponse()) {
    clientresponse_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientresponse_);
  }
  // @@protoc_insertion_point(copy_constructor:AuthClientResponseMessage)
}

void AuthClientResponseMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AuthClientResponseMessage_pokerth_2eproto.base);
  clientresponse_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AuthClientResponseMessage::~AuthClientResponseMessage() {
  // @@protoc_insertion_point(destructor:AuthClientResponseMessage)
  SharedDtor();
}

void AuthClientResponseMessage::SharedDtor() {
  clientresponse_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthClientResponseMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthClientResponseMessage& AuthClientResponseMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AuthClientResponseMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AuthClientResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthClientResponseMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    clientresponse_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AuthClientResponseMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AuthClientResponseMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required bytes clientResponse = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_clientresponse();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AuthClientResponseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:AuthClientResponseMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes clientResponse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clientresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuthClientResponseMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuthClientResponseMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AuthClientResponseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuthClientResponseMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes clientResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->clientresponse(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AuthClientResponseMessage)
}

size_t AuthClientResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AuthClientResponseMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required bytes clientResponse = 1;
  if (has_clientresponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->clientresponse());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthClientResponseMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthClientResponseMessage*>(&from));
}

void AuthClientResponseMessage::MergeFrom(const AuthClientResponseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AuthClientResponseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_clientresponse()) {
    _has_bits_[0] |= 0x00000001u;
    clientresponse_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientresponse_);
  }
}

void AuthClientResponseMessage::CopyFrom(const AuthClientResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthClientResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthClientResponseMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AuthClientResponseMessage::Swap(AuthClientResponseMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthClientResponseMessage::InternalSwap(AuthClientResponseMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clientresponse_.Swap(&other->clientresponse_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string AuthClientResponseMessage::GetTypeName() const {
  return "AuthClientResponseMessage";
}


// ===================================================================

void AuthServerVerificationMessage::InitAsDefaultInstance() {
}
class AuthServerVerificationMessage::HasBitSetters {
 public:
  static void set_has_serververification(AuthServerVerificationMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthServerVerificationMessage::kServerVerificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthServerVerificationMessage::AuthServerVerificationMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuthServerVerificationMessage)
}
AuthServerVerificationMessage::AuthServerVerificationMessage(const AuthServerVerificationMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serververification_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serververification()) {
    serververification_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serververification_);
  }
  // @@protoc_insertion_point(copy_constructor:AuthServerVerificationMessage)
}

void AuthServerVerificationMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AuthServerVerificationMessage_pokerth_2eproto.base);
  serververification_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AuthServerVerificationMessage::~AuthServerVerificationMessage() {
  // @@protoc_insertion_point(destructor:AuthServerVerificationMessage)
  SharedDtor();
}

void AuthServerVerificationMessage::SharedDtor() {
  serververification_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthServerVerificationMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthServerVerificationMessage& AuthServerVerificationMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AuthServerVerificationMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AuthServerVerificationMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthServerVerificationMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    serververification_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AuthServerVerificationMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AuthServerVerificationMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required bytes serverVerification = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_serververification();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AuthServerVerificationMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:AuthServerVerificationMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes serverVerification = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serververification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuthServerVerificationMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuthServerVerificationMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AuthServerVerificationMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuthServerVerificationMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes serverVerification = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->serververification(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AuthServerVerificationMessage)
}

size_t AuthServerVerificationMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AuthServerVerificationMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required bytes serverVerification = 1;
  if (has_serververification()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->serververification());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthServerVerificationMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthServerVerificationMessage*>(&from));
}

void AuthServerVerificationMessage::MergeFrom(const AuthServerVerificationMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AuthServerVerificationMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_serververification()) {
    _has_bits_[0] |= 0x00000001u;
    serververification_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serververification_);
  }
}

void AuthServerVerificationMessage::CopyFrom(const AuthServerVerificationMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthServerVerificationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthServerVerificationMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AuthServerVerificationMessage::Swap(AuthServerVerificationMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthServerVerificationMessage::InternalSwap(AuthServerVerificationMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serververification_.Swap(&other->serververification_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string AuthServerVerificationMessage::GetTypeName() const {
  return "AuthServerVerificationMessage";
}


// ===================================================================

void InitAckMessage::InitAsDefaultInstance() {
}
class InitAckMessage::HasBitSetters {
 public:
  static void set_has_yoursessionid(InitAckMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_yourplayerid(InitAckMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_youravatarhash(InitAckMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_rejoingameid(InitAckMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitAckMessage::kYourSessionIdFieldNumber;
const int InitAckMessage::kYourPlayerIdFieldNumber;
const int InitAckMessage::kYourAvatarHashFieldNumber;
const int InitAckMessage::kRejoinGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitAckMessage::InitAckMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitAckMessage)
}
InitAckMessage::InitAckMessage(const InitAckMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  yoursessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_yoursessionid()) {
    yoursessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.yoursessionid_);
  }
  youravatarhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_youravatarhash()) {
    youravatarhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youravatarhash_);
  }
  ::memcpy(&yourplayerid_, &from.yourplayerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rejoingameid_) -
    reinterpret_cast<char*>(&yourplayerid_)) + sizeof(rejoingameid_));
  // @@protoc_insertion_point(copy_constructor:InitAckMessage)
}

void InitAckMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InitAckMessage_pokerth_2eproto.base);
  yoursessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youravatarhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&yourplayerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rejoingameid_) -
      reinterpret_cast<char*>(&yourplayerid_)) + sizeof(rejoingameid_));
}

InitAckMessage::~InitAckMessage() {
  // @@protoc_insertion_point(destructor:InitAckMessage)
  SharedDtor();
}

void InitAckMessage::SharedDtor() {
  yoursessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youravatarhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InitAckMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitAckMessage& InitAckMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InitAckMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void InitAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:InitAckMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      yoursessionid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      youravatarhash_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&yourplayerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rejoingameid_) -
        reinterpret_cast<char*>(&yourplayerid_)) + sizeof(rejoingameid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InitAckMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InitAckMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required bytes yourSessionId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_yoursessionid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // required uint32 yourPlayerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_yourplayerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes yourAvatarHash = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_youravatarhash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 rejoinGameId = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_rejoingameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InitAckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:InitAckMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes yourSessionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_yoursessionid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 yourPlayerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_yourplayerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yourplayerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes yourAvatarHash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_youravatarhash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rejoinGameId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_rejoingameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rejoingameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitAckMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitAckMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InitAckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitAckMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes yourSessionId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->yoursessionid(), output);
  }

  // required uint32 yourPlayerId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->yourplayerid(), output);
  }

  // optional bytes yourAvatarHash = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->youravatarhash(), output);
  }

  // optional uint32 rejoinGameId = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rejoingameid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:InitAckMessage)
}

size_t InitAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:InitAckMessage)
  size_t total_size = 0;

  if (has_yoursessionid()) {
    // required bytes yourSessionId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->yoursessionid());
  }

  if (has_yourplayerid()) {
    // required uint32 yourPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->yourplayerid());
  }

  return total_size;
}
size_t InitAckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitAckMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required bytes yourSessionId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->yoursessionid());

    // required uint32 yourPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->yourplayerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes yourAvatarHash = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->youravatarhash());
  }

  // optional uint32 rejoinGameId = 4;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rejoingameid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitAckMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InitAckMessage*>(&from));
}

void InitAckMessage::MergeFrom(const InitAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitAckMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      yoursessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.yoursessionid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      youravatarhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youravatarhash_);
    }
    if (cached_has_bits & 0x00000004u) {
      yourplayerid_ = from.yourplayerid_;
    }
    if (cached_has_bits & 0x00000008u) {
      rejoingameid_ = from.rejoingameid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InitAckMessage::CopyFrom(const InitAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitAckMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void InitAckMessage::Swap(InitAckMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitAckMessage::InternalSwap(InitAckMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  yoursessionid_.Swap(&other->yoursessionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  youravatarhash_.Swap(&other->youravatarhash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(yourplayerid_, other->yourplayerid_);
  swap(rejoingameid_, other->rejoingameid_);
}

::std::string InitAckMessage::GetTypeName() const {
  return "InitAckMessage";
}


// ===================================================================

void AvatarRequestMessage::InitAsDefaultInstance() {
}
class AvatarRequestMessage::HasBitSetters {
 public:
  static void set_has_requestid(AvatarRequestMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_avatarhash(AvatarRequestMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarRequestMessage::kRequestIdFieldNumber;
const int AvatarRequestMessage::kAvatarHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarRequestMessage::AvatarRequestMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AvatarRequestMessage)
}
AvatarRequestMessage::AvatarRequestMessage(const AvatarRequestMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avatarhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_avatarhash()) {
    avatarhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatarhash_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:AvatarRequestMessage)
}

void AvatarRequestMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AvatarRequestMessage_pokerth_2eproto.base);
  avatarhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0u;
}

AvatarRequestMessage::~AvatarRequestMessage() {
  // @@protoc_insertion_point(destructor:AvatarRequestMessage)
  SharedDtor();
}

void AvatarRequestMessage::SharedDtor() {
  avatarhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AvatarRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AvatarRequestMessage& AvatarRequestMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AvatarRequestMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AvatarRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AvatarRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    avatarhash_.ClearNonDefaultToEmptyNoArena();
  }
  requestid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AvatarRequestMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AvatarRequestMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_requestid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required bytes avatarHash = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_avatarhash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AvatarRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:AvatarRequestMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 requestId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_requestid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes avatarHash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatarhash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AvatarRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AvatarRequestMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AvatarRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AvatarRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestid(), output);
  }

  // required bytes avatarHash = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->avatarhash(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AvatarRequestMessage)
}

size_t AvatarRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AvatarRequestMessage)
  size_t total_size = 0;

  if (has_avatarhash()) {
    // required bytes avatarHash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->avatarhash());
  }

  if (has_requestid()) {
    // required uint32 requestId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());
  }

  return total_size;
}
size_t AvatarRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AvatarRequestMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes avatarHash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->avatarhash());

    // required uint32 requestId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AvatarRequestMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AvatarRequestMessage*>(&from));
}

void AvatarRequestMessage::MergeFrom(const AvatarRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AvatarRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      avatarhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatarhash_);
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AvatarRequestMessage::CopyFrom(const AvatarRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AvatarRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AvatarRequestMessage::Swap(AvatarRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarRequestMessage::InternalSwap(AvatarRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  avatarhash_.Swap(&other->avatarhash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
}

::std::string AvatarRequestMessage::GetTypeName() const {
  return "AvatarRequestMessage";
}


// ===================================================================

void AvatarHeaderMessage::InitAsDefaultInstance() {
}
class AvatarHeaderMessage::HasBitSetters {
 public:
  static void set_has_requestid(AvatarHeaderMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_avatartype(AvatarHeaderMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_avatarsize(AvatarHeaderMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarHeaderMessage::kRequestIdFieldNumber;
const int AvatarHeaderMessage::kAvatarTypeFieldNumber;
const int AvatarHeaderMessage::kAvatarSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarHeaderMessage::AvatarHeaderMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AvatarHeaderMessage)
}
AvatarHeaderMessage::AvatarHeaderMessage(const AvatarHeaderMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&avatartype_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(avatartype_));
  // @@protoc_insertion_point(copy_constructor:AvatarHeaderMessage)
}

void AvatarHeaderMessage::SharedCtor() {
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatarsize_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(avatarsize_));
  avatartype_ = 1;
}

AvatarHeaderMessage::~AvatarHeaderMessage() {
  // @@protoc_insertion_point(destructor:AvatarHeaderMessage)
  SharedDtor();
}

void AvatarHeaderMessage::SharedDtor() {
}

void AvatarHeaderMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AvatarHeaderMessage& AvatarHeaderMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AvatarHeaderMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AvatarHeaderMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AvatarHeaderMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&avatarsize_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(avatarsize_));
    avatartype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AvatarHeaderMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AvatarHeaderMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_requestid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .NetAvatarType avatarType = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::NetAvatarType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_avatartype(static_cast<::NetAvatarType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 avatarSize = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_avatarsize(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AvatarHeaderMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:AvatarHeaderMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 requestId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_requestid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NetAvatarType avatarType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetAvatarType_IsValid(value)) {
            set_avatartype(static_cast< ::NetAvatarType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 avatarSize = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_avatarsize(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatarsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AvatarHeaderMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AvatarHeaderMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AvatarHeaderMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AvatarHeaderMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestid(), output);
  }

  // required .NetAvatarType avatarType = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->avatartype(), output);
  }

  // required uint32 avatarSize = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->avatarsize(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AvatarHeaderMessage)
}

size_t AvatarHeaderMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AvatarHeaderMessage)
  size_t total_size = 0;

  if (has_requestid()) {
    // required uint32 requestId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());
  }

  if (has_avatarsize()) {
    // required uint32 avatarSize = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avatarsize());
  }

  if (has_avatartype()) {
    // required .NetAvatarType avatarType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->avatartype());
  }

  return total_size;
}
size_t AvatarHeaderMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AvatarHeaderMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 requestId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());

    // required uint32 avatarSize = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avatarsize());

    // required .NetAvatarType avatarType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->avatartype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AvatarHeaderMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AvatarHeaderMessage*>(&from));
}

void AvatarHeaderMessage::MergeFrom(const AvatarHeaderMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AvatarHeaderMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000002u) {
      avatarsize_ = from.avatarsize_;
    }
    if (cached_has_bits & 0x00000004u) {
      avatartype_ = from.avatartype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AvatarHeaderMessage::CopyFrom(const AvatarHeaderMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AvatarHeaderMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarHeaderMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void AvatarHeaderMessage::Swap(AvatarHeaderMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarHeaderMessage::InternalSwap(AvatarHeaderMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(requestid_, other->requestid_);
  swap(avatarsize_, other->avatarsize_);
  swap(avatartype_, other->avatartype_);
}

::std::string AvatarHeaderMessage::GetTypeName() const {
  return "AvatarHeaderMessage";
}


// ===================================================================

void AvatarDataMessage::InitAsDefaultInstance() {
}
class AvatarDataMessage::HasBitSetters {
 public:
  static void set_has_requestid(AvatarDataMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_avatarblock(AvatarDataMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarDataMessage::kRequestIdFieldNumber;
const int AvatarDataMessage::kAvatarBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarDataMessage::AvatarDataMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AvatarDataMessage)
}
AvatarDataMessage::AvatarDataMessage(const AvatarDataMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avatarblock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_avatarblock()) {
    avatarblock_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatarblock_);
  }
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:AvatarDataMessage)
}

void AvatarDataMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AvatarDataMessage_pokerth_2eproto.base);
  avatarblock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_ = 0u;
}

AvatarDataMessage::~AvatarDataMessage() {
  // @@protoc_insertion_point(destructor:AvatarDataMessage)
  SharedDtor();
}

void AvatarDataMessage::SharedDtor() {
  avatarblock_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AvatarDataMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AvatarDataMessage& AvatarDataMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AvatarDataMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AvatarDataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AvatarDataMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    avatarblock_.ClearNonDefaultToEmptyNoArena();
  }
  requestid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AvatarDataMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AvatarDataMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_requestid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required bytes avatarBlock = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_avatarblock();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AvatarDataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:AvatarDataMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 requestId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_requestid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes avatarBlock = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatarblock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AvatarDataMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AvatarDataMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AvatarDataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AvatarDataMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestid(), output);
  }

  // required bytes avatarBlock = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->avatarblock(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AvatarDataMessage)
}

size_t AvatarDataMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AvatarDataMessage)
  size_t total_size = 0;

  if (has_avatarblock()) {
    // required bytes avatarBlock = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->avatarblock());
  }

  if (has_requestid()) {
    // required uint32 requestId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());
  }

  return total_size;
}
size_t AvatarDataMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AvatarDataMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes avatarBlock = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->avatarblock());

    // required uint32 requestId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AvatarDataMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AvatarDataMessage*>(&from));
}

void AvatarDataMessage::MergeFrom(const AvatarDataMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AvatarDataMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      avatarblock_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatarblock_);
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AvatarDataMessage::CopyFrom(const AvatarDataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AvatarDataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarDataMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AvatarDataMessage::Swap(AvatarDataMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarDataMessage::InternalSwap(AvatarDataMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  avatarblock_.Swap(&other->avatarblock_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
}

::std::string AvatarDataMessage::GetTypeName() const {
  return "AvatarDataMessage";
}


// ===================================================================

void AvatarEndMessage::InitAsDefaultInstance() {
}
class AvatarEndMessage::HasBitSetters {
 public:
  static void set_has_requestid(AvatarEndMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvatarEndMessage::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvatarEndMessage::AvatarEndMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AvatarEndMessage)
}
AvatarEndMessage::AvatarEndMessage(const AvatarEndMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:AvatarEndMessage)
}

void AvatarEndMessage::SharedCtor() {
  requestid_ = 0u;
}

AvatarEndMessage::~AvatarEndMessage() {
  // @@protoc_insertion_point(destructor:AvatarEndMessage)
  SharedDtor();
}

void AvatarEndMessage::SharedDtor() {
}

void AvatarEndMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AvatarEndMessage& AvatarEndMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AvatarEndMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AvatarEndMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AvatarEndMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requestid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AvatarEndMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AvatarEndMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_requestid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AvatarEndMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:AvatarEndMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 requestId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_requestid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AvatarEndMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AvatarEndMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AvatarEndMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AvatarEndMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AvatarEndMessage)
}

size_t AvatarEndMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AvatarEndMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 requestId = 1;
  if (has_requestid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AvatarEndMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AvatarEndMessage*>(&from));
}

void AvatarEndMessage::MergeFrom(const AvatarEndMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AvatarEndMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requestid()) {
    set_requestid(from.requestid());
  }
}

void AvatarEndMessage::CopyFrom(const AvatarEndMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AvatarEndMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarEndMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AvatarEndMessage::Swap(AvatarEndMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvatarEndMessage::InternalSwap(AvatarEndMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(requestid_, other->requestid_);
}

::std::string AvatarEndMessage::GetTypeName() const {
  return "AvatarEndMessage";
}


// ===================================================================

void UnknownAvatarMessage::InitAsDefaultInstance() {
}
class UnknownAvatarMessage::HasBitSetters {
 public:
  static void set_has_requestid(UnknownAvatarMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnknownAvatarMessage::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnknownAvatarMessage::UnknownAvatarMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UnknownAvatarMessage)
}
UnknownAvatarMessage::UnknownAvatarMessage(const UnknownAvatarMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requestid_ = from.requestid_;
  // @@protoc_insertion_point(copy_constructor:UnknownAvatarMessage)
}

void UnknownAvatarMessage::SharedCtor() {
  requestid_ = 0u;
}

UnknownAvatarMessage::~UnknownAvatarMessage() {
  // @@protoc_insertion_point(destructor:UnknownAvatarMessage)
  SharedDtor();
}

void UnknownAvatarMessage::SharedDtor() {
}

void UnknownAvatarMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnknownAvatarMessage& UnknownAvatarMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UnknownAvatarMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void UnknownAvatarMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:UnknownAvatarMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requestid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UnknownAvatarMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UnknownAvatarMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_requestid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UnknownAvatarMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:UnknownAvatarMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 requestId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_requestid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UnknownAvatarMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UnknownAvatarMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UnknownAvatarMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UnknownAvatarMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:UnknownAvatarMessage)
}

size_t UnknownAvatarMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UnknownAvatarMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 requestId = 1;
  if (has_requestid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnknownAvatarMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UnknownAvatarMessage*>(&from));
}

void UnknownAvatarMessage::MergeFrom(const UnknownAvatarMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnknownAvatarMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_requestid()) {
    set_requestid(from.requestid());
  }
}

void UnknownAvatarMessage::CopyFrom(const UnknownAvatarMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnknownAvatarMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownAvatarMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UnknownAvatarMessage::Swap(UnknownAvatarMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnknownAvatarMessage::InternalSwap(UnknownAvatarMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(requestid_, other->requestid_);
}

::std::string UnknownAvatarMessage::GetTypeName() const {
  return "UnknownAvatarMessage";
}


// ===================================================================

void PlayerListMessage::InitAsDefaultInstance() {
}
class PlayerListMessage::HasBitSetters {
 public:
  static void set_has_playerid(PlayerListMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_playerlistnotification(PlayerListMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerListMessage::kPlayerIdFieldNumber;
const int PlayerListMessage::kPlayerListNotificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerListMessage::PlayerListMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerListMessage)
}
PlayerListMessage::PlayerListMessage(const PlayerListMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerlistnotification_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(playerlistnotification_));
  // @@protoc_insertion_point(copy_constructor:PlayerListMessage)
}

void PlayerListMessage::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerlistnotification_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(playerlistnotification_));
}

PlayerListMessage::~PlayerListMessage() {
  // @@protoc_insertion_point(destructor:PlayerListMessage)
  SharedDtor();
}

void PlayerListMessage::SharedDtor() {
}

void PlayerListMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerListMessage& PlayerListMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerListMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void PlayerListMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerListMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playerlistnotification_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(playerlistnotification_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerListMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerListMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .PlayerListMessage.PlayerListNotification playerListNotification = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::PlayerListMessage_PlayerListNotification_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_playerlistnotification(static_cast<::PlayerListMessage_PlayerListNotification>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerListMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PlayerListMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .PlayerListMessage.PlayerListNotification playerListNotification = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PlayerListMessage_PlayerListNotification_IsValid(value)) {
            set_playerlistnotification(static_cast< ::PlayerListMessage_PlayerListNotification >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerListMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerListMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerListMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerListMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required .PlayerListMessage.PlayerListNotification playerListNotification = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->playerlistnotification(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PlayerListMessage)
}

size_t PlayerListMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerListMessage)
  size_t total_size = 0;

  if (has_playerid()) {
    // required uint32 playerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_playerlistnotification()) {
    // required .PlayerListMessage.PlayerListNotification playerListNotification = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->playerlistnotification());
  }

  return total_size;
}
size_t PlayerListMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerListMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required .PlayerListMessage.PlayerListNotification playerListNotification = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->playerlistnotification());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerListMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerListMessage*>(&from));
}

void PlayerListMessage::MergeFrom(const PlayerListMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerListMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerlistnotification_ = from.playerlistnotification_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerListMessage::CopyFrom(const PlayerListMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerListMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerListMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PlayerListMessage::Swap(PlayerListMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerListMessage::InternalSwap(PlayerListMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(playerid_, other->playerid_);
  swap(playerlistnotification_, other->playerlistnotification_);
}

::std::string PlayerListMessage::GetTypeName() const {
  return "PlayerListMessage";
}


// ===================================================================

void GameListNewMessage::InitAsDefaultInstance() {
  ::_GameListNewMessage_default_instance_._instance.get_mutable()->gameinfo_ = const_cast< ::NetGameInfo*>(
      ::NetGameInfo::internal_default_instance());
}
class GameListNewMessage::HasBitSetters {
 public:
  static void set_has_gameid(GameListNewMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_gamemode(GameListNewMessage* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_isprivate(GameListNewMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_adminplayerid(GameListNewMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::NetGameInfo& gameinfo(const GameListNewMessage* msg);
  static void set_has_gameinfo(GameListNewMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::NetGameInfo&
GameListNewMessage::HasBitSetters::gameinfo(const GameListNewMessage* msg) {
  return *msg->gameinfo_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameListNewMessage::kGameIdFieldNumber;
const int GameListNewMessage::kGameModeFieldNumber;
const int GameListNewMessage::kIsPrivateFieldNumber;
const int GameListNewMessage::kPlayerIdsFieldNumber;
const int GameListNewMessage::kAdminPlayerIdFieldNumber;
const int GameListNewMessage::kGameInfoFieldNumber;
const int GameListNewMessage::kSpectatorIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameListNewMessage::GameListNewMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameListNewMessage)
}
GameListNewMessage::GameListNewMessage(const GameListNewMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      playerids_(from.playerids_),
      spectatorids_(from.spectatorids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gameinfo()) {
    gameinfo_ = new ::NetGameInfo(*from.gameinfo_);
  } else {
    gameinfo_ = nullptr;
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamemode_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(gamemode_));
  // @@protoc_insertion_point(copy_constructor:GameListNewMessage)
}

void GameListNewMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameListNewMessage_pokerth_2eproto.base);
  ::memset(&gameinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&adminplayerid_) -
      reinterpret_cast<char*>(&gameinfo_)) + sizeof(adminplayerid_));
  gamemode_ = 1;
}

GameListNewMessage::~GameListNewMessage() {
  // @@protoc_insertion_point(destructor:GameListNewMessage)
  SharedDtor();
}

void GameListNewMessage::SharedDtor() {
  if (this != internal_default_instance()) delete gameinfo_;
}

void GameListNewMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameListNewMessage& GameListNewMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameListNewMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameListNewMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListNewMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerids_.Clear();
  spectatorids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(gameinfo_ != nullptr);
    gameinfo_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adminplayerid_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(adminplayerid_));
    gamemode_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameListNewMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameListNewMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .NetGameMode gameMode = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::NetGameMode_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_gamemode(static_cast<::NetGameMode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required bool isPrivate = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_isprivate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 playerIds = 4 [packed = true];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 34) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_playerids();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        do {
          msg->add_playerids(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
        break;
      }
      // required uint32 adminPlayerId = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_adminplayerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .NetGameInfo gameInfo = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::NetGameInfo::_InternalParse;
        object = msg->mutable_gameinfo();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated uint32 spectatorIds = 7 [packed = true];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) == 58) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_spectatorids();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        do {
          msg->add_spectatorids(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 56 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameListNewMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:GameListNewMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NetGameMode gameMode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetGameMode_IsValid(value)) {
            set_gamemode(static_cast< ::NetGameMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isPrivate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_isprivate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isprivate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 playerIds = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_playerids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_playerids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 adminPlayerId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_adminplayerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adminplayerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NetGameInfo gameInfo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gameinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 spectatorIds = 7 [packed = true];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_spectatorids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58u, input, this->mutable_spectatorids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameListNewMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameListNewMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameListNewMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameListNewMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required .NetGameMode gameMode = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gamemode(), output);
  }

  // required bool isPrivate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isprivate(), output);
  }

  // repeated uint32 playerIds = 4 [packed = true];
  if (this->playerids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_playerids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->playerids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->playerids(i), output);
  }

  // required uint32 adminPlayerId = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->adminplayerid(), output);
  }

  // required .NetGameInfo gameInfo = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, HasBitSetters::gameinfo(this), output);
  }

  // repeated uint32 spectatorIds = 7 [packed = true];
  if (this->spectatorids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_spectatorids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->spectatorids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->spectatorids(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameListNewMessage)
}

size_t GameListNewMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListNewMessage)
  size_t total_size = 0;

  if (has_gameinfo()) {
    // required .NetGameInfo gameInfo = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gameinfo_);
  }

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_isprivate()) {
    // required bool isPrivate = 3;
    total_size += 1 + 1;
  }

  if (has_adminplayerid()) {
    // required uint32 adminPlayerId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->adminplayerid());
  }

  if (has_gamemode()) {
    // required .NetGameMode gameMode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamemode());
  }

  return total_size;
}
size_t GameListNewMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameListNewMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .NetGameInfo gameInfo = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gameinfo_);

    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required bool isPrivate = 3;
    total_size += 1 + 1;

    // required uint32 adminPlayerId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->adminplayerid());

    // required .NetGameMode gameMode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamemode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 playerIds = 4 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->playerids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _playerids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 spectatorIds = 7 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->spectatorids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _spectatorids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameListNewMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameListNewMessage*>(&from));
}

void GameListNewMessage::MergeFrom(const GameListNewMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameListNewMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerids_.MergeFrom(from.playerids_);
  spectatorids_.MergeFrom(from.spectatorids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_gameinfo()->::NetGameInfo::MergeFrom(from.gameinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000004u) {
      isprivate_ = from.isprivate_;
    }
    if (cached_has_bits & 0x00000008u) {
      adminplayerid_ = from.adminplayerid_;
    }
    if (cached_has_bits & 0x00000010u) {
      gamemode_ = from.gamemode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameListNewMessage::CopyFrom(const GameListNewMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListNewMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListNewMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_gameinfo()) {
    if (!this->gameinfo_->IsInitialized()) return false;
  }
  return true;
}

void GameListNewMessage::Swap(GameListNewMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameListNewMessage::InternalSwap(GameListNewMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playerids_.InternalSwap(&other->playerids_);
  spectatorids_.InternalSwap(&other->spectatorids_);
  swap(gameinfo_, other->gameinfo_);
  swap(gameid_, other->gameid_);
  swap(isprivate_, other->isprivate_);
  swap(adminplayerid_, other->adminplayerid_);
  swap(gamemode_, other->gamemode_);
}

::std::string GameListNewMessage::GetTypeName() const {
  return "GameListNewMessage";
}


// ===================================================================

void GameListUpdateMessage::InitAsDefaultInstance() {
}
class GameListUpdateMessage::HasBitSetters {
 public:
  static void set_has_gameid(GameListUpdateMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_gamemode(GameListUpdateMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameListUpdateMessage::kGameIdFieldNumber;
const int GameListUpdateMessage::kGameModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameListUpdateMessage::GameListUpdateMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameListUpdateMessage)
}
GameListUpdateMessage::GameListUpdateMessage(const GameListUpdateMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamemode_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(gamemode_));
  // @@protoc_insertion_point(copy_constructor:GameListUpdateMessage)
}

void GameListUpdateMessage::SharedCtor() {
  gameid_ = 0u;
  gamemode_ = 1;
}

GameListUpdateMessage::~GameListUpdateMessage() {
  // @@protoc_insertion_point(destructor:GameListUpdateMessage)
  SharedDtor();
}

void GameListUpdateMessage::SharedDtor() {
}

void GameListUpdateMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameListUpdateMessage& GameListUpdateMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameListUpdateMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameListUpdateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListUpdateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    gameid_ = 0u;
    gamemode_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameListUpdateMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameListUpdateMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .NetGameMode gameMode = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::NetGameMode_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_gamemode(static_cast<::NetGameMode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameListUpdateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:GameListUpdateMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NetGameMode gameMode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetGameMode_IsValid(value)) {
            set_gamemode(static_cast< ::NetGameMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameListUpdateMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameListUpdateMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameListUpdateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameListUpdateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required .NetGameMode gameMode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gamemode(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameListUpdateMessage)
}

size_t GameListUpdateMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListUpdateMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_gamemode()) {
    // required .NetGameMode gameMode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamemode());
  }

  return total_size;
}
size_t GameListUpdateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameListUpdateMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required .NetGameMode gameMode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamemode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameListUpdateMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameListUpdateMessage*>(&from));
}

void GameListUpdateMessage::MergeFrom(const GameListUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameListUpdateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      gamemode_ = from.gamemode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameListUpdateMessage::CopyFrom(const GameListUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListUpdateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListUpdateMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GameListUpdateMessage::Swap(GameListUpdateMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameListUpdateMessage::InternalSwap(GameListUpdateMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(gamemode_, other->gamemode_);
}

::std::string GameListUpdateMessage::GetTypeName() const {
  return "GameListUpdateMessage";
}


// ===================================================================

void GameListPlayerJoinedMessage::InitAsDefaultInstance() {
}
class GameListPlayerJoinedMessage::HasBitSetters {
 public:
  static void set_has_gameid(GameListPlayerJoinedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_playerid(GameListPlayerJoinedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameListPlayerJoinedMessage::kGameIdFieldNumber;
const int GameListPlayerJoinedMessage::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameListPlayerJoinedMessage::GameListPlayerJoinedMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameListPlayerJoinedMessage)
}
GameListPlayerJoinedMessage::GameListPlayerJoinedMessage(const GameListPlayerJoinedMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:GameListPlayerJoinedMessage)
}

void GameListPlayerJoinedMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
}

GameListPlayerJoinedMessage::~GameListPlayerJoinedMessage() {
  // @@protoc_insertion_point(destructor:GameListPlayerJoinedMessage)
  SharedDtor();
}

void GameListPlayerJoinedMessage::SharedDtor() {
}

void GameListPlayerJoinedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameListPlayerJoinedMessage& GameListPlayerJoinedMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameListPlayerJoinedMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameListPlayerJoinedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListPlayerJoinedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playerid_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameListPlayerJoinedMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameListPlayerJoinedMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameListPlayerJoinedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:GameListPlayerJoinedMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameListPlayerJoinedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameListPlayerJoinedMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameListPlayerJoinedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameListPlayerJoinedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameListPlayerJoinedMessage)
}

size_t GameListPlayerJoinedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListPlayerJoinedMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  return total_size;
}
size_t GameListPlayerJoinedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameListPlayerJoinedMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameListPlayerJoinedMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameListPlayerJoinedMessage*>(&from));
}

void GameListPlayerJoinedMessage::MergeFrom(const GameListPlayerJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameListPlayerJoinedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameListPlayerJoinedMessage::CopyFrom(const GameListPlayerJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListPlayerJoinedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListPlayerJoinedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GameListPlayerJoinedMessage::Swap(GameListPlayerJoinedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameListPlayerJoinedMessage::InternalSwap(GameListPlayerJoinedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(playerid_, other->playerid_);
}

::std::string GameListPlayerJoinedMessage::GetTypeName() const {
  return "GameListPlayerJoinedMessage";
}


// ===================================================================

void GameListPlayerLeftMessage::InitAsDefaultInstance() {
}
class GameListPlayerLeftMessage::HasBitSetters {
 public:
  static void set_has_gameid(GameListPlayerLeftMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_playerid(GameListPlayerLeftMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameListPlayerLeftMessage::kGameIdFieldNumber;
const int GameListPlayerLeftMessage::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameListPlayerLeftMessage::GameListPlayerLeftMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameListPlayerLeftMessage)
}
GameListPlayerLeftMessage::GameListPlayerLeftMessage(const GameListPlayerLeftMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:GameListPlayerLeftMessage)
}

void GameListPlayerLeftMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
}

GameListPlayerLeftMessage::~GameListPlayerLeftMessage() {
  // @@protoc_insertion_point(destructor:GameListPlayerLeftMessage)
  SharedDtor();
}

void GameListPlayerLeftMessage::SharedDtor() {
}

void GameListPlayerLeftMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameListPlayerLeftMessage& GameListPlayerLeftMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameListPlayerLeftMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameListPlayerLeftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListPlayerLeftMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playerid_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameListPlayerLeftMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameListPlayerLeftMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameListPlayerLeftMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:GameListPlayerLeftMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameListPlayerLeftMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameListPlayerLeftMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameListPlayerLeftMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameListPlayerLeftMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameListPlayerLeftMessage)
}

size_t GameListPlayerLeftMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListPlayerLeftMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  return total_size;
}
size_t GameListPlayerLeftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameListPlayerLeftMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameListPlayerLeftMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameListPlayerLeftMessage*>(&from));
}

void GameListPlayerLeftMessage::MergeFrom(const GameListPlayerLeftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameListPlayerLeftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameListPlayerLeftMessage::CopyFrom(const GameListPlayerLeftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListPlayerLeftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListPlayerLeftMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GameListPlayerLeftMessage::Swap(GameListPlayerLeftMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameListPlayerLeftMessage::InternalSwap(GameListPlayerLeftMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(playerid_, other->playerid_);
}

::std::string GameListPlayerLeftMessage::GetTypeName() const {
  return "GameListPlayerLeftMessage";
}


// ===================================================================

void GameListSpectatorJoinedMessage::InitAsDefaultInstance() {
}
class GameListSpectatorJoinedMessage::HasBitSetters {
 public:
  static void set_has_gameid(GameListSpectatorJoinedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_playerid(GameListSpectatorJoinedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameListSpectatorJoinedMessage::kGameIdFieldNumber;
const int GameListSpectatorJoinedMessage::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameListSpectatorJoinedMessage::GameListSpectatorJoinedMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameListSpectatorJoinedMessage)
}
GameListSpectatorJoinedMessage::GameListSpectatorJoinedMessage(const GameListSpectatorJoinedMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:GameListSpectatorJoinedMessage)
}

void GameListSpectatorJoinedMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
}

GameListSpectatorJoinedMessage::~GameListSpectatorJoinedMessage() {
  // @@protoc_insertion_point(destructor:GameListSpectatorJoinedMessage)
  SharedDtor();
}

void GameListSpectatorJoinedMessage::SharedDtor() {
}

void GameListSpectatorJoinedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameListSpectatorJoinedMessage& GameListSpectatorJoinedMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameListSpectatorJoinedMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameListSpectatorJoinedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListSpectatorJoinedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playerid_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameListSpectatorJoinedMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameListSpectatorJoinedMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameListSpectatorJoinedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:GameListSpectatorJoinedMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameListSpectatorJoinedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameListSpectatorJoinedMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameListSpectatorJoinedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameListSpectatorJoinedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameListSpectatorJoinedMessage)
}

size_t GameListSpectatorJoinedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListSpectatorJoinedMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  return total_size;
}
size_t GameListSpectatorJoinedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameListSpectatorJoinedMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameListSpectatorJoinedMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameListSpectatorJoinedMessage*>(&from));
}

void GameListSpectatorJoinedMessage::MergeFrom(const GameListSpectatorJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameListSpectatorJoinedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameListSpectatorJoinedMessage::CopyFrom(const GameListSpectatorJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListSpectatorJoinedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListSpectatorJoinedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GameListSpectatorJoinedMessage::Swap(GameListSpectatorJoinedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameListSpectatorJoinedMessage::InternalSwap(GameListSpectatorJoinedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(playerid_, other->playerid_);
}

::std::string GameListSpectatorJoinedMessage::GetTypeName() const {
  return "GameListSpectatorJoinedMessage";
}


// ===================================================================

void GameListSpectatorLeftMessage::InitAsDefaultInstance() {
}
class GameListSpectatorLeftMessage::HasBitSetters {
 public:
  static void set_has_gameid(GameListSpectatorLeftMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_playerid(GameListSpectatorLeftMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameListSpectatorLeftMessage::kGameIdFieldNumber;
const int GameListSpectatorLeftMessage::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameListSpectatorLeftMessage::GameListSpectatorLeftMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameListSpectatorLeftMessage)
}
GameListSpectatorLeftMessage::GameListSpectatorLeftMessage(const GameListSpectatorLeftMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:GameListSpectatorLeftMessage)
}

void GameListSpectatorLeftMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
}

GameListSpectatorLeftMessage::~GameListSpectatorLeftMessage() {
  // @@protoc_insertion_point(destructor:GameListSpectatorLeftMessage)
  SharedDtor();
}

void GameListSpectatorLeftMessage::SharedDtor() {
}

void GameListSpectatorLeftMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameListSpectatorLeftMessage& GameListSpectatorLeftMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameListSpectatorLeftMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameListSpectatorLeftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListSpectatorLeftMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playerid_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameListSpectatorLeftMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameListSpectatorLeftMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameListSpectatorLeftMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:GameListSpectatorLeftMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameListSpectatorLeftMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameListSpectatorLeftMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameListSpectatorLeftMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameListSpectatorLeftMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameListSpectatorLeftMessage)
}

size_t GameListSpectatorLeftMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListSpectatorLeftMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  return total_size;
}
size_t GameListSpectatorLeftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameListSpectatorLeftMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameListSpectatorLeftMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameListSpectatorLeftMessage*>(&from));
}

void GameListSpectatorLeftMessage::MergeFrom(const GameListSpectatorLeftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameListSpectatorLeftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameListSpectatorLeftMessage::CopyFrom(const GameListSpectatorLeftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListSpectatorLeftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListSpectatorLeftMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GameListSpectatorLeftMessage::Swap(GameListSpectatorLeftMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameListSpectatorLeftMessage::InternalSwap(GameListSpectatorLeftMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(playerid_, other->playerid_);
}

::std::string GameListSpectatorLeftMessage::GetTypeName() const {
  return "GameListSpectatorLeftMessage";
}


// ===================================================================

void GameListAdminChangedMessage::InitAsDefaultInstance() {
}
class GameListAdminChangedMessage::HasBitSetters {
 public:
  static void set_has_gameid(GameListAdminChangedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_newadminplayerid(GameListAdminChangedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameListAdminChangedMessage::kGameIdFieldNumber;
const int GameListAdminChangedMessage::kNewAdminPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameListAdminChangedMessage::GameListAdminChangedMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameListAdminChangedMessage)
}
GameListAdminChangedMessage::GameListAdminChangedMessage(const GameListAdminChangedMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&newadminplayerid_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(newadminplayerid_));
  // @@protoc_insertion_point(copy_constructor:GameListAdminChangedMessage)
}

void GameListAdminChangedMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newadminplayerid_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(newadminplayerid_));
}

GameListAdminChangedMessage::~GameListAdminChangedMessage() {
  // @@protoc_insertion_point(destructor:GameListAdminChangedMessage)
  SharedDtor();
}

void GameListAdminChangedMessage::SharedDtor() {
}

void GameListAdminChangedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameListAdminChangedMessage& GameListAdminChangedMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameListAdminChangedMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameListAdminChangedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameListAdminChangedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&newadminplayerid_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(newadminplayerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameListAdminChangedMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameListAdminChangedMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 newAdminPlayerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_newadminplayerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameListAdminChangedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:GameListAdminChangedMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 newAdminPlayerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_newadminplayerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newadminplayerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameListAdminChangedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameListAdminChangedMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameListAdminChangedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameListAdminChangedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 newAdminPlayerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newadminplayerid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameListAdminChangedMessage)
}

size_t GameListAdminChangedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameListAdminChangedMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_newadminplayerid()) {
    // required uint32 newAdminPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->newadminplayerid());
  }

  return total_size;
}
size_t GameListAdminChangedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameListAdminChangedMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 newAdminPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->newadminplayerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameListAdminChangedMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameListAdminChangedMessage*>(&from));
}

void GameListAdminChangedMessage::MergeFrom(const GameListAdminChangedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameListAdminChangedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      newadminplayerid_ = from.newadminplayerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameListAdminChangedMessage::CopyFrom(const GameListAdminChangedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameListAdminChangedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListAdminChangedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GameListAdminChangedMessage::Swap(GameListAdminChangedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameListAdminChangedMessage::InternalSwap(GameListAdminChangedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(newadminplayerid_, other->newadminplayerid_);
}

::std::string GameListAdminChangedMessage::GetTypeName() const {
  return "GameListAdminChangedMessage";
}


// ===================================================================

void PlayerInfoRequestMessage::InitAsDefaultInstance() {
}
class PlayerInfoRequestMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfoRequestMessage::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfoRequestMessage::PlayerInfoRequestMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerInfoRequestMessage)
}
PlayerInfoRequestMessage::PlayerInfoRequestMessage(const PlayerInfoRequestMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      playerid_(from.playerid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlayerInfoRequestMessage)
}

void PlayerInfoRequestMessage::SharedCtor() {
}

PlayerInfoRequestMessage::~PlayerInfoRequestMessage() {
  // @@protoc_insertion_point(destructor:PlayerInfoRequestMessage)
  SharedDtor();
}

void PlayerInfoRequestMessage::SharedDtor() {
}

void PlayerInfoRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInfoRequestMessage& PlayerInfoRequestMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerInfoRequestMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void PlayerInfoRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerInfoRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerid_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerInfoRequestMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerInfoRequestMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 playerId = 1 [packed = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_playerid();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          msg->add_playerid(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerInfoRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PlayerInfoRequestMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 playerId = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_playerid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_playerid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerInfoRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerInfoRequestMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerInfoRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerInfoRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 playerId = 1 [packed = true];
  if (this->playerid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_playerid_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->playerid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->playerid(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PlayerInfoRequestMessage)
}

size_t PlayerInfoRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerInfoRequestMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 playerId = 1 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->playerid_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _playerid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInfoRequestMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerInfoRequestMessage*>(&from));
}

void PlayerInfoRequestMessage::MergeFrom(const PlayerInfoRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerInfoRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerid_.MergeFrom(from.playerid_);
}

void PlayerInfoRequestMessage::CopyFrom(const PlayerInfoRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerInfoRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoRequestMessage::IsInitialized() const {
  return true;
}

void PlayerInfoRequestMessage::Swap(PlayerInfoRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfoRequestMessage::InternalSwap(PlayerInfoRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playerid_.InternalSwap(&other->playerid_);
}

::std::string PlayerInfoRequestMessage::GetTypeName() const {
  return "PlayerInfoRequestMessage";
}


// ===================================================================

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::InitAsDefaultInstance() {
}
class PlayerInfoReplyMessage_PlayerInfoData_AvatarData::HasBitSetters {
 public:
  static void set_has_avatartype(PlayerInfoReplyMessage_PlayerInfoData_AvatarData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_avatarhash(PlayerInfoReplyMessage_PlayerInfoData_AvatarData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfoReplyMessage_PlayerInfoData_AvatarData::kAvatarTypeFieldNumber;
const int PlayerInfoReplyMessage_PlayerInfoData_AvatarData::kAvatarHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfoReplyMessage_PlayerInfoData_AvatarData::PlayerInfoReplyMessage_PlayerInfoData_AvatarData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
}
PlayerInfoReplyMessage_PlayerInfoData_AvatarData::PlayerInfoReplyMessage_PlayerInfoData_AvatarData(const PlayerInfoReplyMessage_PlayerInfoData_AvatarData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avatarhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_avatarhash()) {
    avatarhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatarhash_);
  }
  avatartype_ = from.avatartype_;
  // @@protoc_insertion_point(copy_constructor:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerInfoReplyMessage_PlayerInfoData_AvatarData_pokerth_2eproto.base);
  avatarhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatartype_ = 1;
}

PlayerInfoReplyMessage_PlayerInfoData_AvatarData::~PlayerInfoReplyMessage_PlayerInfoData_AvatarData() {
  // @@protoc_insertion_point(destructor:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  SharedDtor();
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::SharedDtor() {
  avatarhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInfoReplyMessage_PlayerInfoData_AvatarData& PlayerInfoReplyMessage_PlayerInfoData_AvatarData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerInfoReplyMessage_PlayerInfoData_AvatarData_pokerth_2eproto.base);
  return *internal_default_instance();
}


void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      avatarhash_.ClearNonDefaultToEmptyNoArena();
    }
    avatartype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerInfoReplyMessage_PlayerInfoData_AvatarData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerInfoReplyMessage_PlayerInfoData_AvatarData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .NetAvatarType avatarType = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::NetAvatarType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_avatartype(static_cast<::NetAvatarType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required bytes avatarHash = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_avatarhash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerInfoReplyMessage_PlayerInfoData_AvatarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NetAvatarType avatarType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetAvatarType_IsValid(value)) {
            set_avatartype(static_cast< ::NetAvatarType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes avatarHash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatarhash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NetAvatarType avatarType = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->avatartype(), output);
  }

  // required bytes avatarHash = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->avatarhash(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
}

size_t PlayerInfoReplyMessage_PlayerInfoData_AvatarData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  size_t total_size = 0;

  if (has_avatarhash()) {
    // required bytes avatarHash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->avatarhash());
  }

  if (has_avatartype()) {
    // required .NetAvatarType avatarType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->avatartype());
  }

  return total_size;
}
size_t PlayerInfoReplyMessage_PlayerInfoData_AvatarData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes avatarHash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->avatarhash());

    // required .NetAvatarType avatarType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->avatartype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerInfoReplyMessage_PlayerInfoData_AvatarData*>(&from));
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::MergeFrom(const PlayerInfoReplyMessage_PlayerInfoData_AvatarData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      avatarhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatarhash_);
    }
    if (cached_has_bits & 0x00000002u) {
      avatartype_ = from.avatartype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::CopyFrom(const PlayerInfoReplyMessage_PlayerInfoData_AvatarData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerInfoReplyMessage.PlayerInfoData.AvatarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoReplyMessage_PlayerInfoData_AvatarData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::Swap(PlayerInfoReplyMessage_PlayerInfoData_AvatarData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::InternalSwap(PlayerInfoReplyMessage_PlayerInfoData_AvatarData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  avatarhash_.Swap(&other->avatarhash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(avatartype_, other->avatartype_);
}

::std::string PlayerInfoReplyMessage_PlayerInfoData_AvatarData::GetTypeName() const {
  return "PlayerInfoReplyMessage.PlayerInfoData.AvatarData";
}


// ===================================================================

void PlayerInfoReplyMessage_PlayerInfoData::InitAsDefaultInstance() {
  ::_PlayerInfoReplyMessage_PlayerInfoData_default_instance_._instance.get_mutable()->avatardata_ = const_cast< ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData*>(
      ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData::internal_default_instance());
}
class PlayerInfoReplyMessage_PlayerInfoData::HasBitSetters {
 public:
  static void set_has_playername(PlayerInfoReplyMessage_PlayerInfoData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ishuman(PlayerInfoReplyMessage_PlayerInfoData* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_playerrights(PlayerInfoReplyMessage_PlayerInfoData* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_countrycode(PlayerInfoReplyMessage_PlayerInfoData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData& avatardata(const PlayerInfoReplyMessage_PlayerInfoData* msg);
  static void set_has_avatardata(PlayerInfoReplyMessage_PlayerInfoData* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData&
PlayerInfoReplyMessage_PlayerInfoData::HasBitSetters::avatardata(const PlayerInfoReplyMessage_PlayerInfoData* msg) {
  return *msg->avatardata_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfoReplyMessage_PlayerInfoData::kPlayerNameFieldNumber;
const int PlayerInfoReplyMessage_PlayerInfoData::kIsHumanFieldNumber;
const int PlayerInfoReplyMessage_PlayerInfoData::kPlayerRightsFieldNumber;
const int PlayerInfoReplyMessage_PlayerInfoData::kCountryCodeFieldNumber;
const int PlayerInfoReplyMessage_PlayerInfoData::kAvatarDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfoReplyMessage_PlayerInfoData::PlayerInfoReplyMessage_PlayerInfoData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerInfoReplyMessage.PlayerInfoData)
}
PlayerInfoReplyMessage_PlayerInfoData::PlayerInfoReplyMessage_PlayerInfoData(const PlayerInfoReplyMessage_PlayerInfoData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_playername()) {
    playername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playername_);
  }
  countrycode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_countrycode()) {
    countrycode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.countrycode_);
  }
  if (from.has_avatardata()) {
    avatardata_ = new ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData(*from.avatardata_);
  } else {
    avatardata_ = nullptr;
  }
  ::memcpy(&ishuman_, &from.ishuman_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerrights_) -
    reinterpret_cast<char*>(&ishuman_)) + sizeof(playerrights_));
  // @@protoc_insertion_point(copy_constructor:PlayerInfoReplyMessage.PlayerInfoData)
}

void PlayerInfoReplyMessage_PlayerInfoData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerInfoReplyMessage_PlayerInfoData_pokerth_2eproto.base);
  playername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  countrycode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&avatardata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ishuman_) -
      reinterpret_cast<char*>(&avatardata_)) + sizeof(ishuman_));
  playerrights_ = 1;
}

PlayerInfoReplyMessage_PlayerInfoData::~PlayerInfoReplyMessage_PlayerInfoData() {
  // @@protoc_insertion_point(destructor:PlayerInfoReplyMessage.PlayerInfoData)
  SharedDtor();
}

void PlayerInfoReplyMessage_PlayerInfoData::SharedDtor() {
  playername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  countrycode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete avatardata_;
}

void PlayerInfoReplyMessage_PlayerInfoData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInfoReplyMessage_PlayerInfoData& PlayerInfoReplyMessage_PlayerInfoData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerInfoReplyMessage_PlayerInfoData_pokerth_2eproto.base);
  return *internal_default_instance();
}


void PlayerInfoReplyMessage_PlayerInfoData::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerInfoReplyMessage.PlayerInfoData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      playername_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      countrycode_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(avatardata_ != nullptr);
      avatardata_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ishuman_ = false;
    playerrights_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerInfoReplyMessage_PlayerInfoData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerInfoReplyMessage_PlayerInfoData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required string playerName = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_playername();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // required bool isHuman = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ishuman(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .NetPlayerInfoRights playerRights = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::NetPlayerInfoRights_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_playerrights(static_cast<::NetPlayerInfoRights>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string countryCode = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_countrycode();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .PlayerInfoReplyMessage.PlayerInfoData.AvatarData avatarData = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData::_InternalParse;
        object = msg->mutable_avatardata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerInfoReplyMessage_PlayerInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PlayerInfoReplyMessage.PlayerInfoData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isHuman = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_ishuman(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishuman_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NetPlayerInfoRights playerRights = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetPlayerInfoRights_IsValid(value)) {
            set_playerrights(static_cast< ::NetPlayerInfoRights >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string countryCode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countrycode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .PlayerInfoReplyMessage.PlayerInfoData.AvatarData avatarData = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_avatardata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerInfoReplyMessage.PlayerInfoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerInfoReplyMessage.PlayerInfoData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerInfoReplyMessage_PlayerInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerInfoReplyMessage.PlayerInfoData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string playerName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->playername(), output);
  }

  // required bool isHuman = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ishuman(), output);
  }

  // required .NetPlayerInfoRights playerRights = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->playerrights(), output);
  }

  // optional string countryCode = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->countrycode(), output);
  }

  // optional .PlayerInfoReplyMessage.PlayerInfoData.AvatarData avatarData = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, HasBitSetters::avatardata(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PlayerInfoReplyMessage.PlayerInfoData)
}

size_t PlayerInfoReplyMessage_PlayerInfoData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerInfoReplyMessage.PlayerInfoData)
  size_t total_size = 0;

  if (has_playername()) {
    // required string playerName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playername());
  }

  if (has_ishuman()) {
    // required bool isHuman = 2;
    total_size += 1 + 1;
  }

  if (has_playerrights()) {
    // required .NetPlayerInfoRights playerRights = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->playerrights());
  }

  return total_size;
}
size_t PlayerInfoReplyMessage_PlayerInfoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerInfoReplyMessage.PlayerInfoData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000019) ^ 0x00000019) == 0) {  // All required fields are present.
    // required string playerName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playername());

    // required bool isHuman = 2;
    total_size += 1 + 1;

    // required .NetPlayerInfoRights playerRights = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->playerrights());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string countryCode = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->countrycode());
    }

    // optional .PlayerInfoReplyMessage.PlayerInfoData.AvatarData avatarData = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *avatardata_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInfoReplyMessage_PlayerInfoData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerInfoReplyMessage_PlayerInfoData*>(&from));
}

void PlayerInfoReplyMessage_PlayerInfoData::MergeFrom(const PlayerInfoReplyMessage_PlayerInfoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerInfoReplyMessage.PlayerInfoData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      playername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playername_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      countrycode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.countrycode_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_avatardata()->::PlayerInfoReplyMessage_PlayerInfoData_AvatarData::MergeFrom(from.avatardata());
    }
    if (cached_has_bits & 0x00000008u) {
      ishuman_ = from.ishuman_;
    }
    if (cached_has_bits & 0x00000010u) {
      playerrights_ = from.playerrights_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerInfoReplyMessage_PlayerInfoData::CopyFrom(const PlayerInfoReplyMessage_PlayerInfoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerInfoReplyMessage.PlayerInfoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoReplyMessage_PlayerInfoData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;
  if (has_avatardata()) {
    if (!this->avatardata_->IsInitialized()) return false;
  }
  return true;
}

void PlayerInfoReplyMessage_PlayerInfoData::Swap(PlayerInfoReplyMessage_PlayerInfoData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfoReplyMessage_PlayerInfoData::InternalSwap(PlayerInfoReplyMessage_PlayerInfoData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playername_.Swap(&other->playername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  countrycode_.Swap(&other->countrycode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(avatardata_, other->avatardata_);
  swap(ishuman_, other->ishuman_);
  swap(playerrights_, other->playerrights_);
}

::std::string PlayerInfoReplyMessage_PlayerInfoData::GetTypeName() const {
  return "PlayerInfoReplyMessage.PlayerInfoData";
}


// ===================================================================

void PlayerInfoReplyMessage::InitAsDefaultInstance() {
  ::_PlayerInfoReplyMessage_default_instance_._instance.get_mutable()->playerinfodata_ = const_cast< ::PlayerInfoReplyMessage_PlayerInfoData*>(
      ::PlayerInfoReplyMessage_PlayerInfoData::internal_default_instance());
}
class PlayerInfoReplyMessage::HasBitSetters {
 public:
  static void set_has_playerid(PlayerInfoReplyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::PlayerInfoReplyMessage_PlayerInfoData& playerinfodata(const PlayerInfoReplyMessage* msg);
  static void set_has_playerinfodata(PlayerInfoReplyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::PlayerInfoReplyMessage_PlayerInfoData&
PlayerInfoReplyMessage::HasBitSetters::playerinfodata(const PlayerInfoReplyMessage* msg) {
  return *msg->playerinfodata_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfoReplyMessage::kPlayerIdFieldNumber;
const int PlayerInfoReplyMessage::kPlayerInfoDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfoReplyMessage::PlayerInfoReplyMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerInfoReplyMessage)
}
PlayerInfoReplyMessage::PlayerInfoReplyMessage(const PlayerInfoReplyMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_playerinfodata()) {
    playerinfodata_ = new ::PlayerInfoReplyMessage_PlayerInfoData(*from.playerinfodata_);
  } else {
    playerinfodata_ = nullptr;
  }
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:PlayerInfoReplyMessage)
}

void PlayerInfoReplyMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlayerInfoReplyMessage_pokerth_2eproto.base);
  ::memset(&playerinfodata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&playerinfodata_)) + sizeof(playerid_));
}

PlayerInfoReplyMessage::~PlayerInfoReplyMessage() {
  // @@protoc_insertion_point(destructor:PlayerInfoReplyMessage)
  SharedDtor();
}

void PlayerInfoReplyMessage::SharedDtor() {
  if (this != internal_default_instance()) delete playerinfodata_;
}

void PlayerInfoReplyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInfoReplyMessage& PlayerInfoReplyMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerInfoReplyMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void PlayerInfoReplyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerInfoReplyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(playerinfodata_ != nullptr);
    playerinfodata_->Clear();
  }
  playerid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerInfoReplyMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerInfoReplyMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .PlayerInfoReplyMessage.PlayerInfoData playerInfoData = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::PlayerInfoReplyMessage_PlayerInfoData::_InternalParse;
        object = msg->mutable_playerinfodata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerInfoReplyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PlayerInfoReplyMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .PlayerInfoReplyMessage.PlayerInfoData playerInfoData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_playerinfodata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerInfoReplyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerInfoReplyMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerInfoReplyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerInfoReplyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // optional .PlayerInfoReplyMessage.PlayerInfoData playerInfoData = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, HasBitSetters::playerinfodata(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PlayerInfoReplyMessage)
}

size_t PlayerInfoReplyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerInfoReplyMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 playerId = 1;
  if (has_playerid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PlayerInfoReplyMessage.PlayerInfoData playerInfoData = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *playerinfodata_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInfoReplyMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerInfoReplyMessage*>(&from));
}

void PlayerInfoReplyMessage::MergeFrom(const PlayerInfoReplyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerInfoReplyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_playerinfodata()->::PlayerInfoReplyMessage_PlayerInfoData::MergeFrom(from.playerinfodata());
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerInfoReplyMessage::CopyFrom(const PlayerInfoReplyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerInfoReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoReplyMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_playerinfodata()) {
    if (!this->playerinfodata_->IsInitialized()) return false;
  }
  return true;
}

void PlayerInfoReplyMessage::Swap(PlayerInfoReplyMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfoReplyMessage::InternalSwap(PlayerInfoReplyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(playerinfodata_, other->playerinfodata_);
  swap(playerid_, other->playerid_);
}

::std::string PlayerInfoReplyMessage::GetTypeName() const {
  return "PlayerInfoReplyMessage";
}


// ===================================================================

void SubscriptionRequestMessage::InitAsDefaultInstance() {
}
class SubscriptionRequestMessage::HasBitSetters {
 public:
  static void set_has_subscriptionaction(SubscriptionRequestMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscriptionRequestMessage::kSubscriptionActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscriptionRequestMessage::SubscriptionRequestMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubscriptionRequestMessage)
}
SubscriptionRequestMessage::SubscriptionRequestMessage(const SubscriptionRequestMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscriptionaction_ = from.subscriptionaction_;
  // @@protoc_insertion_point(copy_constructor:SubscriptionRequestMessage)
}

void SubscriptionRequestMessage::SharedCtor() {
  subscriptionaction_ = 1;
}

SubscriptionRequestMessage::~SubscriptionRequestMessage() {
  // @@protoc_insertion_point(destructor:SubscriptionRequestMessage)
  SharedDtor();
}

void SubscriptionRequestMessage::SharedDtor() {
}

void SubscriptionRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriptionRequestMessage& SubscriptionRequestMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SubscriptionRequestMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void SubscriptionRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SubscriptionRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscriptionaction_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscriptionRequestMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SubscriptionRequestMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .SubscriptionRequestMessage.SubscriptionAction subscriptionAction = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::SubscriptionRequestMessage_SubscriptionAction_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_subscriptionaction(static_cast<::SubscriptionRequestMessage_SubscriptionAction>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscriptionRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:SubscriptionRequestMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SubscriptionRequestMessage.SubscriptionAction subscriptionAction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SubscriptionRequestMessage_SubscriptionAction_IsValid(value)) {
            set_subscriptionaction(static_cast< ::SubscriptionRequestMessage_SubscriptionAction >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubscriptionRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubscriptionRequestMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscriptionRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubscriptionRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .SubscriptionRequestMessage.SubscriptionAction subscriptionAction = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->subscriptionaction(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:SubscriptionRequestMessage)
}

size_t SubscriptionRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubscriptionRequestMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .SubscriptionRequestMessage.SubscriptionAction subscriptionAction = 1;
  if (has_subscriptionaction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subscriptionaction());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriptionRequestMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SubscriptionRequestMessage*>(&from));
}

void SubscriptionRequestMessage::MergeFrom(const SubscriptionRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubscriptionRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_subscriptionaction()) {
    set_subscriptionaction(from.subscriptionaction());
  }
}

void SubscriptionRequestMessage::CopyFrom(const SubscriptionRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubscriptionRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SubscriptionRequestMessage::Swap(SubscriptionRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscriptionRequestMessage::InternalSwap(SubscriptionRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(subscriptionaction_, other->subscriptionaction_);
}

::std::string SubscriptionRequestMessage::GetTypeName() const {
  return "SubscriptionRequestMessage";
}


// ===================================================================

void JoinExistingGameMessage::InitAsDefaultInstance() {
}
class JoinExistingGameMessage::HasBitSetters {
 public:
  static void set_has_gameid(JoinExistingGameMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_password(JoinExistingGameMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_autoleave(JoinExistingGameMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_spectateonly(JoinExistingGameMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinExistingGameMessage::kGameIdFieldNumber;
const int JoinExistingGameMessage::kPasswordFieldNumber;
const int JoinExistingGameMessage::kAutoLeaveFieldNumber;
const int JoinExistingGameMessage::kSpectateOnlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinExistingGameMessage::JoinExistingGameMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JoinExistingGameMessage)
}
JoinExistingGameMessage::JoinExistingGameMessage(const JoinExistingGameMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&spectateonly_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(spectateonly_));
  // @@protoc_insertion_point(copy_constructor:JoinExistingGameMessage)
}

void JoinExistingGameMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_JoinExistingGameMessage_pokerth_2eproto.base);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spectateonly_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(spectateonly_));
}

JoinExistingGameMessage::~JoinExistingGameMessage() {
  // @@protoc_insertion_point(destructor:JoinExistingGameMessage)
  SharedDtor();
}

void JoinExistingGameMessage::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JoinExistingGameMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinExistingGameMessage& JoinExistingGameMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_JoinExistingGameMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void JoinExistingGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:JoinExistingGameMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    password_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&spectateonly_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(spectateonly_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JoinExistingGameMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<JoinExistingGameMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string password = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool autoLeave = 3 [default = false];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_autoleave(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool spectateOnly = 4 [default = false];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_spectateonly(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JoinExistingGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:JoinExistingGameMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool autoLeave = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_autoleave(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoleave_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool spectateOnly = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_spectateonly(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spectateonly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JoinExistingGameMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JoinExistingGameMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JoinExistingGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JoinExistingGameMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional bool autoLeave = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->autoleave(), output);
  }

  // optional bool spectateOnly = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->spectateonly(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:JoinExistingGameMessage)
}

size_t JoinExistingGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JoinExistingGameMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 gameId = 1;
  if (has_gameid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string password = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional bool autoLeave = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool spectateOnly = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinExistingGameMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const JoinExistingGameMessage*>(&from));
}

void JoinExistingGameMessage::MergeFrom(const JoinExistingGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JoinExistingGameMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000004u) {
      autoleave_ = from.autoleave_;
    }
    if (cached_has_bits & 0x00000008u) {
      spectateonly_ = from.spectateonly_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JoinExistingGameMessage::CopyFrom(const JoinExistingGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JoinExistingGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinExistingGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void JoinExistingGameMessage::Swap(JoinExistingGameMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinExistingGameMessage::InternalSwap(JoinExistingGameMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameid_, other->gameid_);
  swap(autoleave_, other->autoleave_);
  swap(spectateonly_, other->spectateonly_);
}

::std::string JoinExistingGameMessage::GetTypeName() const {
  return "JoinExistingGameMessage";
}


// ===================================================================

void JoinNewGameMessage::InitAsDefaultInstance() {
  ::_JoinNewGameMessage_default_instance_._instance.get_mutable()->gameinfo_ = const_cast< ::NetGameInfo*>(
      ::NetGameInfo::internal_default_instance());
}
class JoinNewGameMessage::HasBitSetters {
 public:
  static const ::NetGameInfo& gameinfo(const JoinNewGameMessage* msg);
  static void set_has_gameinfo(JoinNewGameMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_password(JoinNewGameMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_autoleave(JoinNewGameMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::NetGameInfo&
JoinNewGameMessage::HasBitSetters::gameinfo(const JoinNewGameMessage* msg) {
  return *msg->gameinfo_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinNewGameMessage::kGameInfoFieldNumber;
const int JoinNewGameMessage::kPasswordFieldNumber;
const int JoinNewGameMessage::kAutoLeaveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinNewGameMessage::JoinNewGameMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JoinNewGameMessage)
}
JoinNewGameMessage::JoinNewGameMessage(const JoinNewGameMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_gameinfo()) {
    gameinfo_ = new ::NetGameInfo(*from.gameinfo_);
  } else {
    gameinfo_ = nullptr;
  }
  autoleave_ = from.autoleave_;
  // @@protoc_insertion_point(copy_constructor:JoinNewGameMessage)
}

void JoinNewGameMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_JoinNewGameMessage_pokerth_2eproto.base);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&autoleave_) -
      reinterpret_cast<char*>(&gameinfo_)) + sizeof(autoleave_));
}

JoinNewGameMessage::~JoinNewGameMessage() {
  // @@protoc_insertion_point(destructor:JoinNewGameMessage)
  SharedDtor();
}

void JoinNewGameMessage::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gameinfo_;
}

void JoinNewGameMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinNewGameMessage& JoinNewGameMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_JoinNewGameMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void JoinNewGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:JoinNewGameMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(gameinfo_ != nullptr);
      gameinfo_->Clear();
    }
  }
  autoleave_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JoinNewGameMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<JoinNewGameMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .NetGameInfo gameInfo = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::NetGameInfo::_InternalParse;
        object = msg->mutable_gameinfo();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional string password = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool autoLeave = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_autoleave(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JoinNewGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:JoinNewGameMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NetGameInfo gameInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gameinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool autoLeave = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_autoleave(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoleave_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JoinNewGameMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JoinNewGameMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JoinNewGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JoinNewGameMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NetGameInfo gameInfo = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, HasBitSetters::gameinfo(this), output);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional bool autoLeave = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->autoleave(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:JoinNewGameMessage)
}

size_t JoinNewGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JoinNewGameMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .NetGameInfo gameInfo = 1;
  if (has_gameinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gameinfo_);
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string password = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // optional bool autoLeave = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinNewGameMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const JoinNewGameMessage*>(&from));
}

void JoinNewGameMessage::MergeFrom(const JoinNewGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JoinNewGameMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_gameinfo()->::NetGameInfo::MergeFrom(from.gameinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      autoleave_ = from.autoleave_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JoinNewGameMessage::CopyFrom(const JoinNewGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JoinNewGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinNewGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_gameinfo()) {
    if (!this->gameinfo_->IsInitialized()) return false;
  }
  return true;
}

void JoinNewGameMessage::Swap(JoinNewGameMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinNewGameMessage::InternalSwap(JoinNewGameMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameinfo_, other->gameinfo_);
  swap(autoleave_, other->autoleave_);
}

::std::string JoinNewGameMessage::GetTypeName() const {
  return "JoinNewGameMessage";
}


// ===================================================================

void RejoinExistingGameMessage::InitAsDefaultInstance() {
}
class RejoinExistingGameMessage::HasBitSetters {
 public:
  static void set_has_gameid(RejoinExistingGameMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_autoleave(RejoinExistingGameMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RejoinExistingGameMessage::kGameIdFieldNumber;
const int RejoinExistingGameMessage::kAutoLeaveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RejoinExistingGameMessage::RejoinExistingGameMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RejoinExistingGameMessage)
}
RejoinExistingGameMessage::RejoinExistingGameMessage(const RejoinExistingGameMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&autoleave_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(autoleave_));
  // @@protoc_insertion_point(copy_constructor:RejoinExistingGameMessage)
}

void RejoinExistingGameMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&autoleave_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(autoleave_));
}

RejoinExistingGameMessage::~RejoinExistingGameMessage() {
  // @@protoc_insertion_point(destructor:RejoinExistingGameMessage)
  SharedDtor();
}

void RejoinExistingGameMessage::SharedDtor() {
}

void RejoinExistingGameMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RejoinExistingGameMessage& RejoinExistingGameMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RejoinExistingGameMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void RejoinExistingGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RejoinExistingGameMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&autoleave_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(autoleave_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RejoinExistingGameMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RejoinExistingGameMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool autoLeave = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_autoleave(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RejoinExistingGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:RejoinExistingGameMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool autoLeave = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_autoleave(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoleave_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RejoinExistingGameMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RejoinExistingGameMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RejoinExistingGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RejoinExistingGameMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // optional bool autoLeave = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->autoleave(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:RejoinExistingGameMessage)
}

size_t RejoinExistingGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RejoinExistingGameMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 gameId = 1;
  if (has_gameid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool autoLeave = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RejoinExistingGameMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RejoinExistingGameMessage*>(&from));
}

void RejoinExistingGameMessage::MergeFrom(const RejoinExistingGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RejoinExistingGameMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      autoleave_ = from.autoleave_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RejoinExistingGameMessage::CopyFrom(const RejoinExistingGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RejoinExistingGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejoinExistingGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RejoinExistingGameMessage::Swap(RejoinExistingGameMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RejoinExistingGameMessage::InternalSwap(RejoinExistingGameMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(autoleave_, other->autoleave_);
}

::std::string RejoinExistingGameMessage::GetTypeName() const {
  return "RejoinExistingGameMessage";
}


// ===================================================================

void JoinGameAckMessage::InitAsDefaultInstance() {
  ::_JoinGameAckMessage_default_instance_._instance.get_mutable()->gameinfo_ = const_cast< ::NetGameInfo*>(
      ::NetGameInfo::internal_default_instance());
}
class JoinGameAckMessage::HasBitSetters {
 public:
  static void set_has_gameid(JoinGameAckMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_areyougameadmin(JoinGameAckMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::NetGameInfo& gameinfo(const JoinGameAckMessage* msg);
  static void set_has_gameinfo(JoinGameAckMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_spectateonly(JoinGameAckMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

const ::NetGameInfo&
JoinGameAckMessage::HasBitSetters::gameinfo(const JoinGameAckMessage* msg) {
  return *msg->gameinfo_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinGameAckMessage::kGameIdFieldNumber;
const int JoinGameAckMessage::kAreYouGameAdminFieldNumber;
const int JoinGameAckMessage::kGameInfoFieldNumber;
const int JoinGameAckMessage::kSpectateOnlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinGameAckMessage::JoinGameAckMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JoinGameAckMessage)
}
JoinGameAckMessage::JoinGameAckMessage(const JoinGameAckMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gameinfo()) {
    gameinfo_ = new ::NetGameInfo(*from.gameinfo_);
  } else {
    gameinfo_ = nullptr;
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&spectateonly_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(spectateonly_));
  // @@protoc_insertion_point(copy_constructor:JoinGameAckMessage)
}

void JoinGameAckMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_JoinGameAckMessage_pokerth_2eproto.base);
  ::memset(&gameinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spectateonly_) -
      reinterpret_cast<char*>(&gameinfo_)) + sizeof(spectateonly_));
}

JoinGameAckMessage::~JoinGameAckMessage() {
  // @@protoc_insertion_point(destructor:JoinGameAckMessage)
  SharedDtor();
}

void JoinGameAckMessage::SharedDtor() {
  if (this != internal_default_instance()) delete gameinfo_;
}

void JoinGameAckMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinGameAckMessage& JoinGameAckMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_JoinGameAckMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void JoinGameAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:JoinGameAckMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(gameinfo_ != nullptr);
    gameinfo_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&spectateonly_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(spectateonly_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JoinGameAckMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<JoinGameAckMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required bool areYouGameAdmin = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_areyougameadmin(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .NetGameInfo gameInfo = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::NetGameInfo::_InternalParse;
        object = msg->mutable_gameinfo();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bool spectateOnly = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_spectateonly(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JoinGameAckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:JoinGameAckMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool areYouGameAdmin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_areyougameadmin(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &areyougameadmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NetGameInfo gameInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gameinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool spectateOnly = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_spectateonly(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spectateonly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JoinGameAckMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JoinGameAckMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JoinGameAckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JoinGameAckMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required bool areYouGameAdmin = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->areyougameadmin(), output);
  }

  // required .NetGameInfo gameInfo = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, HasBitSetters::gameinfo(this), output);
  }

  // optional bool spectateOnly = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->spectateonly(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:JoinGameAckMessage)
}

size_t JoinGameAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:JoinGameAckMessage)
  size_t total_size = 0;

  if (has_gameinfo()) {
    // required .NetGameInfo gameInfo = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gameinfo_);
  }

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_areyougameadmin()) {
    // required bool areYouGameAdmin = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t JoinGameAckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JoinGameAckMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .NetGameInfo gameInfo = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gameinfo_);

    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required bool areYouGameAdmin = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool spectateOnly = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinGameAckMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const JoinGameAckMessage*>(&from));
}

void JoinGameAckMessage::MergeFrom(const JoinGameAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JoinGameAckMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_gameinfo()->::NetGameInfo::MergeFrom(from.gameinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000004u) {
      areyougameadmin_ = from.areyougameadmin_;
    }
    if (cached_has_bits & 0x00000008u) {
      spectateonly_ = from.spectateonly_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JoinGameAckMessage::CopyFrom(const JoinGameAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JoinGameAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGameAckMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_gameinfo()) {
    if (!this->gameinfo_->IsInitialized()) return false;
  }
  return true;
}

void JoinGameAckMessage::Swap(JoinGameAckMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinGameAckMessage::InternalSwap(JoinGameAckMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameinfo_, other->gameinfo_);
  swap(gameid_, other->gameid_);
  swap(areyougameadmin_, other->areyougameadmin_);
  swap(spectateonly_, other->spectateonly_);
}

::std::string JoinGameAckMessage::GetTypeName() const {
  return "JoinGameAckMessage";
}


// ===================================================================

void JoinGameFailedMessage::InitAsDefaultInstance() {
}
class JoinGameFailedMessage::HasBitSetters {
 public:
  static void set_has_gameid(JoinGameFailedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_joingamefailurereason(JoinGameFailedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinGameFailedMessage::kGameIdFieldNumber;
const int JoinGameFailedMessage::kJoinGameFailureReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinGameFailedMessage::JoinGameFailedMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JoinGameFailedMessage)
}
JoinGameFailedMessage::JoinGameFailedMessage(const JoinGameFailedMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&joingamefailurereason_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(joingamefailurereason_));
  // @@protoc_insertion_point(copy_constructor:JoinGameFailedMessage)
}

void JoinGameFailedMessage::SharedCtor() {
  gameid_ = 0u;
  joingamefailurereason_ = 1;
}

JoinGameFailedMessage::~JoinGameFailedMessage() {
  // @@protoc_insertion_point(destructor:JoinGameFailedMessage)
  SharedDtor();
}

void JoinGameFailedMessage::SharedDtor() {
}

void JoinGameFailedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinGameFailedMessage& JoinGameFailedMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_JoinGameFailedMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void JoinGameFailedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:JoinGameFailedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    gameid_ = 0u;
    joingamefailurereason_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JoinGameFailedMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<JoinGameFailedMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .JoinGameFailedMessage.JoinGameFailureReason joinGameFailureReason = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::JoinGameFailedMessage_JoinGameFailureReason_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_joingamefailurereason(static_cast<::JoinGameFailedMessage_JoinGameFailureReason>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JoinGameFailedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:JoinGameFailedMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .JoinGameFailedMessage.JoinGameFailureReason joinGameFailureReason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::JoinGameFailedMessage_JoinGameFailureReason_IsValid(value)) {
            set_joingamefailurereason(static_cast< ::JoinGameFailedMessage_JoinGameFailureReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JoinGameFailedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JoinGameFailedMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JoinGameFailedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JoinGameFailedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required .JoinGameFailedMessage.JoinGameFailureReason joinGameFailureReason = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->joingamefailurereason(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:JoinGameFailedMessage)
}

size_t JoinGameFailedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:JoinGameFailedMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_joingamefailurereason()) {
    // required .JoinGameFailedMessage.JoinGameFailureReason joinGameFailureReason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->joingamefailurereason());
  }

  return total_size;
}
size_t JoinGameFailedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JoinGameFailedMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required .JoinGameFailedMessage.JoinGameFailureReason joinGameFailureReason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->joingamefailurereason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinGameFailedMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const JoinGameFailedMessage*>(&from));
}

void JoinGameFailedMessage::MergeFrom(const JoinGameFailedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JoinGameFailedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      joingamefailurereason_ = from.joingamefailurereason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JoinGameFailedMessage::CopyFrom(const JoinGameFailedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JoinGameFailedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGameFailedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void JoinGameFailedMessage::Swap(JoinGameFailedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinGameFailedMessage::InternalSwap(JoinGameFailedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(joingamefailurereason_, other->joingamefailurereason_);
}

::std::string JoinGameFailedMessage::GetTypeName() const {
  return "JoinGameFailedMessage";
}


// ===================================================================

void GamePlayerJoinedMessage::InitAsDefaultInstance() {
}
class GamePlayerJoinedMessage::HasBitSetters {
 public:
  static void set_has_gameid(GamePlayerJoinedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_playerid(GamePlayerJoinedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_isgameadmin(GamePlayerJoinedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GamePlayerJoinedMessage::kGameIdFieldNumber;
const int GamePlayerJoinedMessage::kPlayerIdFieldNumber;
const int GamePlayerJoinedMessage::kIsGameAdminFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GamePlayerJoinedMessage::GamePlayerJoinedMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePlayerJoinedMessage)
}
GamePlayerJoinedMessage::GamePlayerJoinedMessage(const GamePlayerJoinedMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isgameadmin_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(isgameadmin_));
  // @@protoc_insertion_point(copy_constructor:GamePlayerJoinedMessage)
}

void GamePlayerJoinedMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isgameadmin_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(isgameadmin_));
}

GamePlayerJoinedMessage::~GamePlayerJoinedMessage() {
  // @@protoc_insertion_point(destructor:GamePlayerJoinedMessage)
  SharedDtor();
}

void GamePlayerJoinedMessage::SharedDtor() {
}

void GamePlayerJoinedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GamePlayerJoinedMessage& GamePlayerJoinedMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GamePlayerJoinedMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GamePlayerJoinedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePlayerJoinedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isgameadmin_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(isgameadmin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GamePlayerJoinedMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GamePlayerJoinedMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required bool isGameAdmin = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_isgameadmin(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GamePlayerJoinedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:GamePlayerJoinedMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool isGameAdmin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_isgameadmin(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgameadmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePlayerJoinedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePlayerJoinedMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GamePlayerJoinedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePlayerJoinedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required bool isGameAdmin = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isgameadmin(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GamePlayerJoinedMessage)
}

size_t GamePlayerJoinedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GamePlayerJoinedMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_isgameadmin()) {
    // required bool isGameAdmin = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t GamePlayerJoinedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePlayerJoinedMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required bool isGameAdmin = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GamePlayerJoinedMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GamePlayerJoinedMessage*>(&from));
}

void GamePlayerJoinedMessage::MergeFrom(const GamePlayerJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePlayerJoinedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000004u) {
      isgameadmin_ = from.isgameadmin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GamePlayerJoinedMessage::CopyFrom(const GamePlayerJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePlayerJoinedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerJoinedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void GamePlayerJoinedMessage::Swap(GamePlayerJoinedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GamePlayerJoinedMessage::InternalSwap(GamePlayerJoinedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(playerid_, other->playerid_);
  swap(isgameadmin_, other->isgameadmin_);
}

::std::string GamePlayerJoinedMessage::GetTypeName() const {
  return "GamePlayerJoinedMessage";
}


// ===================================================================

void GamePlayerLeftMessage::InitAsDefaultInstance() {
}
class GamePlayerLeftMessage::HasBitSetters {
 public:
  static void set_has_gameid(GamePlayerLeftMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_playerid(GamePlayerLeftMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_gameplayerleftreason(GamePlayerLeftMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GamePlayerLeftMessage::kGameIdFieldNumber;
const int GamePlayerLeftMessage::kPlayerIdFieldNumber;
const int GamePlayerLeftMessage::kGamePlayerLeftReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GamePlayerLeftMessage::GamePlayerLeftMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GamePlayerLeftMessage)
}
GamePlayerLeftMessage::GamePlayerLeftMessage(const GamePlayerLeftMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gameplayerleftreason_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(gameplayerleftreason_));
  // @@protoc_insertion_point(copy_constructor:GamePlayerLeftMessage)
}

void GamePlayerLeftMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gameplayerleftreason_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(gameplayerleftreason_));
}

GamePlayerLeftMessage::~GamePlayerLeftMessage() {
  // @@protoc_insertion_point(destructor:GamePlayerLeftMessage)
  SharedDtor();
}

void GamePlayerLeftMessage::SharedDtor() {
}

void GamePlayerLeftMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GamePlayerLeftMessage& GamePlayerLeftMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GamePlayerLeftMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GamePlayerLeftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GamePlayerLeftMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gameplayerleftreason_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(gameplayerleftreason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GamePlayerLeftMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GamePlayerLeftMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .GamePlayerLeftMessage.GamePlayerLeftReason gamePlayerLeftReason = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::GamePlayerLeftMessage_GamePlayerLeftReason_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_gameplayerleftreason(static_cast<::GamePlayerLeftMessage_GamePlayerLeftReason>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GamePlayerLeftMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:GamePlayerLeftMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .GamePlayerLeftMessage.GamePlayerLeftReason gamePlayerLeftReason = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GamePlayerLeftMessage_GamePlayerLeftReason_IsValid(value)) {
            set_gameplayerleftreason(static_cast< ::GamePlayerLeftMessage_GamePlayerLeftReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GamePlayerLeftMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GamePlayerLeftMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GamePlayerLeftMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GamePlayerLeftMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required .GamePlayerLeftMessage.GamePlayerLeftReason gamePlayerLeftReason = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gameplayerleftreason(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GamePlayerLeftMessage)
}

size_t GamePlayerLeftMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GamePlayerLeftMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_gameplayerleftreason()) {
    // required .GamePlayerLeftMessage.GamePlayerLeftReason gamePlayerLeftReason = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gameplayerleftreason());
  }

  return total_size;
}
size_t GamePlayerLeftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GamePlayerLeftMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required .GamePlayerLeftMessage.GamePlayerLeftReason gamePlayerLeftReason = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gameplayerleftreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GamePlayerLeftMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GamePlayerLeftMessage*>(&from));
}

void GamePlayerLeftMessage::MergeFrom(const GamePlayerLeftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GamePlayerLeftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000004u) {
      gameplayerleftreason_ = from.gameplayerleftreason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GamePlayerLeftMessage::CopyFrom(const GamePlayerLeftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GamePlayerLeftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerLeftMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void GamePlayerLeftMessage::Swap(GamePlayerLeftMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GamePlayerLeftMessage::InternalSwap(GamePlayerLeftMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(playerid_, other->playerid_);
  swap(gameplayerleftreason_, other->gameplayerleftreason_);
}

::std::string GamePlayerLeftMessage::GetTypeName() const {
  return "GamePlayerLeftMessage";
}


// ===================================================================

void GameSpectatorJoinedMessage::InitAsDefaultInstance() {
}
class GameSpectatorJoinedMessage::HasBitSetters {
 public:
  static void set_has_gameid(GameSpectatorJoinedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_playerid(GameSpectatorJoinedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameSpectatorJoinedMessage::kGameIdFieldNumber;
const int GameSpectatorJoinedMessage::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSpectatorJoinedMessage::GameSpectatorJoinedMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameSpectatorJoinedMessage)
}
GameSpectatorJoinedMessage::GameSpectatorJoinedMessage(const GameSpectatorJoinedMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:GameSpectatorJoinedMessage)
}

void GameSpectatorJoinedMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
}

GameSpectatorJoinedMessage::~GameSpectatorJoinedMessage() {
  // @@protoc_insertion_point(destructor:GameSpectatorJoinedMessage)
  SharedDtor();
}

void GameSpectatorJoinedMessage::SharedDtor() {
}

void GameSpectatorJoinedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameSpectatorJoinedMessage& GameSpectatorJoinedMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameSpectatorJoinedMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameSpectatorJoinedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSpectatorJoinedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playerid_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameSpectatorJoinedMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameSpectatorJoinedMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameSpectatorJoinedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:GameSpectatorJoinedMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameSpectatorJoinedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameSpectatorJoinedMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameSpectatorJoinedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameSpectatorJoinedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameSpectatorJoinedMessage)
}

size_t GameSpectatorJoinedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameSpectatorJoinedMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  return total_size;
}
size_t GameSpectatorJoinedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameSpectatorJoinedMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameSpectatorJoinedMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameSpectatorJoinedMessage*>(&from));
}

void GameSpectatorJoinedMessage::MergeFrom(const GameSpectatorJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameSpectatorJoinedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameSpectatorJoinedMessage::CopyFrom(const GameSpectatorJoinedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSpectatorJoinedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSpectatorJoinedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GameSpectatorJoinedMessage::Swap(GameSpectatorJoinedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSpectatorJoinedMessage::InternalSwap(GameSpectatorJoinedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(playerid_, other->playerid_);
}

::std::string GameSpectatorJoinedMessage::GetTypeName() const {
  return "GameSpectatorJoinedMessage";
}


// ===================================================================

void GameSpectatorLeftMessage::InitAsDefaultInstance() {
}
class GameSpectatorLeftMessage::HasBitSetters {
 public:
  static void set_has_gameid(GameSpectatorLeftMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_playerid(GameSpectatorLeftMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_gamespectatorleftreason(GameSpectatorLeftMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameSpectatorLeftMessage::kGameIdFieldNumber;
const int GameSpectatorLeftMessage::kPlayerIdFieldNumber;
const int GameSpectatorLeftMessage::kGameSpectatorLeftReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSpectatorLeftMessage::GameSpectatorLeftMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameSpectatorLeftMessage)
}
GameSpectatorLeftMessage::GameSpectatorLeftMessage(const GameSpectatorLeftMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamespectatorleftreason_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(gamespectatorleftreason_));
  // @@protoc_insertion_point(copy_constructor:GameSpectatorLeftMessage)
}

void GameSpectatorLeftMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamespectatorleftreason_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(gamespectatorleftreason_));
}

GameSpectatorLeftMessage::~GameSpectatorLeftMessage() {
  // @@protoc_insertion_point(destructor:GameSpectatorLeftMessage)
  SharedDtor();
}

void GameSpectatorLeftMessage::SharedDtor() {
}

void GameSpectatorLeftMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameSpectatorLeftMessage& GameSpectatorLeftMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameSpectatorLeftMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameSpectatorLeftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSpectatorLeftMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gamespectatorleftreason_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(gamespectatorleftreason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameSpectatorLeftMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameSpectatorLeftMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .GamePlayerLeftMessage.GamePlayerLeftReason gameSpectatorLeftReason = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::GamePlayerLeftMessage_GamePlayerLeftReason_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_gamespectatorleftreason(static_cast<::GamePlayerLeftMessage_GamePlayerLeftReason>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameSpectatorLeftMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:GameSpectatorLeftMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .GamePlayerLeftMessage.GamePlayerLeftReason gameSpectatorLeftReason = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GamePlayerLeftMessage_GamePlayerLeftReason_IsValid(value)) {
            set_gamespectatorleftreason(static_cast< ::GamePlayerLeftMessage_GamePlayerLeftReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameSpectatorLeftMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameSpectatorLeftMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameSpectatorLeftMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameSpectatorLeftMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required .GamePlayerLeftMessage.GamePlayerLeftReason gameSpectatorLeftReason = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gamespectatorleftreason(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameSpectatorLeftMessage)
}

size_t GameSpectatorLeftMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameSpectatorLeftMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_gamespectatorleftreason()) {
    // required .GamePlayerLeftMessage.GamePlayerLeftReason gameSpectatorLeftReason = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamespectatorleftreason());
  }

  return total_size;
}
size_t GameSpectatorLeftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameSpectatorLeftMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required .GamePlayerLeftMessage.GamePlayerLeftReason gameSpectatorLeftReason = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamespectatorleftreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameSpectatorLeftMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameSpectatorLeftMessage*>(&from));
}

void GameSpectatorLeftMessage::MergeFrom(const GameSpectatorLeftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameSpectatorLeftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000004u) {
      gamespectatorleftreason_ = from.gamespectatorleftreason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameSpectatorLeftMessage::CopyFrom(const GameSpectatorLeftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSpectatorLeftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSpectatorLeftMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void GameSpectatorLeftMessage::Swap(GameSpectatorLeftMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSpectatorLeftMessage::InternalSwap(GameSpectatorLeftMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(playerid_, other->playerid_);
  swap(gamespectatorleftreason_, other->gamespectatorleftreason_);
}

::std::string GameSpectatorLeftMessage::GetTypeName() const {
  return "GameSpectatorLeftMessage";
}


// ===================================================================

void GameAdminChangedMessage::InitAsDefaultInstance() {
}
class GameAdminChangedMessage::HasBitSetters {
 public:
  static void set_has_gameid(GameAdminChangedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_newadminplayerid(GameAdminChangedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameAdminChangedMessage::kGameIdFieldNumber;
const int GameAdminChangedMessage::kNewAdminPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameAdminChangedMessage::GameAdminChangedMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameAdminChangedMessage)
}
GameAdminChangedMessage::GameAdminChangedMessage(const GameAdminChangedMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&newadminplayerid_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(newadminplayerid_));
  // @@protoc_insertion_point(copy_constructor:GameAdminChangedMessage)
}

void GameAdminChangedMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newadminplayerid_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(newadminplayerid_));
}

GameAdminChangedMessage::~GameAdminChangedMessage() {
  // @@protoc_insertion_point(destructor:GameAdminChangedMessage)
  SharedDtor();
}

void GameAdminChangedMessage::SharedDtor() {
}

void GameAdminChangedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameAdminChangedMessage& GameAdminChangedMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameAdminChangedMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameAdminChangedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameAdminChangedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&newadminplayerid_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(newadminplayerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameAdminChangedMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameAdminChangedMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 newAdminPlayerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_newadminplayerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameAdminChangedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:GameAdminChangedMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 newAdminPlayerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_newadminplayerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newadminplayerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameAdminChangedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameAdminChangedMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameAdminChangedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameAdminChangedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 newAdminPlayerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newadminplayerid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameAdminChangedMessage)
}

size_t GameAdminChangedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameAdminChangedMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_newadminplayerid()) {
    // required uint32 newAdminPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->newadminplayerid());
  }

  return total_size;
}
size_t GameAdminChangedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameAdminChangedMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 newAdminPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->newadminplayerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameAdminChangedMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameAdminChangedMessage*>(&from));
}

void GameAdminChangedMessage::MergeFrom(const GameAdminChangedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameAdminChangedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      newadminplayerid_ = from.newadminplayerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameAdminChangedMessage::CopyFrom(const GameAdminChangedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameAdminChangedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAdminChangedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GameAdminChangedMessage::Swap(GameAdminChangedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameAdminChangedMessage::InternalSwap(GameAdminChangedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(newadminplayerid_, other->newadminplayerid_);
}

::std::string GameAdminChangedMessage::GetTypeName() const {
  return "GameAdminChangedMessage";
}


// ===================================================================

void RemovedFromGameMessage::InitAsDefaultInstance() {
}
class RemovedFromGameMessage::HasBitSetters {
 public:
  static void set_has_gameid(RemovedFromGameMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_removedfromgamereason(RemovedFromGameMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemovedFromGameMessage::kGameIdFieldNumber;
const int RemovedFromGameMessage::kRemovedFromGameReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemovedFromGameMessage::RemovedFromGameMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemovedFromGameMessage)
}
RemovedFromGameMessage::RemovedFromGameMessage(const RemovedFromGameMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&removedfromgamereason_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(removedfromgamereason_));
  // @@protoc_insertion_point(copy_constructor:RemovedFromGameMessage)
}

void RemovedFromGameMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&removedfromgamereason_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(removedfromgamereason_));
}

RemovedFromGameMessage::~RemovedFromGameMessage() {
  // @@protoc_insertion_point(destructor:RemovedFromGameMessage)
  SharedDtor();
}

void RemovedFromGameMessage::SharedDtor() {
}

void RemovedFromGameMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemovedFromGameMessage& RemovedFromGameMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RemovedFromGameMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void RemovedFromGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RemovedFromGameMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&removedfromgamereason_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(removedfromgamereason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RemovedFromGameMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RemovedFromGameMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .RemovedFromGameMessage.RemovedFromGameReason removedFromGameReason = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::RemovedFromGameMessage_RemovedFromGameReason_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_removedfromgamereason(static_cast<::RemovedFromGameMessage_RemovedFromGameReason>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RemovedFromGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:RemovedFromGameMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .RemovedFromGameMessage.RemovedFromGameReason removedFromGameReason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RemovedFromGameMessage_RemovedFromGameReason_IsValid(value)) {
            set_removedfromgamereason(static_cast< ::RemovedFromGameMessage_RemovedFromGameReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RemovedFromGameMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RemovedFromGameMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RemovedFromGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RemovedFromGameMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required .RemovedFromGameMessage.RemovedFromGameReason removedFromGameReason = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->removedfromgamereason(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:RemovedFromGameMessage)
}

size_t RemovedFromGameMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RemovedFromGameMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_removedfromgamereason()) {
    // required .RemovedFromGameMessage.RemovedFromGameReason removedFromGameReason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->removedfromgamereason());
  }

  return total_size;
}
size_t RemovedFromGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemovedFromGameMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required .RemovedFromGameMessage.RemovedFromGameReason removedFromGameReason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->removedfromgamereason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemovedFromGameMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RemovedFromGameMessage*>(&from));
}

void RemovedFromGameMessage::MergeFrom(const RemovedFromGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemovedFromGameMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      removedfromgamereason_ = from.removedfromgamereason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemovedFromGameMessage::CopyFrom(const RemovedFromGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemovedFromGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovedFromGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RemovedFromGameMessage::Swap(RemovedFromGameMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemovedFromGameMessage::InternalSwap(RemovedFromGameMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(removedfromgamereason_, other->removedfromgamereason_);
}

::std::string RemovedFromGameMessage::GetTypeName() const {
  return "RemovedFromGameMessage";
}


// ===================================================================

void KickPlayerRequestMessage::InitAsDefaultInstance() {
}
class KickPlayerRequestMessage::HasBitSetters {
 public:
  static void set_has_gameid(KickPlayerRequestMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_playerid(KickPlayerRequestMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KickPlayerRequestMessage::kGameIdFieldNumber;
const int KickPlayerRequestMessage::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KickPlayerRequestMessage::KickPlayerRequestMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KickPlayerRequestMessage)
}
KickPlayerRequestMessage::KickPlayerRequestMessage(const KickPlayerRequestMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:KickPlayerRequestMessage)
}

void KickPlayerRequestMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
}

KickPlayerRequestMessage::~KickPlayerRequestMessage() {
  // @@protoc_insertion_point(destructor:KickPlayerRequestMessage)
  SharedDtor();
}

void KickPlayerRequestMessage::SharedDtor() {
}

void KickPlayerRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KickPlayerRequestMessage& KickPlayerRequestMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_KickPlayerRequestMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void KickPlayerRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:KickPlayerRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playerid_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KickPlayerRequestMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<KickPlayerRequestMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KickPlayerRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:KickPlayerRequestMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KickPlayerRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KickPlayerRequestMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KickPlayerRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KickPlayerRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:KickPlayerRequestMessage)
}

size_t KickPlayerRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KickPlayerRequestMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  return total_size;
}
size_t KickPlayerRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KickPlayerRequestMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KickPlayerRequestMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KickPlayerRequestMessage*>(&from));
}

void KickPlayerRequestMessage::MergeFrom(const KickPlayerRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KickPlayerRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KickPlayerRequestMessage::CopyFrom(const KickPlayerRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KickPlayerRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickPlayerRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void KickPlayerRequestMessage::Swap(KickPlayerRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KickPlayerRequestMessage::InternalSwap(KickPlayerRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(playerid_, other->playerid_);
}

::std::string KickPlayerRequestMessage::GetTypeName() const {
  return "KickPlayerRequestMessage";
}


// ===================================================================

void LeaveGameRequestMessage::InitAsDefaultInstance() {
}
class LeaveGameRequestMessage::HasBitSetters {
 public:
  static void set_has_gameid(LeaveGameRequestMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaveGameRequestMessage::kGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaveGameRequestMessage::LeaveGameRequestMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LeaveGameRequestMessage)
}
LeaveGameRequestMessage::LeaveGameRequestMessage(const LeaveGameRequestMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_ = from.gameid_;
  // @@protoc_insertion_point(copy_constructor:LeaveGameRequestMessage)
}

void LeaveGameRequestMessage::SharedCtor() {
  gameid_ = 0u;
}

LeaveGameRequestMessage::~LeaveGameRequestMessage() {
  // @@protoc_insertion_point(destructor:LeaveGameRequestMessage)
  SharedDtor();
}

void LeaveGameRequestMessage::SharedDtor() {
}

void LeaveGameRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaveGameRequestMessage& LeaveGameRequestMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LeaveGameRequestMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void LeaveGameRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:LeaveGameRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LeaveGameRequestMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LeaveGameRequestMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LeaveGameRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:LeaveGameRequestMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LeaveGameRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LeaveGameRequestMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LeaveGameRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LeaveGameRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:LeaveGameRequestMessage)
}

size_t LeaveGameRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LeaveGameRequestMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 gameId = 1;
  if (has_gameid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaveGameRequestMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LeaveGameRequestMessage*>(&from));
}

void LeaveGameRequestMessage::MergeFrom(const LeaveGameRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LeaveGameRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gameid()) {
    set_gameid(from.gameid());
  }
}

void LeaveGameRequestMessage::CopyFrom(const LeaveGameRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LeaveGameRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveGameRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void LeaveGameRequestMessage::Swap(LeaveGameRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaveGameRequestMessage::InternalSwap(LeaveGameRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
}

::std::string LeaveGameRequestMessage::GetTypeName() const {
  return "LeaveGameRequestMessage";
}


// ===================================================================

void InvitePlayerToGameMessage::InitAsDefaultInstance() {
}
class InvitePlayerToGameMessage::HasBitSetters {
 public:
  static void set_has_gameid(InvitePlayerToGameMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_playerid(InvitePlayerToGameMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InvitePlayerToGameMessage::kGameIdFieldNumber;
const int InvitePlayerToGameMessage::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InvitePlayerToGameMessage::InvitePlayerToGameMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InvitePlayerToGameMessage)
}
InvitePlayerToGameMessage::InvitePlayerToGameMessage(const InvitePlayerToGameMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:InvitePlayerToGameMessage)
}

void InvitePlayerToGameMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
}

InvitePlayerToGameMessage::~InvitePlayerToGameMessage() {
  // @@protoc_insertion_point(destructor:InvitePlayerToGameMessage)
  SharedDtor();
}

void InvitePlayerToGameMessage::SharedDtor() {
}

void InvitePlayerToGameMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvitePlayerToGameMessage& InvitePlayerToGameMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InvitePlayerToGameMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void InvitePlayerToGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:InvitePlayerToGameMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playerid_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InvitePlayerToGameMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InvitePlayerToGameMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InvitePlayerToGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:InvitePlayerToGameMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InvitePlayerToGameMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InvitePlayerToGameMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InvitePlayerToGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InvitePlayerToGameMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:InvitePlayerToGameMessage)
}

size_t InvitePlayerToGameMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:InvitePlayerToGameMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  return total_size;
}
size_t InvitePlayerToGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InvitePlayerToGameMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvitePlayerToGameMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InvitePlayerToGameMessage*>(&from));
}

void InvitePlayerToGameMessage::MergeFrom(const InvitePlayerToGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InvitePlayerToGameMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InvitePlayerToGameMessage::CopyFrom(const InvitePlayerToGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InvitePlayerToGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitePlayerToGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void InvitePlayerToGameMessage::Swap(InvitePlayerToGameMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InvitePlayerToGameMessage::InternalSwap(InvitePlayerToGameMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(playerid_, other->playerid_);
}

::std::string InvitePlayerToGameMessage::GetTypeName() const {
  return "InvitePlayerToGameMessage";
}


// ===================================================================

void InviteNotifyMessage::InitAsDefaultInstance() {
}
class InviteNotifyMessage::HasBitSetters {
 public:
  static void set_has_gameid(InviteNotifyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_playeridwho(InviteNotifyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_playeridbywhom(InviteNotifyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InviteNotifyMessage::kGameIdFieldNumber;
const int InviteNotifyMessage::kPlayerIdWhoFieldNumber;
const int InviteNotifyMessage::kPlayerIdByWhomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InviteNotifyMessage::InviteNotifyMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InviteNotifyMessage)
}
InviteNotifyMessage::InviteNotifyMessage(const InviteNotifyMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playeridbywhom_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(playeridbywhom_));
  // @@protoc_insertion_point(copy_constructor:InviteNotifyMessage)
}

void InviteNotifyMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playeridbywhom_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(playeridbywhom_));
}

InviteNotifyMessage::~InviteNotifyMessage() {
  // @@protoc_insertion_point(destructor:InviteNotifyMessage)
  SharedDtor();
}

void InviteNotifyMessage::SharedDtor() {
}

void InviteNotifyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InviteNotifyMessage& InviteNotifyMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InviteNotifyMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void InviteNotifyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:InviteNotifyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playeridbywhom_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(playeridbywhom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InviteNotifyMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InviteNotifyMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerIdWho = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_playeridwho(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerIdByWhom = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_playeridbywhom(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InviteNotifyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:InviteNotifyMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerIdWho = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_playeridwho(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playeridwho_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerIdByWhom = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_playeridbywhom(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playeridbywhom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InviteNotifyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InviteNotifyMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InviteNotifyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InviteNotifyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerIdWho = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playeridwho(), output);
  }

  // required uint32 playerIdByWhom = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playeridbywhom(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:InviteNotifyMessage)
}

size_t InviteNotifyMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:InviteNotifyMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playeridwho()) {
    // required uint32 playerIdWho = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playeridwho());
  }

  if (has_playeridbywhom()) {
    // required uint32 playerIdByWhom = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playeridbywhom());
  }

  return total_size;
}
size_t InviteNotifyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InviteNotifyMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerIdWho = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playeridwho());

    // required uint32 playerIdByWhom = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playeridbywhom());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InviteNotifyMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InviteNotifyMessage*>(&from));
}

void InviteNotifyMessage::MergeFrom(const InviteNotifyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InviteNotifyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playeridwho_ = from.playeridwho_;
    }
    if (cached_has_bits & 0x00000004u) {
      playeridbywhom_ = from.playeridbywhom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InviteNotifyMessage::CopyFrom(const InviteNotifyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InviteNotifyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteNotifyMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void InviteNotifyMessage::Swap(InviteNotifyMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InviteNotifyMessage::InternalSwap(InviteNotifyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(playeridwho_, other->playeridwho_);
  swap(playeridbywhom_, other->playeridbywhom_);
}

::std::string InviteNotifyMessage::GetTypeName() const {
  return "InviteNotifyMessage";
}


// ===================================================================

void RejectGameInvitationMessage::InitAsDefaultInstance() {
}
class RejectGameInvitationMessage::HasBitSetters {
 public:
  static void set_has_gameid(RejectGameInvitationMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_myrejectreason(RejectGameInvitationMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RejectGameInvitationMessage::kGameIdFieldNumber;
const int RejectGameInvitationMessage::kMyRejectReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RejectGameInvitationMessage::RejectGameInvitationMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RejectGameInvitationMessage)
}
RejectGameInvitationMessage::RejectGameInvitationMessage(const RejectGameInvitationMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&myrejectreason_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(myrejectreason_));
  // @@protoc_insertion_point(copy_constructor:RejectGameInvitationMessage)
}

void RejectGameInvitationMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&myrejectreason_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(myrejectreason_));
}

RejectGameInvitationMessage::~RejectGameInvitationMessage() {
  // @@protoc_insertion_point(destructor:RejectGameInvitationMessage)
  SharedDtor();
}

void RejectGameInvitationMessage::SharedDtor() {
}

void RejectGameInvitationMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RejectGameInvitationMessage& RejectGameInvitationMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RejectGameInvitationMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void RejectGameInvitationMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RejectGameInvitationMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&myrejectreason_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(myrejectreason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RejectGameInvitationMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RejectGameInvitationMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .RejectGameInvitationMessage.RejectGameInvReason myRejectReason = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::RejectGameInvitationMessage_RejectGameInvReason_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_myrejectreason(static_cast<::RejectGameInvitationMessage_RejectGameInvReason>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RejectGameInvitationMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:RejectGameInvitationMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .RejectGameInvitationMessage.RejectGameInvReason myRejectReason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RejectGameInvitationMessage_RejectGameInvReason_IsValid(value)) {
            set_myrejectreason(static_cast< ::RejectGameInvitationMessage_RejectGameInvReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RejectGameInvitationMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RejectGameInvitationMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RejectGameInvitationMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RejectGameInvitationMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required .RejectGameInvitationMessage.RejectGameInvReason myRejectReason = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->myrejectreason(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:RejectGameInvitationMessage)
}

size_t RejectGameInvitationMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RejectGameInvitationMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_myrejectreason()) {
    // required .RejectGameInvitationMessage.RejectGameInvReason myRejectReason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->myrejectreason());
  }

  return total_size;
}
size_t RejectGameInvitationMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RejectGameInvitationMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required .RejectGameInvitationMessage.RejectGameInvReason myRejectReason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->myrejectreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RejectGameInvitationMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RejectGameInvitationMessage*>(&from));
}

void RejectGameInvitationMessage::MergeFrom(const RejectGameInvitationMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RejectGameInvitationMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      myrejectreason_ = from.myrejectreason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RejectGameInvitationMessage::CopyFrom(const RejectGameInvitationMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RejectGameInvitationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejectGameInvitationMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RejectGameInvitationMessage::Swap(RejectGameInvitationMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RejectGameInvitationMessage::InternalSwap(RejectGameInvitationMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(myrejectreason_, other->myrejectreason_);
}

::std::string RejectGameInvitationMessage::GetTypeName() const {
  return "RejectGameInvitationMessage";
}


// ===================================================================

void RejectInvNotifyMessage::InitAsDefaultInstance() {
}
class RejectInvNotifyMessage::HasBitSetters {
 public:
  static void set_has_gameid(RejectInvNotifyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_playerid(RejectInvNotifyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_playerrejectreason(RejectInvNotifyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RejectInvNotifyMessage::kGameIdFieldNumber;
const int RejectInvNotifyMessage::kPlayerIdFieldNumber;
const int RejectInvNotifyMessage::kPlayerRejectReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RejectInvNotifyMessage::RejectInvNotifyMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RejectInvNotifyMessage)
}
RejectInvNotifyMessage::RejectInvNotifyMessage(const RejectInvNotifyMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerrejectreason_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(playerrejectreason_));
  // @@protoc_insertion_point(copy_constructor:RejectInvNotifyMessage)
}

void RejectInvNotifyMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerrejectreason_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(playerrejectreason_));
}

RejectInvNotifyMessage::~RejectInvNotifyMessage() {
  // @@protoc_insertion_point(destructor:RejectInvNotifyMessage)
  SharedDtor();
}

void RejectInvNotifyMessage::SharedDtor() {
}

void RejectInvNotifyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RejectInvNotifyMessage& RejectInvNotifyMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RejectInvNotifyMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void RejectInvNotifyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RejectInvNotifyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playerrejectreason_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(playerrejectreason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RejectInvNotifyMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RejectInvNotifyMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .RejectGameInvitationMessage.RejectGameInvReason playerRejectReason = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::RejectGameInvitationMessage_RejectGameInvReason_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_playerrejectreason(static_cast<::RejectGameInvitationMessage_RejectGameInvReason>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RejectInvNotifyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:RejectInvNotifyMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .RejectGameInvitationMessage.RejectGameInvReason playerRejectReason = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RejectGameInvitationMessage_RejectGameInvReason_IsValid(value)) {
            set_playerrejectreason(static_cast< ::RejectGameInvitationMessage_RejectGameInvReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RejectInvNotifyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RejectInvNotifyMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RejectInvNotifyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RejectInvNotifyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required .RejectGameInvitationMessage.RejectGameInvReason playerRejectReason = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->playerrejectreason(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:RejectInvNotifyMessage)
}

size_t RejectInvNotifyMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RejectInvNotifyMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_playerrejectreason()) {
    // required .RejectGameInvitationMessage.RejectGameInvReason playerRejectReason = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->playerrejectreason());
  }

  return total_size;
}
size_t RejectInvNotifyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RejectInvNotifyMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required .RejectGameInvitationMessage.RejectGameInvReason playerRejectReason = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->playerrejectreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RejectInvNotifyMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RejectInvNotifyMessage*>(&from));
}

void RejectInvNotifyMessage::MergeFrom(const RejectInvNotifyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RejectInvNotifyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000004u) {
      playerrejectreason_ = from.playerrejectreason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RejectInvNotifyMessage::CopyFrom(const RejectInvNotifyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RejectInvNotifyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejectInvNotifyMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void RejectInvNotifyMessage::Swap(RejectInvNotifyMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RejectInvNotifyMessage::InternalSwap(RejectInvNotifyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(playerid_, other->playerid_);
  swap(playerrejectreason_, other->playerrejectreason_);
}

::std::string RejectInvNotifyMessage::GetTypeName() const {
  return "RejectInvNotifyMessage";
}


// ===================================================================

void StartEventMessage::InitAsDefaultInstance() {
}
class StartEventMessage::HasBitSetters {
 public:
  static void set_has_gameid(StartEventMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_starteventtype(StartEventMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_fillwithcomputerplayers(StartEventMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartEventMessage::kGameIdFieldNumber;
const int StartEventMessage::kStartEventTypeFieldNumber;
const int StartEventMessage::kFillWithComputerPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartEventMessage::StartEventMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StartEventMessage)
}
StartEventMessage::StartEventMessage(const StartEventMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&fillwithcomputerplayers_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(fillwithcomputerplayers_));
  // @@protoc_insertion_point(copy_constructor:StartEventMessage)
}

void StartEventMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fillwithcomputerplayers_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(fillwithcomputerplayers_));
}

StartEventMessage::~StartEventMessage() {
  // @@protoc_insertion_point(destructor:StartEventMessage)
  SharedDtor();
}

void StartEventMessage::SharedDtor() {
}

void StartEventMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartEventMessage& StartEventMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StartEventMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void StartEventMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StartEventMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fillwithcomputerplayers_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(fillwithcomputerplayers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StartEventMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StartEventMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .StartEventMessage.StartEventType startEventType = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::StartEventMessage_StartEventType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_starteventtype(static_cast<::StartEventMessage_StartEventType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool fillWithComputerPlayers = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_fillwithcomputerplayers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StartEventMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:StartEventMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .StartEventMessage.StartEventType startEventType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StartEventMessage_StartEventType_IsValid(value)) {
            set_starteventtype(static_cast< ::StartEventMessage_StartEventType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fillWithComputerPlayers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_fillwithcomputerplayers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fillwithcomputerplayers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StartEventMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StartEventMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StartEventMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StartEventMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required .StartEventMessage.StartEventType startEventType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->starteventtype(), output);
  }

  // optional bool fillWithComputerPlayers = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->fillwithcomputerplayers(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:StartEventMessage)
}

size_t StartEventMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:StartEventMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_starteventtype()) {
    // required .StartEventMessage.StartEventType startEventType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->starteventtype());
  }

  return total_size;
}
size_t StartEventMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartEventMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required .StartEventMessage.StartEventType startEventType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->starteventtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool fillWithComputerPlayers = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartEventMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StartEventMessage*>(&from));
}

void StartEventMessage::MergeFrom(const StartEventMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartEventMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      starteventtype_ = from.starteventtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      fillwithcomputerplayers_ = from.fillwithcomputerplayers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StartEventMessage::CopyFrom(const StartEventMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartEventMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartEventMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void StartEventMessage::Swap(StartEventMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartEventMessage::InternalSwap(StartEventMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(starteventtype_, other->starteventtype_);
  swap(fillwithcomputerplayers_, other->fillwithcomputerplayers_);
}

::std::string StartEventMessage::GetTypeName() const {
  return "StartEventMessage";
}


// ===================================================================

void StartEventAckMessage::InitAsDefaultInstance() {
}
class StartEventAckMessage::HasBitSetters {
 public:
  static void set_has_gameid(StartEventAckMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartEventAckMessage::kGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartEventAckMessage::StartEventAckMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StartEventAckMessage)
}
StartEventAckMessage::StartEventAckMessage(const StartEventAckMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_ = from.gameid_;
  // @@protoc_insertion_point(copy_constructor:StartEventAckMessage)
}

void StartEventAckMessage::SharedCtor() {
  gameid_ = 0u;
}

StartEventAckMessage::~StartEventAckMessage() {
  // @@protoc_insertion_point(destructor:StartEventAckMessage)
  SharedDtor();
}

void StartEventAckMessage::SharedDtor() {
}

void StartEventAckMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartEventAckMessage& StartEventAckMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StartEventAckMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void StartEventAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StartEventAckMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StartEventAckMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StartEventAckMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StartEventAckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:StartEventAckMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StartEventAckMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StartEventAckMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StartEventAckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StartEventAckMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:StartEventAckMessage)
}

size_t StartEventAckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartEventAckMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 gameId = 1;
  if (has_gameid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartEventAckMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StartEventAckMessage*>(&from));
}

void StartEventAckMessage::MergeFrom(const StartEventAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartEventAckMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gameid()) {
    set_gameid(from.gameid());
  }
}

void StartEventAckMessage::CopyFrom(const StartEventAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartEventAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartEventAckMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void StartEventAckMessage::Swap(StartEventAckMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartEventAckMessage::InternalSwap(StartEventAckMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
}

::std::string StartEventAckMessage::GetTypeName() const {
  return "StartEventAckMessage";
}


// ===================================================================

void GameStartInitialMessage::InitAsDefaultInstance() {
}
class GameStartInitialMessage::HasBitSetters {
 public:
  static void set_has_gameid(GameStartInitialMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_startdealerplayerid(GameStartInitialMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameStartInitialMessage::kGameIdFieldNumber;
const int GameStartInitialMessage::kStartDealerPlayerIdFieldNumber;
const int GameStartInitialMessage::kPlayerSeatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameStartInitialMessage::GameStartInitialMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameStartInitialMessage)
}
GameStartInitialMessage::GameStartInitialMessage(const GameStartInitialMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      playerseats_(from.playerseats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&startdealerplayerid_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(startdealerplayerid_));
  // @@protoc_insertion_point(copy_constructor:GameStartInitialMessage)
}

void GameStartInitialMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startdealerplayerid_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(startdealerplayerid_));
}

GameStartInitialMessage::~GameStartInitialMessage() {
  // @@protoc_insertion_point(destructor:GameStartInitialMessage)
  SharedDtor();
}

void GameStartInitialMessage::SharedDtor() {
}

void GameStartInitialMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameStartInitialMessage& GameStartInitialMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameStartInitialMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameStartInitialMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameStartInitialMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerseats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&startdealerplayerid_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(startdealerplayerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameStartInitialMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameStartInitialMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 startDealerPlayerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_startdealerplayerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 playerSeats = 3 [packed = true];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_playerseats();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          msg->add_playerseats(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameStartInitialMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:GameStartInitialMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 startDealerPlayerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_startdealerplayerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startdealerplayerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 playerSeats = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_playerseats())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_playerseats())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameStartInitialMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameStartInitialMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameStartInitialMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameStartInitialMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 startDealerPlayerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->startdealerplayerid(), output);
  }

  // repeated uint32 playerSeats = 3 [packed = true];
  if (this->playerseats_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_playerseats_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->playerseats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->playerseats(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameStartInitialMessage)
}

size_t GameStartInitialMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameStartInitialMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_startdealerplayerid()) {
    // required uint32 startDealerPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startdealerplayerid());
  }

  return total_size;
}
size_t GameStartInitialMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameStartInitialMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 startDealerPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startdealerplayerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 playerSeats = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->playerseats_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _playerseats_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameStartInitialMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameStartInitialMessage*>(&from));
}

void GameStartInitialMessage::MergeFrom(const GameStartInitialMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameStartInitialMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerseats_.MergeFrom(from.playerseats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      startdealerplayerid_ = from.startdealerplayerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameStartInitialMessage::CopyFrom(const GameStartInitialMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameStartInitialMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartInitialMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GameStartInitialMessage::Swap(GameStartInitialMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameStartInitialMessage::InternalSwap(GameStartInitialMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playerseats_.InternalSwap(&other->playerseats_);
  swap(gameid_, other->gameid_);
  swap(startdealerplayerid_, other->startdealerplayerid_);
}

::std::string GameStartInitialMessage::GetTypeName() const {
  return "GameStartInitialMessage";
}


// ===================================================================

void GameStartRejoinMessage_RejoinPlayerData::InitAsDefaultInstance() {
}
class GameStartRejoinMessage_RejoinPlayerData::HasBitSetters {
 public:
  static void set_has_playerid(GameStartRejoinMessage_RejoinPlayerData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_playermoney(GameStartRejoinMessage_RejoinPlayerData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameStartRejoinMessage_RejoinPlayerData::kPlayerIdFieldNumber;
const int GameStartRejoinMessage_RejoinPlayerData::kPlayerMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameStartRejoinMessage_RejoinPlayerData::GameStartRejoinMessage_RejoinPlayerData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameStartRejoinMessage.RejoinPlayerData)
}
GameStartRejoinMessage_RejoinPlayerData::GameStartRejoinMessage_RejoinPlayerData(const GameStartRejoinMessage_RejoinPlayerData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playermoney_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(playermoney_));
  // @@protoc_insertion_point(copy_constructor:GameStartRejoinMessage.RejoinPlayerData)
}

void GameStartRejoinMessage_RejoinPlayerData::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playermoney_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(playermoney_));
}

GameStartRejoinMessage_RejoinPlayerData::~GameStartRejoinMessage_RejoinPlayerData() {
  // @@protoc_insertion_point(destructor:GameStartRejoinMessage.RejoinPlayerData)
  SharedDtor();
}

void GameStartRejoinMessage_RejoinPlayerData::SharedDtor() {
}

void GameStartRejoinMessage_RejoinPlayerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameStartRejoinMessage_RejoinPlayerData& GameStartRejoinMessage_RejoinPlayerData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameStartRejoinMessage_RejoinPlayerData_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameStartRejoinMessage_RejoinPlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:GameStartRejoinMessage.RejoinPlayerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playermoney_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(playermoney_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameStartRejoinMessage_RejoinPlayerData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameStartRejoinMessage_RejoinPlayerData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerMoney = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_playermoney(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameStartRejoinMessage_RejoinPlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:GameStartRejoinMessage.RejoinPlayerData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerMoney = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_playermoney(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playermoney_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameStartRejoinMessage.RejoinPlayerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameStartRejoinMessage.RejoinPlayerData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameStartRejoinMessage_RejoinPlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameStartRejoinMessage.RejoinPlayerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 playerMoney = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playermoney(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameStartRejoinMessage.RejoinPlayerData)
}

size_t GameStartRejoinMessage_RejoinPlayerData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameStartRejoinMessage.RejoinPlayerData)
  size_t total_size = 0;

  if (has_playerid()) {
    // required uint32 playerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_playermoney()) {
    // required uint32 playerMoney = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playermoney());
  }

  return total_size;
}
size_t GameStartRejoinMessage_RejoinPlayerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameStartRejoinMessage.RejoinPlayerData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required uint32 playerMoney = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playermoney());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameStartRejoinMessage_RejoinPlayerData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameStartRejoinMessage_RejoinPlayerData*>(&from));
}

void GameStartRejoinMessage_RejoinPlayerData::MergeFrom(const GameStartRejoinMessage_RejoinPlayerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameStartRejoinMessage.RejoinPlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playermoney_ = from.playermoney_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameStartRejoinMessage_RejoinPlayerData::CopyFrom(const GameStartRejoinMessage_RejoinPlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameStartRejoinMessage.RejoinPlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartRejoinMessage_RejoinPlayerData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GameStartRejoinMessage_RejoinPlayerData::Swap(GameStartRejoinMessage_RejoinPlayerData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameStartRejoinMessage_RejoinPlayerData::InternalSwap(GameStartRejoinMessage_RejoinPlayerData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(playerid_, other->playerid_);
  swap(playermoney_, other->playermoney_);
}

::std::string GameStartRejoinMessage_RejoinPlayerData::GetTypeName() const {
  return "GameStartRejoinMessage.RejoinPlayerData";
}


// ===================================================================

void GameStartRejoinMessage::InitAsDefaultInstance() {
}
class GameStartRejoinMessage::HasBitSetters {
 public:
  static void set_has_gameid(GameStartRejoinMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_startdealerplayerid(GameStartRejoinMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_handnum(GameStartRejoinMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameStartRejoinMessage::kGameIdFieldNumber;
const int GameStartRejoinMessage::kStartDealerPlayerIdFieldNumber;
const int GameStartRejoinMessage::kHandNumFieldNumber;
const int GameStartRejoinMessage::kRejoinPlayerDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameStartRejoinMessage::GameStartRejoinMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameStartRejoinMessage)
}
GameStartRejoinMessage::GameStartRejoinMessage(const GameStartRejoinMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      rejoinplayerdata_(from.rejoinplayerdata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&handnum_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(handnum_));
  // @@protoc_insertion_point(copy_constructor:GameStartRejoinMessage)
}

void GameStartRejoinMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GameStartRejoinMessage_pokerth_2eproto.base);
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&handnum_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(handnum_));
}

GameStartRejoinMessage::~GameStartRejoinMessage() {
  // @@protoc_insertion_point(destructor:GameStartRejoinMessage)
  SharedDtor();
}

void GameStartRejoinMessage::SharedDtor() {
}

void GameStartRejoinMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameStartRejoinMessage& GameStartRejoinMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GameStartRejoinMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void GameStartRejoinMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameStartRejoinMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rejoinplayerdata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&handnum_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(handnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameStartRejoinMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GameStartRejoinMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 startDealerPlayerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_startdealerplayerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 handNum = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_handnum(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .GameStartRejoinMessage.RejoinPlayerData rejoinPlayerData = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::GameStartRejoinMessage_RejoinPlayerData::_InternalParse;
          object = msg->add_rejoinplayerdata();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameStartRejoinMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:GameStartRejoinMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 startDealerPlayerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_startdealerplayerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startdealerplayerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 handNum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_handnum(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GameStartRejoinMessage.RejoinPlayerData rejoinPlayerData = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rejoinplayerdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameStartRejoinMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameStartRejoinMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameStartRejoinMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameStartRejoinMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 startDealerPlayerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->startdealerplayerid(), output);
  }

  // required uint32 handNum = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->handnum(), output);
  }

  // repeated .GameStartRejoinMessage.RejoinPlayerData rejoinPlayerData = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rejoinplayerdata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4,
      this->rejoinplayerdata(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:GameStartRejoinMessage)
}

size_t GameStartRejoinMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameStartRejoinMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_startdealerplayerid()) {
    // required uint32 startDealerPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startdealerplayerid());
  }

  if (has_handnum()) {
    // required uint32 handNum = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->handnum());
  }

  return total_size;
}
size_t GameStartRejoinMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameStartRejoinMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 startDealerPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->startdealerplayerid());

    // required uint32 handNum = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->handnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameStartRejoinMessage.RejoinPlayerData rejoinPlayerData = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->rejoinplayerdata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rejoinplayerdata(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameStartRejoinMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameStartRejoinMessage*>(&from));
}

void GameStartRejoinMessage::MergeFrom(const GameStartRejoinMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameStartRejoinMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rejoinplayerdata_.MergeFrom(from.rejoinplayerdata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      startdealerplayerid_ = from.startdealerplayerid_;
    }
    if (cached_has_bits & 0x00000004u) {
      handnum_ = from.handnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameStartRejoinMessage::CopyFrom(const GameStartRejoinMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameStartRejoinMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartRejoinMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->rejoinplayerdata())) return false;
  return true;
}

void GameStartRejoinMessage::Swap(GameStartRejoinMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameStartRejoinMessage::InternalSwap(GameStartRejoinMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&rejoinplayerdata_)->InternalSwap(CastToBase(&other->rejoinplayerdata_));
  swap(gameid_, other->gameid_);
  swap(startdealerplayerid_, other->startdealerplayerid_);
  swap(handnum_, other->handnum_);
}

::std::string GameStartRejoinMessage::GetTypeName() const {
  return "GameStartRejoinMessage";
}


// ===================================================================

void HandStartMessage_PlainCards::InitAsDefaultInstance() {
}
class HandStartMessage_PlainCards::HasBitSetters {
 public:
  static void set_has_plaincard1(HandStartMessage_PlainCards* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_plaincard2(HandStartMessage_PlainCards* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HandStartMessage_PlainCards::kPlainCard1FieldNumber;
const int HandStartMessage_PlainCards::kPlainCard2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HandStartMessage_PlainCards::HandStartMessage_PlainCards()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HandStartMessage.PlainCards)
}
HandStartMessage_PlainCards::HandStartMessage_PlainCards(const HandStartMessage_PlainCards& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&plaincard1_, &from.plaincard1_,
    static_cast<size_t>(reinterpret_cast<char*>(&plaincard2_) -
    reinterpret_cast<char*>(&plaincard1_)) + sizeof(plaincard2_));
  // @@protoc_insertion_point(copy_constructor:HandStartMessage.PlainCards)
}

void HandStartMessage_PlainCards::SharedCtor() {
  ::memset(&plaincard1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&plaincard2_) -
      reinterpret_cast<char*>(&plaincard1_)) + sizeof(plaincard2_));
}

HandStartMessage_PlainCards::~HandStartMessage_PlainCards() {
  // @@protoc_insertion_point(destructor:HandStartMessage.PlainCards)
  SharedDtor();
}

void HandStartMessage_PlainCards::SharedDtor() {
}

void HandStartMessage_PlainCards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HandStartMessage_PlainCards& HandStartMessage_PlainCards::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HandStartMessage_PlainCards_pokerth_2eproto.base);
  return *internal_default_instance();
}


void HandStartMessage_PlainCards::Clear() {
// @@protoc_insertion_point(message_clear_start:HandStartMessage.PlainCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&plaincard1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&plaincard2_) -
        reinterpret_cast<char*>(&plaincard1_)) + sizeof(plaincard2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HandStartMessage_PlainCards::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HandStartMessage_PlainCards*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 plainCard1 = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_plaincard1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 plainCard2 = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_plaincard2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HandStartMessage_PlainCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:HandStartMessage.PlainCards)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 plainCard1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_plaincard1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plaincard1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 plainCard2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_plaincard2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plaincard2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HandStartMessage.PlainCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HandStartMessage.PlainCards)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HandStartMessage_PlainCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HandStartMessage.PlainCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 plainCard1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plaincard1(), output);
  }

  // required uint32 plainCard2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->plaincard2(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:HandStartMessage.PlainCards)
}

size_t HandStartMessage_PlainCards::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HandStartMessage.PlainCards)
  size_t total_size = 0;

  if (has_plaincard1()) {
    // required uint32 plainCard1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->plaincard1());
  }

  if (has_plaincard2()) {
    // required uint32 plainCard2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->plaincard2());
  }

  return total_size;
}
size_t HandStartMessage_PlainCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HandStartMessage.PlainCards)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 plainCard1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->plaincard1());

    // required uint32 plainCard2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->plaincard2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HandStartMessage_PlainCards::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HandStartMessage_PlainCards*>(&from));
}

void HandStartMessage_PlainCards::MergeFrom(const HandStartMessage_PlainCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HandStartMessage.PlainCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      plaincard1_ = from.plaincard1_;
    }
    if (cached_has_bits & 0x00000002u) {
      plaincard2_ = from.plaincard2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HandStartMessage_PlainCards::CopyFrom(const HandStartMessage_PlainCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HandStartMessage.PlainCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandStartMessage_PlainCards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void HandStartMessage_PlainCards::Swap(HandStartMessage_PlainCards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HandStartMessage_PlainCards::InternalSwap(HandStartMessage_PlainCards* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(plaincard1_, other->plaincard1_);
  swap(plaincard2_, other->plaincard2_);
}

::std::string HandStartMessage_PlainCards::GetTypeName() const {
  return "HandStartMessage.PlainCards";
}


// ===================================================================

void HandStartMessage::InitAsDefaultInstance() {
  ::_HandStartMessage_default_instance_._instance.get_mutable()->plaincards_ = const_cast< ::HandStartMessage_PlainCards*>(
      ::HandStartMessage_PlainCards::internal_default_instance());
}
class HandStartMessage::HasBitSetters {
 public:
  static void set_has_gameid(HandStartMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::HandStartMessage_PlainCards& plaincards(const HandStartMessage* msg);
  static void set_has_plaincards(HandStartMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_encryptedcards(HandStartMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_smallblind(HandStartMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_dealerplayerid(HandStartMessage* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

const ::HandStartMessage_PlainCards&
HandStartMessage::HasBitSetters::plaincards(const HandStartMessage* msg) {
  return *msg->plaincards_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HandStartMessage::kGameIdFieldNumber;
const int HandStartMessage::kPlainCardsFieldNumber;
const int HandStartMessage::kEncryptedCardsFieldNumber;
const int HandStartMessage::kSmallBlindFieldNumber;
const int HandStartMessage::kSeatStatesFieldNumber;
const int HandStartMessage::kDealerPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HandStartMessage::HandStartMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HandStartMessage)
}
HandStartMessage::HandStartMessage(const HandStartMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      seatstates_(from.seatstates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encryptedcards_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_encryptedcards()) {
    encryptedcards_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encryptedcards_);
  }
  if (from.has_plaincards()) {
    plaincards_ = new ::HandStartMessage_PlainCards(*from.plaincards_);
  } else {
    plaincards_ = nullptr;
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dealerplayerid_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(dealerplayerid_));
  // @@protoc_insertion_point(copy_constructor:HandStartMessage)
}

void HandStartMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HandStartMessage_pokerth_2eproto.base);
  encryptedcards_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&plaincards_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dealerplayerid_) -
      reinterpret_cast<char*>(&plaincards_)) + sizeof(dealerplayerid_));
}

HandStartMessage::~HandStartMessage() {
  // @@protoc_insertion_point(destructor:HandStartMessage)
  SharedDtor();
}

void HandStartMessage::SharedDtor() {
  encryptedcards_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete plaincards_;
}

void HandStartMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HandStartMessage& HandStartMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HandStartMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void HandStartMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:HandStartMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seatstates_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      encryptedcards_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(plaincards_ != nullptr);
      plaincards_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dealerplayerid_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(dealerplayerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HandStartMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HandStartMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .HandStartMessage.PlainCards plainCards = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::HandStartMessage_PlainCards::_InternalParse;
        object = msg->mutable_plaincards();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bytes encryptedCards = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_encryptedcards();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // required uint32 smallBlind = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_smallblind(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .NetPlayerState seatStates = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 40) {
          do {
            ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
            if (!::NetPlayerState_IsValid(val)) {
              ::google::protobuf::internal::WriteVarint(5, val, msg->mutable_unknown_fields());
              break;
            }
            msg->add_seatstates(static_cast<::NetPlayerState>(val));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetEnumValidator(::NetPlayerState_IsValid, msg->mutable_unknown_fields(), 5);
        parser_till_end = ::google::protobuf::internal::PackedValidEnumParserLite;
        object = msg->mutable_seatstates();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 dealerPlayerId = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_dealerplayerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HandStartMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:HandStartMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .HandStartMessage.PlainCards plainCards = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_plaincards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes encryptedCards = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encryptedcards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 smallBlind = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_smallblind(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &smallblind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NetPlayerState seatStates = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetPlayerState_IsValid(value)) {
            add_seatstates(static_cast< ::NetPlayerState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 5,
                 ::NetPlayerState_IsValid,
                 &unknown_fields_stream,
                 this->mutable_seatstates())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dealerPlayerId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_dealerplayerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dealerplayerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HandStartMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HandStartMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HandStartMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HandStartMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // optional .HandStartMessage.PlainCards plainCards = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, HasBitSetters::plaincards(this), output);
  }

  // optional bytes encryptedCards = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->encryptedcards(), output);
  }

  // required uint32 smallBlind = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->smallblind(), output);
  }

  // repeated .NetPlayerState seatStates = 5;
  for (int i = 0, n = this->seatstates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->seatstates(i), output);
  }

  // optional uint32 dealerPlayerId = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dealerplayerid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:HandStartMessage)
}

size_t HandStartMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HandStartMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_smallblind()) {
    // required uint32 smallBlind = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->smallblind());
  }

  return total_size;
}
size_t HandStartMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HandStartMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 smallBlind = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->smallblind());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NetPlayerState seatStates = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->seatstates_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->seatstates(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes encryptedCards = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encryptedcards());
    }

    // optional .HandStartMessage.PlainCards plainCards = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *plaincards_);
    }

  }
  // optional uint32 dealerPlayerId = 6;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dealerplayerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HandStartMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HandStartMessage*>(&from));
}

void HandStartMessage::MergeFrom(const HandStartMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HandStartMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  seatstates_.MergeFrom(from.seatstates_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      encryptedcards_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encryptedcards_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_plaincards()->::HandStartMessage_PlainCards::MergeFrom(from.plaincards());
    }
    if (cached_has_bits & 0x00000004u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000008u) {
      smallblind_ = from.smallblind_;
    }
    if (cached_has_bits & 0x00000010u) {
      dealerplayerid_ = from.dealerplayerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HandStartMessage::CopyFrom(const HandStartMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HandStartMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandStartMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (has_plaincards()) {
    if (!this->plaincards_->IsInitialized()) return false;
  }
  return true;
}

void HandStartMessage::Swap(HandStartMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HandStartMessage::InternalSwap(HandStartMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  seatstates_.InternalSwap(&other->seatstates_);
  encryptedcards_.Swap(&other->encryptedcards_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(plaincards_, other->plaincards_);
  swap(gameid_, other->gameid_);
  swap(smallblind_, other->smallblind_);
  swap(dealerplayerid_, other->dealerplayerid_);
}

::std::string HandStartMessage::GetTypeName() const {
  return "HandStartMessage";
}


// ===================================================================

void PlayersTurnMessage::InitAsDefaultInstance() {
}
class PlayersTurnMessage::HasBitSetters {
 public:
  static void set_has_gameid(PlayersTurnMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_playerid(PlayersTurnMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_gamestate(PlayersTurnMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayersTurnMessage::kGameIdFieldNumber;
const int PlayersTurnMessage::kPlayerIdFieldNumber;
const int PlayersTurnMessage::kGameStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayersTurnMessage::PlayersTurnMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayersTurnMessage)
}
PlayersTurnMessage::PlayersTurnMessage(const PlayersTurnMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamestate_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(gamestate_));
  // @@protoc_insertion_point(copy_constructor:PlayersTurnMessage)
}

void PlayersTurnMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamestate_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(gamestate_));
}

PlayersTurnMessage::~PlayersTurnMessage() {
  // @@protoc_insertion_point(destructor:PlayersTurnMessage)
  SharedDtor();
}

void PlayersTurnMessage::SharedDtor() {
}

void PlayersTurnMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayersTurnMessage& PlayersTurnMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayersTurnMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void PlayersTurnMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayersTurnMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gamestate_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(gamestate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayersTurnMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayersTurnMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .NetGameState gameState = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::NetGameState_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_gamestate(static_cast<::NetGameState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayersTurnMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PlayersTurnMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NetGameState gameState = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetGameState_IsValid(value)) {
            set_gamestate(static_cast< ::NetGameState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayersTurnMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayersTurnMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayersTurnMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayersTurnMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required .NetGameState gameState = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gamestate(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PlayersTurnMessage)
}

size_t PlayersTurnMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayersTurnMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_gamestate()) {
    // required .NetGameState gameState = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());
  }

  return total_size;
}
size_t PlayersTurnMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayersTurnMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required .NetGameState gameState = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayersTurnMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayersTurnMessage*>(&from));
}

void PlayersTurnMessage::MergeFrom(const PlayersTurnMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayersTurnMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000004u) {
      gamestate_ = from.gamestate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayersTurnMessage::CopyFrom(const PlayersTurnMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayersTurnMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayersTurnMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void PlayersTurnMessage::Swap(PlayersTurnMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayersTurnMessage::InternalSwap(PlayersTurnMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(playerid_, other->playerid_);
  swap(gamestate_, other->gamestate_);
}

::std::string PlayersTurnMessage::GetTypeName() const {
  return "PlayersTurnMessage";
}


// ===================================================================

void MyActionRequestMessage::InitAsDefaultInstance() {
}
class MyActionRequestMessage::HasBitSetters {
 public:
  static void set_has_gameid(MyActionRequestMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_handnum(MyActionRequestMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_gamestate(MyActionRequestMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_myaction(MyActionRequestMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_myrelativebet(MyActionRequestMessage* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MyActionRequestMessage::kGameIdFieldNumber;
const int MyActionRequestMessage::kHandNumFieldNumber;
const int MyActionRequestMessage::kGameStateFieldNumber;
const int MyActionRequestMessage::kMyActionFieldNumber;
const int MyActionRequestMessage::kMyRelativeBetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MyActionRequestMessage::MyActionRequestMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MyActionRequestMessage)
}
MyActionRequestMessage::MyActionRequestMessage(const MyActionRequestMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&myrelativebet_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(myrelativebet_));
  // @@protoc_insertion_point(copy_constructor:MyActionRequestMessage)
}

void MyActionRequestMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&myrelativebet_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(myrelativebet_));
}

MyActionRequestMessage::~MyActionRequestMessage() {
  // @@protoc_insertion_point(destructor:MyActionRequestMessage)
  SharedDtor();
}

void MyActionRequestMessage::SharedDtor() {
}

void MyActionRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MyActionRequestMessage& MyActionRequestMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MyActionRequestMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void MyActionRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:MyActionRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&myrelativebet_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(myrelativebet_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MyActionRequestMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MyActionRequestMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 handNum = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_handnum(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .NetGameState gameState = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::NetGameState_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_gamestate(static_cast<::NetGameState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .NetPlayerAction myAction = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::NetPlayerAction_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_myaction(static_cast<::NetPlayerAction>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 myRelativeBet = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_myrelativebet(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MyActionRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:MyActionRequestMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 handNum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_handnum(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NetGameState gameState = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetGameState_IsValid(value)) {
            set_gamestate(static_cast< ::NetGameState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NetPlayerAction myAction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetPlayerAction_IsValid(value)) {
            set_myaction(static_cast< ::NetPlayerAction >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 myRelativeBet = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_myrelativebet(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrelativebet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MyActionRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MyActionRequestMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MyActionRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MyActionRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 handNum = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->handnum(), output);
  }

  // required .NetGameState gameState = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gamestate(), output);
  }

  // required .NetPlayerAction myAction = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->myaction(), output);
  }

  // required uint32 myRelativeBet = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->myrelativebet(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:MyActionRequestMessage)
}

size_t MyActionRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MyActionRequestMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_handnum()) {
    // required uint32 handNum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->handnum());
  }

  if (has_gamestate()) {
    // required .NetGameState gameState = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());
  }

  if (has_myaction()) {
    // required .NetPlayerAction myAction = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->myaction());
  }

  if (has_myrelativebet()) {
    // required uint32 myRelativeBet = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->myrelativebet());
  }

  return total_size;
}
size_t MyActionRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyActionRequestMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 handNum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->handnum());

    // required .NetGameState gameState = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());

    // required .NetPlayerAction myAction = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->myaction());

    // required uint32 myRelativeBet = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->myrelativebet());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MyActionRequestMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MyActionRequestMessage*>(&from));
}

void MyActionRequestMessage::MergeFrom(const MyActionRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyActionRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      handnum_ = from.handnum_;
    }
    if (cached_has_bits & 0x00000004u) {
      gamestate_ = from.gamestate_;
    }
    if (cached_has_bits & 0x00000008u) {
      myaction_ = from.myaction_;
    }
    if (cached_has_bits & 0x00000010u) {
      myrelativebet_ = from.myrelativebet_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MyActionRequestMessage::CopyFrom(const MyActionRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyActionRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyActionRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void MyActionRequestMessage::Swap(MyActionRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MyActionRequestMessage::InternalSwap(MyActionRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(handnum_, other->handnum_);
  swap(gamestate_, other->gamestate_);
  swap(myaction_, other->myaction_);
  swap(myrelativebet_, other->myrelativebet_);
}

::std::string MyActionRequestMessage::GetTypeName() const {
  return "MyActionRequestMessage";
}


// ===================================================================

void YourActionRejectedMessage::InitAsDefaultInstance() {
}
class YourActionRejectedMessage::HasBitSetters {
 public:
  static void set_has_gameid(YourActionRejectedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_gamestate(YourActionRejectedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_youraction(YourActionRejectedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_yourrelativebet(YourActionRejectedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_rejectionreason(YourActionRejectedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YourActionRejectedMessage::kGameIdFieldNumber;
const int YourActionRejectedMessage::kGameStateFieldNumber;
const int YourActionRejectedMessage::kYourActionFieldNumber;
const int YourActionRejectedMessage::kYourRelativeBetFieldNumber;
const int YourActionRejectedMessage::kRejectionReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YourActionRejectedMessage::YourActionRejectedMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YourActionRejectedMessage)
}
YourActionRejectedMessage::YourActionRejectedMessage(const YourActionRejectedMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rejectionreason_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(rejectionreason_));
  // @@protoc_insertion_point(copy_constructor:YourActionRejectedMessage)
}

void YourActionRejectedMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yourrelativebet_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(yourrelativebet_));
  rejectionreason_ = 1;
}

YourActionRejectedMessage::~YourActionRejectedMessage() {
  // @@protoc_insertion_point(destructor:YourActionRejectedMessage)
  SharedDtor();
}

void YourActionRejectedMessage::SharedDtor() {
}

void YourActionRejectedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const YourActionRejectedMessage& YourActionRejectedMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_YourActionRejectedMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void YourActionRejectedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:YourActionRejectedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yourrelativebet_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(yourrelativebet_));
    rejectionreason_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* YourActionRejectedMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<YourActionRejectedMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .NetGameState gameState = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::NetGameState_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_gamestate(static_cast<::NetGameState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .NetPlayerAction yourAction = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::NetPlayerAction_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_youraction(static_cast<::NetPlayerAction>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 yourRelativeBet = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_yourrelativebet(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .YourActionRejectedMessage.RejectionReason rejectionReason = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::YourActionRejectedMessage_RejectionReason_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(5, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_rejectionreason(static_cast<::YourActionRejectedMessage_RejectionReason>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool YourActionRejectedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:YourActionRejectedMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NetGameState gameState = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetGameState_IsValid(value)) {
            set_gamestate(static_cast< ::NetGameState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NetPlayerAction yourAction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetPlayerAction_IsValid(value)) {
            set_youraction(static_cast< ::NetPlayerAction >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 yourRelativeBet = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_yourrelativebet(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yourrelativebet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .YourActionRejectedMessage.RejectionReason rejectionReason = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YourActionRejectedMessage_RejectionReason_IsValid(value)) {
            set_rejectionreason(static_cast< ::YourActionRejectedMessage_RejectionReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YourActionRejectedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YourActionRejectedMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void YourActionRejectedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YourActionRejectedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required .NetGameState gameState = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gamestate(), output);
  }

  // required .NetPlayerAction yourAction = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->youraction(), output);
  }

  // required uint32 yourRelativeBet = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->yourrelativebet(), output);
  }

  // required .YourActionRejectedMessage.RejectionReason rejectionReason = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->rejectionreason(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:YourActionRejectedMessage)
}

size_t YourActionRejectedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:YourActionRejectedMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_gamestate()) {
    // required .NetGameState gameState = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());
  }

  if (has_youraction()) {
    // required .NetPlayerAction yourAction = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->youraction());
  }

  if (has_yourrelativebet()) {
    // required uint32 yourRelativeBet = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->yourrelativebet());
  }

  if (has_rejectionreason()) {
    // required .YourActionRejectedMessage.RejectionReason rejectionReason = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rejectionreason());
  }

  return total_size;
}
size_t YourActionRejectedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YourActionRejectedMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required .NetGameState gameState = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());

    // required .NetPlayerAction yourAction = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->youraction());

    // required uint32 yourRelativeBet = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->yourrelativebet());

    // required .YourActionRejectedMessage.RejectionReason rejectionReason = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rejectionreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void YourActionRejectedMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const YourActionRejectedMessage*>(&from));
}

void YourActionRejectedMessage::MergeFrom(const YourActionRejectedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YourActionRejectedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      gamestate_ = from.gamestate_;
    }
    if (cached_has_bits & 0x00000004u) {
      youraction_ = from.youraction_;
    }
    if (cached_has_bits & 0x00000008u) {
      yourrelativebet_ = from.yourrelativebet_;
    }
    if (cached_has_bits & 0x00000010u) {
      rejectionreason_ = from.rejectionreason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void YourActionRejectedMessage::CopyFrom(const YourActionRejectedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YourActionRejectedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YourActionRejectedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void YourActionRejectedMessage::Swap(YourActionRejectedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YourActionRejectedMessage::InternalSwap(YourActionRejectedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(gamestate_, other->gamestate_);
  swap(youraction_, other->youraction_);
  swap(yourrelativebet_, other->yourrelativebet_);
  swap(rejectionreason_, other->rejectionreason_);
}

::std::string YourActionRejectedMessage::GetTypeName() const {
  return "YourActionRejectedMessage";
}


// ===================================================================

void PlayersActionDoneMessage::InitAsDefaultInstance() {
}
class PlayersActionDoneMessage::HasBitSetters {
 public:
  static void set_has_gameid(PlayersActionDoneMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_playerid(PlayersActionDoneMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_gamestate(PlayersActionDoneMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_playeraction(PlayersActionDoneMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_totalplayerbet(PlayersActionDoneMessage* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_playermoney(PlayersActionDoneMessage* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_highestset(PlayersActionDoneMessage* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_minimumraise(PlayersActionDoneMessage* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayersActionDoneMessage::kGameIdFieldNumber;
const int PlayersActionDoneMessage::kPlayerIdFieldNumber;
const int PlayersActionDoneMessage::kGameStateFieldNumber;
const int PlayersActionDoneMessage::kPlayerActionFieldNumber;
const int PlayersActionDoneMessage::kTotalPlayerBetFieldNumber;
const int PlayersActionDoneMessage::kPlayerMoneyFieldNumber;
const int PlayersActionDoneMessage::kHighestSetFieldNumber;
const int PlayersActionDoneMessage::kMinimumRaiseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayersActionDoneMessage::PlayersActionDoneMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayersActionDoneMessage)
}
PlayersActionDoneMessage::PlayersActionDoneMessage(const PlayersActionDoneMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&minimumraise_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(minimumraise_));
  // @@protoc_insertion_point(copy_constructor:PlayersActionDoneMessage)
}

void PlayersActionDoneMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minimumraise_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(minimumraise_));
}

PlayersActionDoneMessage::~PlayersActionDoneMessage() {
  // @@protoc_insertion_point(destructor:PlayersActionDoneMessage)
  SharedDtor();
}

void PlayersActionDoneMessage::SharedDtor() {
}

void PlayersActionDoneMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayersActionDoneMessage& PlayersActionDoneMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayersActionDoneMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void PlayersActionDoneMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayersActionDoneMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minimumraise_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(minimumraise_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayersActionDoneMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayersActionDoneMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .NetGameState gameState = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::NetGameState_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_gamestate(static_cast<::NetGameState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .NetPlayerAction playerAction = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::NetPlayerAction_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_playeraction(static_cast<::NetPlayerAction>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 totalPlayerBet = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_totalplayerbet(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerMoney = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_playermoney(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 highestSet = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_highestset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 minimumRaise = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_minimumraise(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayersActionDoneMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PlayersActionDoneMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NetGameState gameState = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetGameState_IsValid(value)) {
            set_gamestate(static_cast< ::NetGameState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NetPlayerAction playerAction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetPlayerAction_IsValid(value)) {
            set_playeraction(static_cast< ::NetPlayerAction >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 totalPlayerBet = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_totalplayerbet(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalplayerbet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerMoney = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_playermoney(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playermoney_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 highestSet = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_highestset(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highestset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 minimumRaise = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_minimumraise(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minimumraise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayersActionDoneMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayersActionDoneMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayersActionDoneMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayersActionDoneMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required .NetGameState gameState = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gamestate(), output);
  }

  // required .NetPlayerAction playerAction = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->playeraction(), output);
  }

  // required uint32 totalPlayerBet = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->totalplayerbet(), output);
  }

  // required uint32 playerMoney = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->playermoney(), output);
  }

  // required uint32 highestSet = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->highestset(), output);
  }

  // required uint32 minimumRaise = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->minimumraise(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PlayersActionDoneMessage)
}

size_t PlayersActionDoneMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayersActionDoneMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_gamestate()) {
    // required .NetGameState gameState = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());
  }

  if (has_playeraction()) {
    // required .NetPlayerAction playerAction = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->playeraction());
  }

  if (has_totalplayerbet()) {
    // required uint32 totalPlayerBet = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalplayerbet());
  }

  if (has_playermoney()) {
    // required uint32 playerMoney = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playermoney());
  }

  if (has_highestset()) {
    // required uint32 highestSet = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->highestset());
  }

  if (has_minimumraise()) {
    // required uint32 minimumRaise = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minimumraise());
  }

  return total_size;
}
size_t PlayersActionDoneMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayersActionDoneMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required .NetGameState gameState = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());

    // required .NetPlayerAction playerAction = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->playeraction());

    // required uint32 totalPlayerBet = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalplayerbet());

    // required uint32 playerMoney = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playermoney());

    // required uint32 highestSet = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->highestset());

    // required uint32 minimumRaise = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minimumraise());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayersActionDoneMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayersActionDoneMessage*>(&from));
}

void PlayersActionDoneMessage::MergeFrom(const PlayersActionDoneMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayersActionDoneMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000004u) {
      gamestate_ = from.gamestate_;
    }
    if (cached_has_bits & 0x00000008u) {
      playeraction_ = from.playeraction_;
    }
    if (cached_has_bits & 0x00000010u) {
      totalplayerbet_ = from.totalplayerbet_;
    }
    if (cached_has_bits & 0x00000020u) {
      playermoney_ = from.playermoney_;
    }
    if (cached_has_bits & 0x00000040u) {
      highestset_ = from.highestset_;
    }
    if (cached_has_bits & 0x00000080u) {
      minimumraise_ = from.minimumraise_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayersActionDoneMessage::CopyFrom(const PlayersActionDoneMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayersActionDoneMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayersActionDoneMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  return true;
}

void PlayersActionDoneMessage::Swap(PlayersActionDoneMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayersActionDoneMessage::InternalSwap(PlayersActionDoneMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(playerid_, other->playerid_);
  swap(gamestate_, other->gamestate_);
  swap(playeraction_, other->playeraction_);
  swap(totalplayerbet_, other->totalplayerbet_);
  swap(playermoney_, other->playermoney_);
  swap(highestset_, other->highestset_);
  swap(minimumraise_, other->minimumraise_);
}

::std::string PlayersActionDoneMessage::GetTypeName() const {
  return "PlayersActionDoneMessage";
}


// ===================================================================

void DealFlopCardsMessage::InitAsDefaultInstance() {
}
class DealFlopCardsMessage::HasBitSetters {
 public:
  static void set_has_gameid(DealFlopCardsMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_flopcard1(DealFlopCardsMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_flopcard2(DealFlopCardsMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_flopcard3(DealFlopCardsMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DealFlopCardsMessage::kGameIdFieldNumber;
const int DealFlopCardsMessage::kFlopCard1FieldNumber;
const int DealFlopCardsMessage::kFlopCard2FieldNumber;
const int DealFlopCardsMessage::kFlopCard3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DealFlopCardsMessage::DealFlopCardsMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DealFlopCardsMessage)
}
DealFlopCardsMessage::DealFlopCardsMessage(const DealFlopCardsMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&flopcard3_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(flopcard3_));
  // @@protoc_insertion_point(copy_constructor:DealFlopCardsMessage)
}

void DealFlopCardsMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flopcard3_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(flopcard3_));
}

DealFlopCardsMessage::~DealFlopCardsMessage() {
  // @@protoc_insertion_point(destructor:DealFlopCardsMessage)
  SharedDtor();
}

void DealFlopCardsMessage::SharedDtor() {
}

void DealFlopCardsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DealFlopCardsMessage& DealFlopCardsMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DealFlopCardsMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void DealFlopCardsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DealFlopCardsMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flopcard3_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(flopcard3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DealFlopCardsMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DealFlopCardsMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 flopCard1 = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_flopcard1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 flopCard2 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_flopcard2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 flopCard3 = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_flopcard3(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DealFlopCardsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:DealFlopCardsMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 flopCard1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_flopcard1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flopcard1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 flopCard2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_flopcard2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flopcard2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 flopCard3 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_flopcard3(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flopcard3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DealFlopCardsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DealFlopCardsMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DealFlopCardsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DealFlopCardsMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 flopCard1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flopcard1(), output);
  }

  // required uint32 flopCard2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flopcard2(), output);
  }

  // required uint32 flopCard3 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flopcard3(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:DealFlopCardsMessage)
}

size_t DealFlopCardsMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DealFlopCardsMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_flopcard1()) {
    // required uint32 flopCard1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flopcard1());
  }

  if (has_flopcard2()) {
    // required uint32 flopCard2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flopcard2());
  }

  if (has_flopcard3()) {
    // required uint32 flopCard3 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flopcard3());
  }

  return total_size;
}
size_t DealFlopCardsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DealFlopCardsMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 flopCard1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flopcard1());

    // required uint32 flopCard2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flopcard2());

    // required uint32 flopCard3 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flopcard3());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DealFlopCardsMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DealFlopCardsMessage*>(&from));
}

void DealFlopCardsMessage::MergeFrom(const DealFlopCardsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DealFlopCardsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      flopcard1_ = from.flopcard1_;
    }
    if (cached_has_bits & 0x00000004u) {
      flopcard2_ = from.flopcard2_;
    }
    if (cached_has_bits & 0x00000008u) {
      flopcard3_ = from.flopcard3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DealFlopCardsMessage::CopyFrom(const DealFlopCardsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DealFlopCardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealFlopCardsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void DealFlopCardsMessage::Swap(DealFlopCardsMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DealFlopCardsMessage::InternalSwap(DealFlopCardsMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(flopcard1_, other->flopcard1_);
  swap(flopcard2_, other->flopcard2_);
  swap(flopcard3_, other->flopcard3_);
}

::std::string DealFlopCardsMessage::GetTypeName() const {
  return "DealFlopCardsMessage";
}


// ===================================================================

void DealTurnCardMessage::InitAsDefaultInstance() {
}
class DealTurnCardMessage::HasBitSetters {
 public:
  static void set_has_gameid(DealTurnCardMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_turncard(DealTurnCardMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DealTurnCardMessage::kGameIdFieldNumber;
const int DealTurnCardMessage::kTurnCardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DealTurnCardMessage::DealTurnCardMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DealTurnCardMessage)
}
DealTurnCardMessage::DealTurnCardMessage(const DealTurnCardMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&turncard_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(turncard_));
  // @@protoc_insertion_point(copy_constructor:DealTurnCardMessage)
}

void DealTurnCardMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turncard_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(turncard_));
}

DealTurnCardMessage::~DealTurnCardMessage() {
  // @@protoc_insertion_point(destructor:DealTurnCardMessage)
  SharedDtor();
}

void DealTurnCardMessage::SharedDtor() {
}

void DealTurnCardMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DealTurnCardMessage& DealTurnCardMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DealTurnCardMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void DealTurnCardMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DealTurnCardMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&turncard_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(turncard_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DealTurnCardMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DealTurnCardMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 turnCard = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_turncard(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DealTurnCardMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:DealTurnCardMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 turnCard = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_turncard(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turncard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DealTurnCardMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DealTurnCardMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DealTurnCardMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DealTurnCardMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 turnCard = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->turncard(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:DealTurnCardMessage)
}

size_t DealTurnCardMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DealTurnCardMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_turncard()) {
    // required uint32 turnCard = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->turncard());
  }

  return total_size;
}
size_t DealTurnCardMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DealTurnCardMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 turnCard = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->turncard());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DealTurnCardMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DealTurnCardMessage*>(&from));
}

void DealTurnCardMessage::MergeFrom(const DealTurnCardMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DealTurnCardMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      turncard_ = from.turncard_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DealTurnCardMessage::CopyFrom(const DealTurnCardMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DealTurnCardMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealTurnCardMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DealTurnCardMessage::Swap(DealTurnCardMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DealTurnCardMessage::InternalSwap(DealTurnCardMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(turncard_, other->turncard_);
}

::std::string DealTurnCardMessage::GetTypeName() const {
  return "DealTurnCardMessage";
}


// ===================================================================

void DealRiverCardMessage::InitAsDefaultInstance() {
}
class DealRiverCardMessage::HasBitSetters {
 public:
  static void set_has_gameid(DealRiverCardMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_rivercard(DealRiverCardMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DealRiverCardMessage::kGameIdFieldNumber;
const int DealRiverCardMessage::kRiverCardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DealRiverCardMessage::DealRiverCardMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DealRiverCardMessage)
}
DealRiverCardMessage::DealRiverCardMessage(const DealRiverCardMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rivercard_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(rivercard_));
  // @@protoc_insertion_point(copy_constructor:DealRiverCardMessage)
}

void DealRiverCardMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rivercard_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(rivercard_));
}

DealRiverCardMessage::~DealRiverCardMessage() {
  // @@protoc_insertion_point(destructor:DealRiverCardMessage)
  SharedDtor();
}

void DealRiverCardMessage::SharedDtor() {
}

void DealRiverCardMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DealRiverCardMessage& DealRiverCardMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DealRiverCardMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void DealRiverCardMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DealRiverCardMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rivercard_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(rivercard_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DealRiverCardMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DealRiverCardMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 riverCard = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_rivercard(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DealRiverCardMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:DealRiverCardMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 riverCard = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_rivercard(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rivercard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DealRiverCardMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DealRiverCardMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DealRiverCardMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DealRiverCardMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 riverCard = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rivercard(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:DealRiverCardMessage)
}

size_t DealRiverCardMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DealRiverCardMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_rivercard()) {
    // required uint32 riverCard = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rivercard());
  }

  return total_size;
}
size_t DealRiverCardMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DealRiverCardMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 riverCard = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rivercard());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DealRiverCardMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DealRiverCardMessage*>(&from));
}

void DealRiverCardMessage::MergeFrom(const DealRiverCardMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DealRiverCardMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      rivercard_ = from.rivercard_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DealRiverCardMessage::CopyFrom(const DealRiverCardMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DealRiverCardMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealRiverCardMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DealRiverCardMessage::Swap(DealRiverCardMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DealRiverCardMessage::InternalSwap(DealRiverCardMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(rivercard_, other->rivercard_);
}

::std::string DealRiverCardMessage::GetTypeName() const {
  return "DealRiverCardMessage";
}


// ===================================================================

void AllInShowCardsMessage_PlayerAllIn::InitAsDefaultInstance() {
}
class AllInShowCardsMessage_PlayerAllIn::HasBitSetters {
 public:
  static void set_has_playerid(AllInShowCardsMessage_PlayerAllIn* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_allincard1(AllInShowCardsMessage_PlayerAllIn* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_allincard2(AllInShowCardsMessage_PlayerAllIn* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllInShowCardsMessage_PlayerAllIn::kPlayerIdFieldNumber;
const int AllInShowCardsMessage_PlayerAllIn::kAllInCard1FieldNumber;
const int AllInShowCardsMessage_PlayerAllIn::kAllInCard2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllInShowCardsMessage_PlayerAllIn::AllInShowCardsMessage_PlayerAllIn()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllInShowCardsMessage.PlayerAllIn)
}
AllInShowCardsMessage_PlayerAllIn::AllInShowCardsMessage_PlayerAllIn(const AllInShowCardsMessage_PlayerAllIn& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&allincard2_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(allincard2_));
  // @@protoc_insertion_point(copy_constructor:AllInShowCardsMessage.PlayerAllIn)
}

void AllInShowCardsMessage_PlayerAllIn::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allincard2_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(allincard2_));
}

AllInShowCardsMessage_PlayerAllIn::~AllInShowCardsMessage_PlayerAllIn() {
  // @@protoc_insertion_point(destructor:AllInShowCardsMessage.PlayerAllIn)
  SharedDtor();
}

void AllInShowCardsMessage_PlayerAllIn::SharedDtor() {
}

void AllInShowCardsMessage_PlayerAllIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllInShowCardsMessage_PlayerAllIn& AllInShowCardsMessage_PlayerAllIn::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AllInShowCardsMessage_PlayerAllIn_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AllInShowCardsMessage_PlayerAllIn::Clear() {
// @@protoc_insertion_point(message_clear_start:AllInShowCardsMessage.PlayerAllIn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allincard2_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(allincard2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AllInShowCardsMessage_PlayerAllIn::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AllInShowCardsMessage_PlayerAllIn*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 playerId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 allInCard1 = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_allincard1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 allInCard2 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_allincard2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AllInShowCardsMessage_PlayerAllIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:AllInShowCardsMessage.PlayerAllIn)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 allInCard1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_allincard1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allincard1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 allInCard2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_allincard2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allincard2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllInShowCardsMessage.PlayerAllIn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllInShowCardsMessage.PlayerAllIn)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AllInShowCardsMessage_PlayerAllIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllInShowCardsMessage.PlayerAllIn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 playerId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 allInCard1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->allincard1(), output);
  }

  // required uint32 allInCard2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->allincard2(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AllInShowCardsMessage.PlayerAllIn)
}

size_t AllInShowCardsMessage_PlayerAllIn::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AllInShowCardsMessage.PlayerAllIn)
  size_t total_size = 0;

  if (has_playerid()) {
    // required uint32 playerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_allincard1()) {
    // required uint32 allInCard1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->allincard1());
  }

  if (has_allincard2()) {
    // required uint32 allInCard2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->allincard2());
  }

  return total_size;
}
size_t AllInShowCardsMessage_PlayerAllIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AllInShowCardsMessage.PlayerAllIn)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 playerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required uint32 allInCard1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->allincard1());

    // required uint32 allInCard2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->allincard2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllInShowCardsMessage_PlayerAllIn::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AllInShowCardsMessage_PlayerAllIn*>(&from));
}

void AllInShowCardsMessage_PlayerAllIn::MergeFrom(const AllInShowCardsMessage_PlayerAllIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AllInShowCardsMessage.PlayerAllIn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      allincard1_ = from.allincard1_;
    }
    if (cached_has_bits & 0x00000004u) {
      allincard2_ = from.allincard2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AllInShowCardsMessage_PlayerAllIn::CopyFrom(const AllInShowCardsMessage_PlayerAllIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AllInShowCardsMessage.PlayerAllIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllInShowCardsMessage_PlayerAllIn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void AllInShowCardsMessage_PlayerAllIn::Swap(AllInShowCardsMessage_PlayerAllIn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllInShowCardsMessage_PlayerAllIn::InternalSwap(AllInShowCardsMessage_PlayerAllIn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(playerid_, other->playerid_);
  swap(allincard1_, other->allincard1_);
  swap(allincard2_, other->allincard2_);
}

::std::string AllInShowCardsMessage_PlayerAllIn::GetTypeName() const {
  return "AllInShowCardsMessage.PlayerAllIn";
}


// ===================================================================

void AllInShowCardsMessage::InitAsDefaultInstance() {
}
class AllInShowCardsMessage::HasBitSetters {
 public:
  static void set_has_gameid(AllInShowCardsMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllInShowCardsMessage::kGameIdFieldNumber;
const int AllInShowCardsMessage::kPlayersAllInFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllInShowCardsMessage::AllInShowCardsMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllInShowCardsMessage)
}
AllInShowCardsMessage::AllInShowCardsMessage(const AllInShowCardsMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      playersallin_(from.playersallin_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_ = from.gameid_;
  // @@protoc_insertion_point(copy_constructor:AllInShowCardsMessage)
}

void AllInShowCardsMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AllInShowCardsMessage_pokerth_2eproto.base);
  gameid_ = 0u;
}

AllInShowCardsMessage::~AllInShowCardsMessage() {
  // @@protoc_insertion_point(destructor:AllInShowCardsMessage)
  SharedDtor();
}

void AllInShowCardsMessage::SharedDtor() {
}

void AllInShowCardsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllInShowCardsMessage& AllInShowCardsMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AllInShowCardsMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AllInShowCardsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AllInShowCardsMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playersallin_.Clear();
  gameid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AllInShowCardsMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AllInShowCardsMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .AllInShowCardsMessage.PlayerAllIn playersAllIn = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::AllInShowCardsMessage_PlayerAllIn::_InternalParse;
          object = msg->add_playersallin();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AllInShowCardsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:AllInShowCardsMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AllInShowCardsMessage.PlayerAllIn playersAllIn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_playersallin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllInShowCardsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllInShowCardsMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AllInShowCardsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllInShowCardsMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // repeated .AllInShowCardsMessage.PlayerAllIn playersAllIn = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->playersallin_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->playersallin(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AllInShowCardsMessage)
}

size_t AllInShowCardsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AllInShowCardsMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 gameId = 1;
  if (has_gameid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AllInShowCardsMessage.PlayerAllIn playersAllIn = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->playersallin_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->playersallin(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllInShowCardsMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AllInShowCardsMessage*>(&from));
}

void AllInShowCardsMessage::MergeFrom(const AllInShowCardsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AllInShowCardsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playersallin_.MergeFrom(from.playersallin_);
  if (from.has_gameid()) {
    set_gameid(from.gameid());
  }
}

void AllInShowCardsMessage::CopyFrom(const AllInShowCardsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AllInShowCardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllInShowCardsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->playersallin())) return false;
  return true;
}

void AllInShowCardsMessage::Swap(AllInShowCardsMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllInShowCardsMessage::InternalSwap(AllInShowCardsMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&playersallin_)->InternalSwap(CastToBase(&other->playersallin_));
  swap(gameid_, other->gameid_);
}

::std::string AllInShowCardsMessage::GetTypeName() const {
  return "AllInShowCardsMessage";
}


// ===================================================================

void EndOfHandShowCardsMessage::InitAsDefaultInstance() {
}
class EndOfHandShowCardsMessage::HasBitSetters {
 public:
  static void set_has_gameid(EndOfHandShowCardsMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EndOfHandShowCardsMessage::kGameIdFieldNumber;
const int EndOfHandShowCardsMessage::kPlayerResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndOfHandShowCardsMessage::EndOfHandShowCardsMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EndOfHandShowCardsMessage)
}
EndOfHandShowCardsMessage::EndOfHandShowCardsMessage(const EndOfHandShowCardsMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      playerresults_(from.playerresults_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_ = from.gameid_;
  // @@protoc_insertion_point(copy_constructor:EndOfHandShowCardsMessage)
}

void EndOfHandShowCardsMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EndOfHandShowCardsMessage_pokerth_2eproto.base);
  gameid_ = 0u;
}

EndOfHandShowCardsMessage::~EndOfHandShowCardsMessage() {
  // @@protoc_insertion_point(destructor:EndOfHandShowCardsMessage)
  SharedDtor();
}

void EndOfHandShowCardsMessage::SharedDtor() {
}

void EndOfHandShowCardsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndOfHandShowCardsMessage& EndOfHandShowCardsMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EndOfHandShowCardsMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void EndOfHandShowCardsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:EndOfHandShowCardsMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerresults_.Clear();
  gameid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EndOfHandShowCardsMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EndOfHandShowCardsMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .PlayerResult playerResults = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::PlayerResult::_InternalParse;
          object = msg->add_playerresults();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EndOfHandShowCardsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:EndOfHandShowCardsMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PlayerResult playerResults = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_playerresults()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EndOfHandShowCardsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EndOfHandShowCardsMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EndOfHandShowCardsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EndOfHandShowCardsMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // repeated .PlayerResult playerResults = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->playerresults_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->playerresults(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:EndOfHandShowCardsMessage)
}

size_t EndOfHandShowCardsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EndOfHandShowCardsMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 gameId = 1;
  if (has_gameid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlayerResult playerResults = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->playerresults_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->playerresults(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndOfHandShowCardsMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EndOfHandShowCardsMessage*>(&from));
}

void EndOfHandShowCardsMessage::MergeFrom(const EndOfHandShowCardsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EndOfHandShowCardsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerresults_.MergeFrom(from.playerresults_);
  if (from.has_gameid()) {
    set_gameid(from.gameid());
  }
}

void EndOfHandShowCardsMessage::CopyFrom(const EndOfHandShowCardsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EndOfHandShowCardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndOfHandShowCardsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->playerresults())) return false;
  return true;
}

void EndOfHandShowCardsMessage::Swap(EndOfHandShowCardsMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndOfHandShowCardsMessage::InternalSwap(EndOfHandShowCardsMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&playerresults_)->InternalSwap(CastToBase(&other->playerresults_));
  swap(gameid_, other->gameid_);
}

::std::string EndOfHandShowCardsMessage::GetTypeName() const {
  return "EndOfHandShowCardsMessage";
}


// ===================================================================

void EndOfHandHideCardsMessage::InitAsDefaultInstance() {
}
class EndOfHandHideCardsMessage::HasBitSetters {
 public:
  static void set_has_gameid(EndOfHandHideCardsMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_playerid(EndOfHandHideCardsMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_moneywon(EndOfHandHideCardsMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_playermoney(EndOfHandHideCardsMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EndOfHandHideCardsMessage::kGameIdFieldNumber;
const int EndOfHandHideCardsMessage::kPlayerIdFieldNumber;
const int EndOfHandHideCardsMessage::kMoneyWonFieldNumber;
const int EndOfHandHideCardsMessage::kPlayerMoneyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndOfHandHideCardsMessage::EndOfHandHideCardsMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EndOfHandHideCardsMessage)
}
EndOfHandHideCardsMessage::EndOfHandHideCardsMessage(const EndOfHandHideCardsMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playermoney_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(playermoney_));
  // @@protoc_insertion_point(copy_constructor:EndOfHandHideCardsMessage)
}

void EndOfHandHideCardsMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playermoney_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(playermoney_));
}

EndOfHandHideCardsMessage::~EndOfHandHideCardsMessage() {
  // @@protoc_insertion_point(destructor:EndOfHandHideCardsMessage)
  SharedDtor();
}

void EndOfHandHideCardsMessage::SharedDtor() {
}

void EndOfHandHideCardsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndOfHandHideCardsMessage& EndOfHandHideCardsMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EndOfHandHideCardsMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void EndOfHandHideCardsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:EndOfHandHideCardsMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playermoney_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(playermoney_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EndOfHandHideCardsMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EndOfHandHideCardsMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 moneyWon = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_moneywon(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerMoney = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_playermoney(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EndOfHandHideCardsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:EndOfHandHideCardsMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 moneyWon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_moneywon(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneywon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerMoney = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_playermoney(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playermoney_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EndOfHandHideCardsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EndOfHandHideCardsMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EndOfHandHideCardsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EndOfHandHideCardsMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required uint32 moneyWon = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->moneywon(), output);
  }

  // required uint32 playerMoney = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->playermoney(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:EndOfHandHideCardsMessage)
}

size_t EndOfHandHideCardsMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EndOfHandHideCardsMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_moneywon()) {
    // required uint32 moneyWon = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->moneywon());
  }

  if (has_playermoney()) {
    // required uint32 playerMoney = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playermoney());
  }

  return total_size;
}
size_t EndOfHandHideCardsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EndOfHandHideCardsMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required uint32 moneyWon = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->moneywon());

    // required uint32 playerMoney = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playermoney());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndOfHandHideCardsMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EndOfHandHideCardsMessage*>(&from));
}

void EndOfHandHideCardsMessage::MergeFrom(const EndOfHandHideCardsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EndOfHandHideCardsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000004u) {
      moneywon_ = from.moneywon_;
    }
    if (cached_has_bits & 0x00000008u) {
      playermoney_ = from.playermoney_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EndOfHandHideCardsMessage::CopyFrom(const EndOfHandHideCardsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EndOfHandHideCardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndOfHandHideCardsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void EndOfHandHideCardsMessage::Swap(EndOfHandHideCardsMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndOfHandHideCardsMessage::InternalSwap(EndOfHandHideCardsMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(playerid_, other->playerid_);
  swap(moneywon_, other->moneywon_);
  swap(playermoney_, other->playermoney_);
}

::std::string EndOfHandHideCardsMessage::GetTypeName() const {
  return "EndOfHandHideCardsMessage";
}


// ===================================================================

void ShowMyCardsRequestMessage::InitAsDefaultInstance() {
}
class ShowMyCardsRequestMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShowMyCardsRequestMessage::ShowMyCardsRequestMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShowMyCardsRequestMessage)
}
ShowMyCardsRequestMessage::ShowMyCardsRequestMessage(const ShowMyCardsRequestMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ShowMyCardsRequestMessage)
}

void ShowMyCardsRequestMessage::SharedCtor() {
}

ShowMyCardsRequestMessage::~ShowMyCardsRequestMessage() {
  // @@protoc_insertion_point(destructor:ShowMyCardsRequestMessage)
  SharedDtor();
}

void ShowMyCardsRequestMessage::SharedDtor() {
}

void ShowMyCardsRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowMyCardsRequestMessage& ShowMyCardsRequestMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ShowMyCardsRequestMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void ShowMyCardsRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ShowMyCardsRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ShowMyCardsRequestMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ShowMyCardsRequestMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ShowMyCardsRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ShowMyCardsRequestMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:ShowMyCardsRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShowMyCardsRequestMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ShowMyCardsRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShowMyCardsRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ShowMyCardsRequestMessage)
}

size_t ShowMyCardsRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShowMyCardsRequestMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowMyCardsRequestMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShowMyCardsRequestMessage*>(&from));
}

void ShowMyCardsRequestMessage::MergeFrom(const ShowMyCardsRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShowMyCardsRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ShowMyCardsRequestMessage::CopyFrom(const ShowMyCardsRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShowMyCardsRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowMyCardsRequestMessage::IsInitialized() const {
  return true;
}

void ShowMyCardsRequestMessage::Swap(ShowMyCardsRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShowMyCardsRequestMessage::InternalSwap(ShowMyCardsRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::std::string ShowMyCardsRequestMessage::GetTypeName() const {
  return "ShowMyCardsRequestMessage";
}


// ===================================================================

void AfterHandShowCardsMessage::InitAsDefaultInstance() {
  ::_AfterHandShowCardsMessage_default_instance_._instance.get_mutable()->playerresult_ = const_cast< ::PlayerResult*>(
      ::PlayerResult::internal_default_instance());
}
class AfterHandShowCardsMessage::HasBitSetters {
 public:
  static const ::PlayerResult& playerresult(const AfterHandShowCardsMessage* msg);
  static void set_has_playerresult(AfterHandShowCardsMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::PlayerResult&
AfterHandShowCardsMessage::HasBitSetters::playerresult(const AfterHandShowCardsMessage* msg) {
  return *msg->playerresult_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AfterHandShowCardsMessage::kPlayerResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AfterHandShowCardsMessage::AfterHandShowCardsMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AfterHandShowCardsMessage)
}
AfterHandShowCardsMessage::AfterHandShowCardsMessage(const AfterHandShowCardsMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_playerresult()) {
    playerresult_ = new ::PlayerResult(*from.playerresult_);
  } else {
    playerresult_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:AfterHandShowCardsMessage)
}

void AfterHandShowCardsMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AfterHandShowCardsMessage_pokerth_2eproto.base);
  playerresult_ = nullptr;
}

AfterHandShowCardsMessage::~AfterHandShowCardsMessage() {
  // @@protoc_insertion_point(destructor:AfterHandShowCardsMessage)
  SharedDtor();
}

void AfterHandShowCardsMessage::SharedDtor() {
  if (this != internal_default_instance()) delete playerresult_;
}

void AfterHandShowCardsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AfterHandShowCardsMessage& AfterHandShowCardsMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AfterHandShowCardsMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AfterHandShowCardsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AfterHandShowCardsMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(playerresult_ != nullptr);
    playerresult_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AfterHandShowCardsMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AfterHandShowCardsMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .PlayerResult playerResult = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::PlayerResult::_InternalParse;
        object = msg->mutable_playerresult();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AfterHandShowCardsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:AfterHandShowCardsMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PlayerResult playerResult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_playerresult()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AfterHandShowCardsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AfterHandShowCardsMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AfterHandShowCardsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AfterHandShowCardsMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .PlayerResult playerResult = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, HasBitSetters::playerresult(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AfterHandShowCardsMessage)
}

size_t AfterHandShowCardsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AfterHandShowCardsMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .PlayerResult playerResult = 1;
  if (has_playerresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *playerresult_);
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AfterHandShowCardsMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AfterHandShowCardsMessage*>(&from));
}

void AfterHandShowCardsMessage::MergeFrom(const AfterHandShowCardsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AfterHandShowCardsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_playerresult()) {
    mutable_playerresult()->::PlayerResult::MergeFrom(from.playerresult());
  }
}

void AfterHandShowCardsMessage::CopyFrom(const AfterHandShowCardsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AfterHandShowCardsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfterHandShowCardsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_playerresult()) {
    if (!this->playerresult_->IsInitialized()) return false;
  }
  return true;
}

void AfterHandShowCardsMessage::Swap(AfterHandShowCardsMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AfterHandShowCardsMessage::InternalSwap(AfterHandShowCardsMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(playerresult_, other->playerresult_);
}

::std::string AfterHandShowCardsMessage::GetTypeName() const {
  return "AfterHandShowCardsMessage";
}


// ===================================================================

void EndOfGameMessage::InitAsDefaultInstance() {
}
class EndOfGameMessage::HasBitSetters {
 public:
  static void set_has_gameid(EndOfGameMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_winnerplayerid(EndOfGameMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EndOfGameMessage::kGameIdFieldNumber;
const int EndOfGameMessage::kWinnerPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndOfGameMessage::EndOfGameMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EndOfGameMessage)
}
EndOfGameMessage::EndOfGameMessage(const EndOfGameMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&winnerplayerid_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(winnerplayerid_));
  // @@protoc_insertion_point(copy_constructor:EndOfGameMessage)
}

void EndOfGameMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&winnerplayerid_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(winnerplayerid_));
}

EndOfGameMessage::~EndOfGameMessage() {
  // @@protoc_insertion_point(destructor:EndOfGameMessage)
  SharedDtor();
}

void EndOfGameMessage::SharedDtor() {
}

void EndOfGameMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndOfGameMessage& EndOfGameMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EndOfGameMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void EndOfGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:EndOfGameMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&winnerplayerid_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(winnerplayerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EndOfGameMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EndOfGameMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 winnerPlayerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_winnerplayerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EndOfGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:EndOfGameMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 winnerPlayerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_winnerplayerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winnerplayerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EndOfGameMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EndOfGameMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EndOfGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EndOfGameMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 winnerPlayerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->winnerplayerid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:EndOfGameMessage)
}

size_t EndOfGameMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EndOfGameMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_winnerplayerid()) {
    // required uint32 winnerPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->winnerplayerid());
  }

  return total_size;
}
size_t EndOfGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EndOfGameMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 winnerPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->winnerplayerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndOfGameMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EndOfGameMessage*>(&from));
}

void EndOfGameMessage::MergeFrom(const EndOfGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EndOfGameMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      winnerplayerid_ = from.winnerplayerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EndOfGameMessage::CopyFrom(const EndOfGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EndOfGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndOfGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void EndOfGameMessage::Swap(EndOfGameMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndOfGameMessage::InternalSwap(EndOfGameMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(winnerplayerid_, other->winnerplayerid_);
}

::std::string EndOfGameMessage::GetTypeName() const {
  return "EndOfGameMessage";
}


// ===================================================================

void PlayerIdChangedMessage::InitAsDefaultInstance() {
}
class PlayerIdChangedMessage::HasBitSetters {
 public:
  static void set_has_oldplayerid(PlayerIdChangedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_newplayerid(PlayerIdChangedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerIdChangedMessage::kOldPlayerIdFieldNumber;
const int PlayerIdChangedMessage::kNewPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerIdChangedMessage::PlayerIdChangedMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerIdChangedMessage)
}
PlayerIdChangedMessage::PlayerIdChangedMessage(const PlayerIdChangedMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&oldplayerid_, &from.oldplayerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&newplayerid_) -
    reinterpret_cast<char*>(&oldplayerid_)) + sizeof(newplayerid_));
  // @@protoc_insertion_point(copy_constructor:PlayerIdChangedMessage)
}

void PlayerIdChangedMessage::SharedCtor() {
  ::memset(&oldplayerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newplayerid_) -
      reinterpret_cast<char*>(&oldplayerid_)) + sizeof(newplayerid_));
}

PlayerIdChangedMessage::~PlayerIdChangedMessage() {
  // @@protoc_insertion_point(destructor:PlayerIdChangedMessage)
  SharedDtor();
}

void PlayerIdChangedMessage::SharedDtor() {
}

void PlayerIdChangedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerIdChangedMessage& PlayerIdChangedMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlayerIdChangedMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void PlayerIdChangedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerIdChangedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&oldplayerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&newplayerid_) -
        reinterpret_cast<char*>(&oldplayerid_)) + sizeof(newplayerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlayerIdChangedMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlayerIdChangedMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 oldPlayerId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_oldplayerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 newPlayerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_newplayerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlayerIdChangedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PlayerIdChangedMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oldPlayerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_oldplayerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldplayerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 newPlayerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_newplayerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newplayerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerIdChangedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerIdChangedMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlayerIdChangedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerIdChangedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 oldPlayerId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oldplayerid(), output);
  }

  // required uint32 newPlayerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newplayerid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PlayerIdChangedMessage)
}

size_t PlayerIdChangedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PlayerIdChangedMessage)
  size_t total_size = 0;

  if (has_oldplayerid()) {
    // required uint32 oldPlayerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->oldplayerid());
  }

  if (has_newplayerid()) {
    // required uint32 newPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->newplayerid());
  }

  return total_size;
}
size_t PlayerIdChangedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerIdChangedMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 oldPlayerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->oldplayerid());

    // required uint32 newPlayerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->newplayerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerIdChangedMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerIdChangedMessage*>(&from));
}

void PlayerIdChangedMessage::MergeFrom(const PlayerIdChangedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerIdChangedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      oldplayerid_ = from.oldplayerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      newplayerid_ = from.newplayerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerIdChangedMessage::CopyFrom(const PlayerIdChangedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerIdChangedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerIdChangedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PlayerIdChangedMessage::Swap(PlayerIdChangedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerIdChangedMessage::InternalSwap(PlayerIdChangedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(oldplayerid_, other->oldplayerid_);
  swap(newplayerid_, other->newplayerid_);
}

::std::string PlayerIdChangedMessage::GetTypeName() const {
  return "PlayerIdChangedMessage";
}


// ===================================================================

void AskKickPlayerMessage::InitAsDefaultInstance() {
}
class AskKickPlayerMessage::HasBitSetters {
 public:
  static void set_has_gameid(AskKickPlayerMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_playerid(AskKickPlayerMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AskKickPlayerMessage::kGameIdFieldNumber;
const int AskKickPlayerMessage::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AskKickPlayerMessage::AskKickPlayerMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AskKickPlayerMessage)
}
AskKickPlayerMessage::AskKickPlayerMessage(const AskKickPlayerMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:AskKickPlayerMessage)
}

void AskKickPlayerMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
}

AskKickPlayerMessage::~AskKickPlayerMessage() {
  // @@protoc_insertion_point(destructor:AskKickPlayerMessage)
  SharedDtor();
}

void AskKickPlayerMessage::SharedDtor() {
}

void AskKickPlayerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AskKickPlayerMessage& AskKickPlayerMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AskKickPlayerMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AskKickPlayerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AskKickPlayerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playerid_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(playerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AskKickPlayerMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AskKickPlayerMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AskKickPlayerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:AskKickPlayerMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AskKickPlayerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AskKickPlayerMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AskKickPlayerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AskKickPlayerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AskKickPlayerMessage)
}

size_t AskKickPlayerMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AskKickPlayerMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  return total_size;
}
size_t AskKickPlayerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AskKickPlayerMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AskKickPlayerMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AskKickPlayerMessage*>(&from));
}

void AskKickPlayerMessage::MergeFrom(const AskKickPlayerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AskKickPlayerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AskKickPlayerMessage::CopyFrom(const AskKickPlayerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AskKickPlayerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskKickPlayerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AskKickPlayerMessage::Swap(AskKickPlayerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AskKickPlayerMessage::InternalSwap(AskKickPlayerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(playerid_, other->playerid_);
}

::std::string AskKickPlayerMessage::GetTypeName() const {
  return "AskKickPlayerMessage";
}


// ===================================================================

void AskKickDeniedMessage::InitAsDefaultInstance() {
}
class AskKickDeniedMessage::HasBitSetters {
 public:
  static void set_has_gameid(AskKickDeniedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_playerid(AskKickDeniedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_kickdeniedreason(AskKickDeniedMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AskKickDeniedMessage::kGameIdFieldNumber;
const int AskKickDeniedMessage::kPlayerIdFieldNumber;
const int AskKickDeniedMessage::kKickDeniedReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AskKickDeniedMessage::AskKickDeniedMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AskKickDeniedMessage)
}
AskKickDeniedMessage::AskKickDeniedMessage(const AskKickDeniedMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&kickdeniedreason_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(kickdeniedreason_));
  // @@protoc_insertion_point(copy_constructor:AskKickDeniedMessage)
}

void AskKickDeniedMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kickdeniedreason_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(kickdeniedreason_));
}

AskKickDeniedMessage::~AskKickDeniedMessage() {
  // @@protoc_insertion_point(destructor:AskKickDeniedMessage)
  SharedDtor();
}

void AskKickDeniedMessage::SharedDtor() {
}

void AskKickDeniedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AskKickDeniedMessage& AskKickDeniedMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AskKickDeniedMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AskKickDeniedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AskKickDeniedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kickdeniedreason_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(kickdeniedreason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AskKickDeniedMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AskKickDeniedMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 playerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .AskKickDeniedMessage.KickDeniedReason kickDeniedReason = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::AskKickDeniedMessage_KickDeniedReason_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_kickdeniedreason(static_cast<::AskKickDeniedMessage_KickDeniedReason>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AskKickDeniedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:AskKickDeniedMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .AskKickDeniedMessage.KickDeniedReason kickDeniedReason = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AskKickDeniedMessage_KickDeniedReason_IsValid(value)) {
            set_kickdeniedreason(static_cast< ::AskKickDeniedMessage_KickDeniedReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AskKickDeniedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AskKickDeniedMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AskKickDeniedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AskKickDeniedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 playerId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required .AskKickDeniedMessage.KickDeniedReason kickDeniedReason = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->kickdeniedreason(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AskKickDeniedMessage)
}

size_t AskKickDeniedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AskKickDeniedMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_playerid()) {
    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  if (has_kickdeniedreason()) {
    // required .AskKickDeniedMessage.KickDeniedReason kickDeniedReason = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kickdeniedreason());
  }

  return total_size;
}
size_t AskKickDeniedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AskKickDeniedMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 playerId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());

    // required .AskKickDeniedMessage.KickDeniedReason kickDeniedReason = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kickdeniedreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AskKickDeniedMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AskKickDeniedMessage*>(&from));
}

void AskKickDeniedMessage::MergeFrom(const AskKickDeniedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AskKickDeniedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000004u) {
      kickdeniedreason_ = from.kickdeniedreason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AskKickDeniedMessage::CopyFrom(const AskKickDeniedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AskKickDeniedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskKickDeniedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void AskKickDeniedMessage::Swap(AskKickDeniedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AskKickDeniedMessage::InternalSwap(AskKickDeniedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(playerid_, other->playerid_);
  swap(kickdeniedreason_, other->kickdeniedreason_);
}

::std::string AskKickDeniedMessage::GetTypeName() const {
  return "AskKickDeniedMessage";
}


// ===================================================================

void StartKickPetitionMessage::InitAsDefaultInstance() {
}
class StartKickPetitionMessage::HasBitSetters {
 public:
  static void set_has_gameid(StartKickPetitionMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_petitionid(StartKickPetitionMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_proposingplayerid(StartKickPetitionMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_kickplayerid(StartKickPetitionMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_kicktimeoutsec(StartKickPetitionMessage* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_numvotesneededtokick(StartKickPetitionMessage* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartKickPetitionMessage::kGameIdFieldNumber;
const int StartKickPetitionMessage::kPetitionIdFieldNumber;
const int StartKickPetitionMessage::kProposingPlayerIdFieldNumber;
const int StartKickPetitionMessage::kKickPlayerIdFieldNumber;
const int StartKickPetitionMessage::kKickTimeoutSecFieldNumber;
const int StartKickPetitionMessage::kNumVotesNeededToKickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartKickPetitionMessage::StartKickPetitionMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StartKickPetitionMessage)
}
StartKickPetitionMessage::StartKickPetitionMessage(const StartKickPetitionMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&numvotesneededtokick_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(numvotesneededtokick_));
  // @@protoc_insertion_point(copy_constructor:StartKickPetitionMessage)
}

void StartKickPetitionMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numvotesneededtokick_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(numvotesneededtokick_));
}

StartKickPetitionMessage::~StartKickPetitionMessage() {
  // @@protoc_insertion_point(destructor:StartKickPetitionMessage)
  SharedDtor();
}

void StartKickPetitionMessage::SharedDtor() {
}

void StartKickPetitionMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartKickPetitionMessage& StartKickPetitionMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StartKickPetitionMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void StartKickPetitionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StartKickPetitionMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numvotesneededtokick_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(numvotesneededtokick_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StartKickPetitionMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StartKickPetitionMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 petitionId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_petitionid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 proposingPlayerId = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_proposingplayerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 kickPlayerId = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_kickplayerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 kickTimeoutSec = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_kicktimeoutsec(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 numVotesNeededToKick = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_numvotesneededtokick(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StartKickPetitionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:StartKickPetitionMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 petitionId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_petitionid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petitionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 proposingPlayerId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_proposingplayerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proposingplayerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 kickPlayerId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_kickplayerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kickplayerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 kickTimeoutSec = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_kicktimeoutsec(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kicktimeoutsec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 numVotesNeededToKick = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_numvotesneededtokick(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numvotesneededtokick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StartKickPetitionMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StartKickPetitionMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StartKickPetitionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StartKickPetitionMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 petitionId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->petitionid(), output);
  }

  // required uint32 proposingPlayerId = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->proposingplayerid(), output);
  }

  // required uint32 kickPlayerId = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kickplayerid(), output);
  }

  // required uint32 kickTimeoutSec = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kicktimeoutsec(), output);
  }

  // required uint32 numVotesNeededToKick = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->numvotesneededtokick(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:StartKickPetitionMessage)
}

size_t StartKickPetitionMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:StartKickPetitionMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_petitionid()) {
    // required uint32 petitionId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->petitionid());
  }

  if (has_proposingplayerid()) {
    // required uint32 proposingPlayerId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->proposingplayerid());
  }

  if (has_kickplayerid()) {
    // required uint32 kickPlayerId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kickplayerid());
  }

  if (has_kicktimeoutsec()) {
    // required uint32 kickTimeoutSec = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kicktimeoutsec());
  }

  if (has_numvotesneededtokick()) {
    // required uint32 numVotesNeededToKick = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesneededtokick());
  }

  return total_size;
}
size_t StartKickPetitionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartKickPetitionMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 petitionId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->petitionid());

    // required uint32 proposingPlayerId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->proposingplayerid());

    // required uint32 kickPlayerId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kickplayerid());

    // required uint32 kickTimeoutSec = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kicktimeoutsec());

    // required uint32 numVotesNeededToKick = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesneededtokick());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartKickPetitionMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StartKickPetitionMessage*>(&from));
}

void StartKickPetitionMessage::MergeFrom(const StartKickPetitionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartKickPetitionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      petitionid_ = from.petitionid_;
    }
    if (cached_has_bits & 0x00000004u) {
      proposingplayerid_ = from.proposingplayerid_;
    }
    if (cached_has_bits & 0x00000008u) {
      kickplayerid_ = from.kickplayerid_;
    }
    if (cached_has_bits & 0x00000010u) {
      kicktimeoutsec_ = from.kicktimeoutsec_;
    }
    if (cached_has_bits & 0x00000020u) {
      numvotesneededtokick_ = from.numvotesneededtokick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StartKickPetitionMessage::CopyFrom(const StartKickPetitionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartKickPetitionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartKickPetitionMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void StartKickPetitionMessage::Swap(StartKickPetitionMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartKickPetitionMessage::InternalSwap(StartKickPetitionMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(petitionid_, other->petitionid_);
  swap(proposingplayerid_, other->proposingplayerid_);
  swap(kickplayerid_, other->kickplayerid_);
  swap(kicktimeoutsec_, other->kicktimeoutsec_);
  swap(numvotesneededtokick_, other->numvotesneededtokick_);
}

::std::string StartKickPetitionMessage::GetTypeName() const {
  return "StartKickPetitionMessage";
}


// ===================================================================

void VoteKickRequestMessage::InitAsDefaultInstance() {
}
class VoteKickRequestMessage::HasBitSetters {
 public:
  static void set_has_gameid(VoteKickRequestMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_petitionid(VoteKickRequestMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_votekick(VoteKickRequestMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoteKickRequestMessage::kGameIdFieldNumber;
const int VoteKickRequestMessage::kPetitionIdFieldNumber;
const int VoteKickRequestMessage::kVoteKickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoteKickRequestMessage::VoteKickRequestMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VoteKickRequestMessage)
}
VoteKickRequestMessage::VoteKickRequestMessage(const VoteKickRequestMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&votekick_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(votekick_));
  // @@protoc_insertion_point(copy_constructor:VoteKickRequestMessage)
}

void VoteKickRequestMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votekick_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(votekick_));
}

VoteKickRequestMessage::~VoteKickRequestMessage() {
  // @@protoc_insertion_point(destructor:VoteKickRequestMessage)
  SharedDtor();
}

void VoteKickRequestMessage::SharedDtor() {
}

void VoteKickRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoteKickRequestMessage& VoteKickRequestMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VoteKickRequestMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void VoteKickRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:VoteKickRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&votekick_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(votekick_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VoteKickRequestMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VoteKickRequestMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 petitionId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_petitionid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required bool voteKick = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_votekick(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VoteKickRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:VoteKickRequestMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 petitionId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_petitionid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petitionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool voteKick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_votekick(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &votekick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VoteKickRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VoteKickRequestMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VoteKickRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VoteKickRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 petitionId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->petitionid(), output);
  }

  // required bool voteKick = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->votekick(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:VoteKickRequestMessage)
}

size_t VoteKickRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:VoteKickRequestMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_petitionid()) {
    // required uint32 petitionId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->petitionid());
  }

  if (has_votekick()) {
    // required bool voteKick = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t VoteKickRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VoteKickRequestMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 petitionId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->petitionid());

    // required bool voteKick = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteKickRequestMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VoteKickRequestMessage*>(&from));
}

void VoteKickRequestMessage::MergeFrom(const VoteKickRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VoteKickRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      petitionid_ = from.petitionid_;
    }
    if (cached_has_bits & 0x00000004u) {
      votekick_ = from.votekick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoteKickRequestMessage::CopyFrom(const VoteKickRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VoteKickRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteKickRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void VoteKickRequestMessage::Swap(VoteKickRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoteKickRequestMessage::InternalSwap(VoteKickRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(petitionid_, other->petitionid_);
  swap(votekick_, other->votekick_);
}

::std::string VoteKickRequestMessage::GetTypeName() const {
  return "VoteKickRequestMessage";
}


// ===================================================================

void VoteKickReplyMessage::InitAsDefaultInstance() {
}
class VoteKickReplyMessage::HasBitSetters {
 public:
  static void set_has_gameid(VoteKickReplyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_petitionid(VoteKickReplyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_votekickreplytype(VoteKickReplyMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoteKickReplyMessage::kGameIdFieldNumber;
const int VoteKickReplyMessage::kPetitionIdFieldNumber;
const int VoteKickReplyMessage::kVoteKickReplyTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoteKickReplyMessage::VoteKickReplyMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VoteKickReplyMessage)
}
VoteKickReplyMessage::VoteKickReplyMessage(const VoteKickReplyMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&votekickreplytype_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(votekickreplytype_));
  // @@protoc_insertion_point(copy_constructor:VoteKickReplyMessage)
}

void VoteKickReplyMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votekickreplytype_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(votekickreplytype_));
}

VoteKickReplyMessage::~VoteKickReplyMessage() {
  // @@protoc_insertion_point(destructor:VoteKickReplyMessage)
  SharedDtor();
}

void VoteKickReplyMessage::SharedDtor() {
}

void VoteKickReplyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoteKickReplyMessage& VoteKickReplyMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VoteKickReplyMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void VoteKickReplyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:VoteKickReplyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&votekickreplytype_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(votekickreplytype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VoteKickReplyMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VoteKickReplyMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 petitionId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_petitionid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .VoteKickReplyMessage.VoteKickReplyType voteKickReplyType = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::VoteKickReplyMessage_VoteKickReplyType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_votekickreplytype(static_cast<::VoteKickReplyMessage_VoteKickReplyType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VoteKickReplyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:VoteKickReplyMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 petitionId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_petitionid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petitionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .VoteKickReplyMessage.VoteKickReplyType voteKickReplyType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::VoteKickReplyMessage_VoteKickReplyType_IsValid(value)) {
            set_votekickreplytype(static_cast< ::VoteKickReplyMessage_VoteKickReplyType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VoteKickReplyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VoteKickReplyMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VoteKickReplyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VoteKickReplyMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 petitionId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->petitionid(), output);
  }

  // required .VoteKickReplyMessage.VoteKickReplyType voteKickReplyType = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->votekickreplytype(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:VoteKickReplyMessage)
}

size_t VoteKickReplyMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:VoteKickReplyMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_petitionid()) {
    // required uint32 petitionId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->petitionid());
  }

  if (has_votekickreplytype()) {
    // required .VoteKickReplyMessage.VoteKickReplyType voteKickReplyType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->votekickreplytype());
  }

  return total_size;
}
size_t VoteKickReplyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VoteKickReplyMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 petitionId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->petitionid());

    // required .VoteKickReplyMessage.VoteKickReplyType voteKickReplyType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->votekickreplytype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteKickReplyMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VoteKickReplyMessage*>(&from));
}

void VoteKickReplyMessage::MergeFrom(const VoteKickReplyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VoteKickReplyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      petitionid_ = from.petitionid_;
    }
    if (cached_has_bits & 0x00000004u) {
      votekickreplytype_ = from.votekickreplytype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VoteKickReplyMessage::CopyFrom(const VoteKickReplyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VoteKickReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteKickReplyMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void VoteKickReplyMessage::Swap(VoteKickReplyMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoteKickReplyMessage::InternalSwap(VoteKickReplyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(petitionid_, other->petitionid_);
  swap(votekickreplytype_, other->votekickreplytype_);
}

::std::string VoteKickReplyMessage::GetTypeName() const {
  return "VoteKickReplyMessage";
}


// ===================================================================

void KickPetitionUpdateMessage::InitAsDefaultInstance() {
}
class KickPetitionUpdateMessage::HasBitSetters {
 public:
  static void set_has_gameid(KickPetitionUpdateMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_petitionid(KickPetitionUpdateMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_numvotesagainstkicking(KickPetitionUpdateMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_numvotesinfavourofkicking(KickPetitionUpdateMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_numvotesneededtokick(KickPetitionUpdateMessage* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KickPetitionUpdateMessage::kGameIdFieldNumber;
const int KickPetitionUpdateMessage::kPetitionIdFieldNumber;
const int KickPetitionUpdateMessage::kNumVotesAgainstKickingFieldNumber;
const int KickPetitionUpdateMessage::kNumVotesInFavourOfKickingFieldNumber;
const int KickPetitionUpdateMessage::kNumVotesNeededToKickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KickPetitionUpdateMessage::KickPetitionUpdateMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KickPetitionUpdateMessage)
}
KickPetitionUpdateMessage::KickPetitionUpdateMessage(const KickPetitionUpdateMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&numvotesneededtokick_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(numvotesneededtokick_));
  // @@protoc_insertion_point(copy_constructor:KickPetitionUpdateMessage)
}

void KickPetitionUpdateMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numvotesneededtokick_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(numvotesneededtokick_));
}

KickPetitionUpdateMessage::~KickPetitionUpdateMessage() {
  // @@protoc_insertion_point(destructor:KickPetitionUpdateMessage)
  SharedDtor();
}

void KickPetitionUpdateMessage::SharedDtor() {
}

void KickPetitionUpdateMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KickPetitionUpdateMessage& KickPetitionUpdateMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_KickPetitionUpdateMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void KickPetitionUpdateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:KickPetitionUpdateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numvotesneededtokick_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(numvotesneededtokick_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KickPetitionUpdateMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<KickPetitionUpdateMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 petitionId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_petitionid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 numVotesAgainstKicking = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_numvotesagainstkicking(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 numVotesInFavourOfKicking = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_numvotesinfavourofkicking(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 numVotesNeededToKick = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_numvotesneededtokick(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KickPetitionUpdateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:KickPetitionUpdateMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 petitionId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_petitionid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petitionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 numVotesAgainstKicking = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_numvotesagainstkicking(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numvotesagainstkicking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 numVotesInFavourOfKicking = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_numvotesinfavourofkicking(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numvotesinfavourofkicking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 numVotesNeededToKick = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_numvotesneededtokick(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numvotesneededtokick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KickPetitionUpdateMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KickPetitionUpdateMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KickPetitionUpdateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KickPetitionUpdateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 petitionId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->petitionid(), output);
  }

  // required uint32 numVotesAgainstKicking = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->numvotesagainstkicking(), output);
  }

  // required uint32 numVotesInFavourOfKicking = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->numvotesinfavourofkicking(), output);
  }

  // required uint32 numVotesNeededToKick = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->numvotesneededtokick(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:KickPetitionUpdateMessage)
}

size_t KickPetitionUpdateMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KickPetitionUpdateMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_petitionid()) {
    // required uint32 petitionId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->petitionid());
  }

  if (has_numvotesagainstkicking()) {
    // required uint32 numVotesAgainstKicking = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesagainstkicking());
  }

  if (has_numvotesinfavourofkicking()) {
    // required uint32 numVotesInFavourOfKicking = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesinfavourofkicking());
  }

  if (has_numvotesneededtokick()) {
    // required uint32 numVotesNeededToKick = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesneededtokick());
  }

  return total_size;
}
size_t KickPetitionUpdateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KickPetitionUpdateMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 petitionId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->petitionid());

    // required uint32 numVotesAgainstKicking = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesagainstkicking());

    // required uint32 numVotesInFavourOfKicking = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesinfavourofkicking());

    // required uint32 numVotesNeededToKick = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesneededtokick());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KickPetitionUpdateMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KickPetitionUpdateMessage*>(&from));
}

void KickPetitionUpdateMessage::MergeFrom(const KickPetitionUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KickPetitionUpdateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      petitionid_ = from.petitionid_;
    }
    if (cached_has_bits & 0x00000004u) {
      numvotesagainstkicking_ = from.numvotesagainstkicking_;
    }
    if (cached_has_bits & 0x00000008u) {
      numvotesinfavourofkicking_ = from.numvotesinfavourofkicking_;
    }
    if (cached_has_bits & 0x00000010u) {
      numvotesneededtokick_ = from.numvotesneededtokick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KickPetitionUpdateMessage::CopyFrom(const KickPetitionUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KickPetitionUpdateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickPetitionUpdateMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void KickPetitionUpdateMessage::Swap(KickPetitionUpdateMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KickPetitionUpdateMessage::InternalSwap(KickPetitionUpdateMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(petitionid_, other->petitionid_);
  swap(numvotesagainstkicking_, other->numvotesagainstkicking_);
  swap(numvotesinfavourofkicking_, other->numvotesinfavourofkicking_);
  swap(numvotesneededtokick_, other->numvotesneededtokick_);
}

::std::string KickPetitionUpdateMessage::GetTypeName() const {
  return "KickPetitionUpdateMessage";
}


// ===================================================================

void EndKickPetitionMessage::InitAsDefaultInstance() {
}
class EndKickPetitionMessage::HasBitSetters {
 public:
  static void set_has_gameid(EndKickPetitionMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_petitionid(EndKickPetitionMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_numvotesagainstkicking(EndKickPetitionMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_numvotesinfavourofkicking(EndKickPetitionMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_resultplayerkicked(EndKickPetitionMessage* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_petitionendreason(EndKickPetitionMessage* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EndKickPetitionMessage::kGameIdFieldNumber;
const int EndKickPetitionMessage::kPetitionIdFieldNumber;
const int EndKickPetitionMessage::kNumVotesAgainstKickingFieldNumber;
const int EndKickPetitionMessage::kNumVotesInFavourOfKickingFieldNumber;
const int EndKickPetitionMessage::kResultPlayerKickedFieldNumber;
const int EndKickPetitionMessage::kPetitionEndReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndKickPetitionMessage::EndKickPetitionMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EndKickPetitionMessage)
}
EndKickPetitionMessage::EndKickPetitionMessage(const EndKickPetitionMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&petitionendreason_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(petitionendreason_));
  // @@protoc_insertion_point(copy_constructor:EndKickPetitionMessage)
}

void EndKickPetitionMessage::SharedCtor() {
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&petitionendreason_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(petitionendreason_));
}

EndKickPetitionMessage::~EndKickPetitionMessage() {
  // @@protoc_insertion_point(destructor:EndKickPetitionMessage)
  SharedDtor();
}

void EndKickPetitionMessage::SharedDtor() {
}

void EndKickPetitionMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndKickPetitionMessage& EndKickPetitionMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EndKickPetitionMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void EndKickPetitionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:EndKickPetitionMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&petitionendreason_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(petitionendreason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EndKickPetitionMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EndKickPetitionMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 petitionId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_petitionid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 numVotesAgainstKicking = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_numvotesagainstkicking(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 numVotesInFavourOfKicking = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_numvotesinfavourofkicking(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 resultPlayerKicked = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_resultplayerkicked(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .EndKickPetitionMessage.PetitionEndReason petitionEndReason = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::EndKickPetitionMessage_PetitionEndReason_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(6, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_petitionendreason(static_cast<::EndKickPetitionMessage_PetitionEndReason>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EndKickPetitionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:EndKickPetitionMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 petitionId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_petitionid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petitionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 numVotesAgainstKicking = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_numvotesagainstkicking(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numvotesagainstkicking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 numVotesInFavourOfKicking = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_numvotesinfavourofkicking(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numvotesinfavourofkicking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 resultPlayerKicked = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_resultplayerkicked(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultplayerkicked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .EndKickPetitionMessage.PetitionEndReason petitionEndReason = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EndKickPetitionMessage_PetitionEndReason_IsValid(value)) {
            set_petitionendreason(static_cast< ::EndKickPetitionMessage_PetitionEndReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EndKickPetitionMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EndKickPetitionMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EndKickPetitionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EndKickPetitionMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // required uint32 petitionId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->petitionid(), output);
  }

  // required uint32 numVotesAgainstKicking = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->numvotesagainstkicking(), output);
  }

  // required uint32 numVotesInFavourOfKicking = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->numvotesinfavourofkicking(), output);
  }

  // required uint32 resultPlayerKicked = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->resultplayerkicked(), output);
  }

  // required .EndKickPetitionMessage.PetitionEndReason petitionEndReason = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->petitionendreason(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:EndKickPetitionMessage)
}

size_t EndKickPetitionMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EndKickPetitionMessage)
  size_t total_size = 0;

  if (has_gameid()) {
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());
  }

  if (has_petitionid()) {
    // required uint32 petitionId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->petitionid());
  }

  if (has_numvotesagainstkicking()) {
    // required uint32 numVotesAgainstKicking = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesagainstkicking());
  }

  if (has_numvotesinfavourofkicking()) {
    // required uint32 numVotesInFavourOfKicking = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesinfavourofkicking());
  }

  if (has_resultplayerkicked()) {
    // required uint32 resultPlayerKicked = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resultplayerkicked());
  }

  if (has_petitionendreason()) {
    // required .EndKickPetitionMessage.PetitionEndReason petitionEndReason = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->petitionendreason());
  }

  return total_size;
}
size_t EndKickPetitionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EndKickPetitionMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required uint32 gameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gameid());

    // required uint32 petitionId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->petitionid());

    // required uint32 numVotesAgainstKicking = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesagainstkicking());

    // required uint32 numVotesInFavourOfKicking = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numvotesinfavourofkicking());

    // required uint32 resultPlayerKicked = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->resultplayerkicked());

    // required .EndKickPetitionMessage.PetitionEndReason petitionEndReason = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->petitionendreason());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndKickPetitionMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EndKickPetitionMessage*>(&from));
}

void EndKickPetitionMessage::MergeFrom(const EndKickPetitionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EndKickPetitionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      petitionid_ = from.petitionid_;
    }
    if (cached_has_bits & 0x00000004u) {
      numvotesagainstkicking_ = from.numvotesagainstkicking_;
    }
    if (cached_has_bits & 0x00000008u) {
      numvotesinfavourofkicking_ = from.numvotesinfavourofkicking_;
    }
    if (cached_has_bits & 0x00000010u) {
      resultplayerkicked_ = from.resultplayerkicked_;
    }
    if (cached_has_bits & 0x00000020u) {
      petitionendreason_ = from.petitionendreason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EndKickPetitionMessage::CopyFrom(const EndKickPetitionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EndKickPetitionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndKickPetitionMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void EndKickPetitionMessage::Swap(EndKickPetitionMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndKickPetitionMessage::InternalSwap(EndKickPetitionMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
  swap(petitionid_, other->petitionid_);
  swap(numvotesagainstkicking_, other->numvotesagainstkicking_);
  swap(numvotesinfavourofkicking_, other->numvotesinfavourofkicking_);
  swap(resultplayerkicked_, other->resultplayerkicked_);
  swap(petitionendreason_, other->petitionendreason_);
}

::std::string EndKickPetitionMessage::GetTypeName() const {
  return "EndKickPetitionMessage";
}


// ===================================================================

void StatisticsMessage_StatisticsData::InitAsDefaultInstance() {
}
class StatisticsMessage_StatisticsData::HasBitSetters {
 public:
  static void set_has_statisticstype(StatisticsMessage_StatisticsData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_statisticsvalue(StatisticsMessage_StatisticsData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatisticsMessage_StatisticsData::kStatisticsTypeFieldNumber;
const int StatisticsMessage_StatisticsData::kStatisticsValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatisticsMessage_StatisticsData::StatisticsMessage_StatisticsData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StatisticsMessage.StatisticsData)
}
StatisticsMessage_StatisticsData::StatisticsMessage_StatisticsData(const StatisticsMessage_StatisticsData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&statisticsvalue_, &from.statisticsvalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&statisticstype_) -
    reinterpret_cast<char*>(&statisticsvalue_)) + sizeof(statisticstype_));
  // @@protoc_insertion_point(copy_constructor:StatisticsMessage.StatisticsData)
}

void StatisticsMessage_StatisticsData::SharedCtor() {
  statisticsvalue_ = 0u;
  statisticstype_ = 1;
}

StatisticsMessage_StatisticsData::~StatisticsMessage_StatisticsData() {
  // @@protoc_insertion_point(destructor:StatisticsMessage.StatisticsData)
  SharedDtor();
}

void StatisticsMessage_StatisticsData::SharedDtor() {
}

void StatisticsMessage_StatisticsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatisticsMessage_StatisticsData& StatisticsMessage_StatisticsData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StatisticsMessage_StatisticsData_pokerth_2eproto.base);
  return *internal_default_instance();
}


void StatisticsMessage_StatisticsData::Clear() {
// @@protoc_insertion_point(message_clear_start:StatisticsMessage.StatisticsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    statisticsvalue_ = 0u;
    statisticstype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StatisticsMessage_StatisticsData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StatisticsMessage_StatisticsData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .StatisticsMessage.StatisticsData.StatisticsType statisticsType = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::StatisticsMessage_StatisticsData_StatisticsType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_statisticstype(static_cast<::StatisticsMessage_StatisticsData_StatisticsType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 statisticsValue = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_statisticsvalue(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StatisticsMessage_StatisticsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:StatisticsMessage.StatisticsData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .StatisticsMessage.StatisticsData.StatisticsType statisticsType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StatisticsMessage_StatisticsData_StatisticsType_IsValid(value)) {
            set_statisticstype(static_cast< ::StatisticsMessage_StatisticsData_StatisticsType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 statisticsValue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_statisticsvalue(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statisticsvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StatisticsMessage.StatisticsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StatisticsMessage.StatisticsData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StatisticsMessage_StatisticsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StatisticsMessage.StatisticsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .StatisticsMessage.StatisticsData.StatisticsType statisticsType = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->statisticstype(), output);
  }

  // required uint32 statisticsValue = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->statisticsvalue(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:StatisticsMessage.StatisticsData)
}

size_t StatisticsMessage_StatisticsData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:StatisticsMessage.StatisticsData)
  size_t total_size = 0;

  if (has_statisticsvalue()) {
    // required uint32 statisticsValue = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->statisticsvalue());
  }

  if (has_statisticstype()) {
    // required .StatisticsMessage.StatisticsData.StatisticsType statisticsType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->statisticstype());
  }

  return total_size;
}
size_t StatisticsMessage_StatisticsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatisticsMessage.StatisticsData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 statisticsValue = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->statisticsvalue());

    // required .StatisticsMessage.StatisticsData.StatisticsType statisticsType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->statisticstype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatisticsMessage_StatisticsData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StatisticsMessage_StatisticsData*>(&from));
}

void StatisticsMessage_StatisticsData::MergeFrom(const StatisticsMessage_StatisticsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StatisticsMessage.StatisticsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      statisticsvalue_ = from.statisticsvalue_;
    }
    if (cached_has_bits & 0x00000002u) {
      statisticstype_ = from.statisticstype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StatisticsMessage_StatisticsData::CopyFrom(const StatisticsMessage_StatisticsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatisticsMessage.StatisticsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticsMessage_StatisticsData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void StatisticsMessage_StatisticsData::Swap(StatisticsMessage_StatisticsData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatisticsMessage_StatisticsData::InternalSwap(StatisticsMessage_StatisticsData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(statisticsvalue_, other->statisticsvalue_);
  swap(statisticstype_, other->statisticstype_);
}

::std::string StatisticsMessage_StatisticsData::GetTypeName() const {
  return "StatisticsMessage.StatisticsData";
}


// ===================================================================

void StatisticsMessage::InitAsDefaultInstance() {
}
class StatisticsMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatisticsMessage::kStatisticsDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatisticsMessage::StatisticsMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StatisticsMessage)
}
StatisticsMessage::StatisticsMessage(const StatisticsMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      statisticsdata_(from.statisticsdata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StatisticsMessage)
}

void StatisticsMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StatisticsMessage_pokerth_2eproto.base);
}

StatisticsMessage::~StatisticsMessage() {
  // @@protoc_insertion_point(destructor:StatisticsMessage)
  SharedDtor();
}

void StatisticsMessage::SharedDtor() {
}

void StatisticsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatisticsMessage& StatisticsMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StatisticsMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void StatisticsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StatisticsMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  statisticsdata_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StatisticsMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StatisticsMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .StatisticsMessage.StatisticsData statisticsData = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::StatisticsMessage_StatisticsData::_InternalParse;
          object = msg->add_statisticsdata();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StatisticsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:StatisticsMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .StatisticsMessage.StatisticsData statisticsData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_statisticsdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StatisticsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StatisticsMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StatisticsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StatisticsMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StatisticsMessage.StatisticsData statisticsData = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->statisticsdata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->statisticsdata(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:StatisticsMessage)
}

size_t StatisticsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatisticsMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StatisticsMessage.StatisticsData statisticsData = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->statisticsdata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->statisticsdata(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatisticsMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StatisticsMessage*>(&from));
}

void StatisticsMessage::MergeFrom(const StatisticsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StatisticsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  statisticsdata_.MergeFrom(from.statisticsdata_);
}

void StatisticsMessage::CopyFrom(const StatisticsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatisticsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticsMessage::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->statisticsdata())) return false;
  return true;
}

void StatisticsMessage::Swap(StatisticsMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatisticsMessage::InternalSwap(StatisticsMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&statisticsdata_)->InternalSwap(CastToBase(&other->statisticsdata_));
}

::std::string StatisticsMessage::GetTypeName() const {
  return "StatisticsMessage";
}


// ===================================================================

void ChatRequestMessage::InitAsDefaultInstance() {
}
class ChatRequestMessage::HasBitSetters {
 public:
  static void set_has_targetgameid(ChatRequestMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_targetplayerid(ChatRequestMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_chattext(ChatRequestMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatRequestMessage::kTargetGameIdFieldNumber;
const int ChatRequestMessage::kTargetPlayerIdFieldNumber;
const int ChatRequestMessage::kChatTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatRequestMessage::ChatRequestMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatRequestMessage)
}
ChatRequestMessage::ChatRequestMessage(const ChatRequestMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chattext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chattext()) {
    chattext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chattext_);
  }
  ::memcpy(&targetgameid_, &from.targetgameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&targetplayerid_) -
    reinterpret_cast<char*>(&targetgameid_)) + sizeof(targetplayerid_));
  // @@protoc_insertion_point(copy_constructor:ChatRequestMessage)
}

void ChatRequestMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ChatRequestMessage_pokerth_2eproto.base);
  chattext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&targetgameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetplayerid_) -
      reinterpret_cast<char*>(&targetgameid_)) + sizeof(targetplayerid_));
}

ChatRequestMessage::~ChatRequestMessage() {
  // @@protoc_insertion_point(destructor:ChatRequestMessage)
  SharedDtor();
}

void ChatRequestMessage::SharedDtor() {
  chattext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatRequestMessage& ChatRequestMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ChatRequestMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void ChatRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    chattext_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&targetgameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&targetplayerid_) -
        reinterpret_cast<char*>(&targetgameid_)) + sizeof(targetplayerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChatRequestMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ChatRequestMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 targetGameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_targetgameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 targetPlayerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_targetplayerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required string chatText = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_chattext();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChatRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ChatRequestMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 targetGameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_targetgameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetgameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 targetPlayerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_targetplayerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetplayerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string chatText = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chattext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChatRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChatRequestMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChatRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChatRequestMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 targetGameId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetgameid(), output);
  }

  // optional uint32 targetPlayerId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetplayerid(), output);
  }

  // required string chatText = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->chattext(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ChatRequestMessage)
}

size_t ChatRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatRequestMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required string chatText = 3;
  if (has_chattext()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chattext());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint32 targetGameId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetgameid());
    }

    // optional uint32 targetPlayerId = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetplayerid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatRequestMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChatRequestMessage*>(&from));
}

void ChatRequestMessage::MergeFrom(const ChatRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      chattext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chattext_);
    }
    if (cached_has_bits & 0x00000002u) {
      targetgameid_ = from.targetgameid_;
    }
    if (cached_has_bits & 0x00000004u) {
      targetplayerid_ = from.targetplayerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatRequestMessage::CopyFrom(const ChatRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ChatRequestMessage::Swap(ChatRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatRequestMessage::InternalSwap(ChatRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chattext_.Swap(&other->chattext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(targetgameid_, other->targetgameid_);
  swap(targetplayerid_, other->targetplayerid_);
}

::std::string ChatRequestMessage::GetTypeName() const {
  return "ChatRequestMessage";
}


// ===================================================================

void ChatMessage::InitAsDefaultInstance() {
}
class ChatMessage::HasBitSetters {
 public:
  static void set_has_gameid(ChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_playerid(ChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_chattype(ChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_chattext(ChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatMessage::kGameIdFieldNumber;
const int ChatMessage::kPlayerIdFieldNumber;
const int ChatMessage::kChatTypeFieldNumber;
const int ChatMessage::kChatTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatMessage::ChatMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessage)
}
ChatMessage::ChatMessage(const ChatMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chattext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chattext()) {
    chattext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chattext_);
  }
  ::memcpy(&gameid_, &from.gameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&chattype_) -
    reinterpret_cast<char*>(&gameid_)) + sizeof(chattype_));
  // @@protoc_insertion_point(copy_constructor:ChatMessage)
}

void ChatMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ChatMessage_pokerth_2eproto.base);
  chattext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chattype_) -
      reinterpret_cast<char*>(&gameid_)) + sizeof(chattype_));
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:ChatMessage)
  SharedDtor();
}

void ChatMessage::SharedDtor() {
  chattext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatMessage& ChatMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ChatMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    chattext_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&gameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chattype_) -
        reinterpret_cast<char*>(&gameid_)) + sizeof(chattype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChatMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ChatMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 gameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 playerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_playerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .ChatMessage.ChatType chatType = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::ChatMessage_ChatType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_chattype(static_cast<::ChatMessage_ChatType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required string chatText = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_chattext();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ChatMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_playerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ChatMessage.ChatType chatType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChatMessage_ChatType_IsValid(value)) {
            set_chattype(static_cast< ::ChatMessage_ChatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string chatText = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chattext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChatMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gameId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }

  // optional uint32 playerId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required .ChatMessage.ChatType chatType = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->chattype(), output);
  }

  // required string chatText = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->chattext(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ChatMessage)
}

size_t ChatMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ChatMessage)
  size_t total_size = 0;

  if (has_chattext()) {
    // required string chatText = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chattext());
  }

  if (has_chattype()) {
    // required .ChatMessage.ChatType chatType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->chattype());
  }

  return total_size;
}
size_t ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required string chatText = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chattext());

    // required .ChatMessage.ChatType chatType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->chattype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint32 gameId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional uint32 playerId = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChatMessage*>(&from));
}

void ChatMessage::MergeFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      chattext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chattext_);
    }
    if (cached_has_bits & 0x00000002u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000004u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000008u) {
      chattype_ = from.chattype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  return true;
}

void ChatMessage::Swap(ChatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatMessage::InternalSwap(ChatMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chattext_.Swap(&other->chattext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gameid_, other->gameid_);
  swap(playerid_, other->playerid_);
  swap(chattype_, other->chattype_);
}

::std::string ChatMessage::GetTypeName() const {
  return "ChatMessage";
}


// ===================================================================

void ChatRejectMessage::InitAsDefaultInstance() {
}
class ChatRejectMessage::HasBitSetters {
 public:
  static void set_has_chattext(ChatRejectMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatRejectMessage::kChatTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatRejectMessage::ChatRejectMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatRejectMessage)
}
ChatRejectMessage::ChatRejectMessage(const ChatRejectMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chattext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chattext()) {
    chattext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chattext_);
  }
  // @@protoc_insertion_point(copy_constructor:ChatRejectMessage)
}

void ChatRejectMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ChatRejectMessage_pokerth_2eproto.base);
  chattext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChatRejectMessage::~ChatRejectMessage() {
  // @@protoc_insertion_point(destructor:ChatRejectMessage)
  SharedDtor();
}

void ChatRejectMessage::SharedDtor() {
  chattext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatRejectMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatRejectMessage& ChatRejectMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ChatRejectMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void ChatRejectMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatRejectMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    chattext_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChatRejectMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ChatRejectMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required string chatText = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_chattext();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChatRejectMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ChatRejectMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string chatText = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chattext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChatRejectMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChatRejectMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChatRejectMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChatRejectMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string chatText = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->chattext(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ChatRejectMessage)
}

size_t ChatRejectMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatRejectMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required string chatText = 1;
  if (has_chattext()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chattext());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatRejectMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChatRejectMessage*>(&from));
}

void ChatRejectMessage::MergeFrom(const ChatRejectMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatRejectMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chattext()) {
    _has_bits_[0] |= 0x00000001u;
    chattext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chattext_);
  }
}

void ChatRejectMessage::CopyFrom(const ChatRejectMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatRejectMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRejectMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ChatRejectMessage::Swap(ChatRejectMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatRejectMessage::InternalSwap(ChatRejectMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chattext_.Swap(&other->chattext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string ChatRejectMessage::GetTypeName() const {
  return "ChatRejectMessage";
}


// ===================================================================

void DialogMessage::InitAsDefaultInstance() {
}
class DialogMessage::HasBitSetters {
 public:
  static void set_has_notificationtext(DialogMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DialogMessage::kNotificationTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DialogMessage::DialogMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DialogMessage)
}
DialogMessage::DialogMessage(const DialogMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  notificationtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_notificationtext()) {
    notificationtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notificationtext_);
  }
  // @@protoc_insertion_point(copy_constructor:DialogMessage)
}

void DialogMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DialogMessage_pokerth_2eproto.base);
  notificationtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DialogMessage::~DialogMessage() {
  // @@protoc_insertion_point(destructor:DialogMessage)
  SharedDtor();
}

void DialogMessage::SharedDtor() {
  notificationtext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DialogMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DialogMessage& DialogMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DialogMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void DialogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DialogMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    notificationtext_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DialogMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DialogMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required string notificationText = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_notificationtext();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DialogMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:DialogMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string notificationText = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notificationtext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DialogMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DialogMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DialogMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DialogMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string notificationText = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->notificationtext(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:DialogMessage)
}

size_t DialogMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DialogMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required string notificationText = 1;
  if (has_notificationtext()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->notificationtext());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DialogMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DialogMessage*>(&from));
}

void DialogMessage::MergeFrom(const DialogMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DialogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_notificationtext()) {
    _has_bits_[0] |= 0x00000001u;
    notificationtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notificationtext_);
  }
}

void DialogMessage::CopyFrom(const DialogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DialogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DialogMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DialogMessage::Swap(DialogMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DialogMessage::InternalSwap(DialogMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  notificationtext_.Swap(&other->notificationtext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string DialogMessage::GetTypeName() const {
  return "DialogMessage";
}


// ===================================================================

void TimeoutWarningMessage::InitAsDefaultInstance() {
}
class TimeoutWarningMessage::HasBitSetters {
 public:
  static void set_has_timeoutreason(TimeoutWarningMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_remainingseconds(TimeoutWarningMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeoutWarningMessage::kTimeoutReasonFieldNumber;
const int TimeoutWarningMessage::kRemainingSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeoutWarningMessage::TimeoutWarningMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TimeoutWarningMessage)
}
TimeoutWarningMessage::TimeoutWarningMessage(const TimeoutWarningMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timeoutreason_, &from.timeoutreason_,
    static_cast<size_t>(reinterpret_cast<char*>(&remainingseconds_) -
    reinterpret_cast<char*>(&timeoutreason_)) + sizeof(remainingseconds_));
  // @@protoc_insertion_point(copy_constructor:TimeoutWarningMessage)
}

void TimeoutWarningMessage::SharedCtor() {
  ::memset(&timeoutreason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remainingseconds_) -
      reinterpret_cast<char*>(&timeoutreason_)) + sizeof(remainingseconds_));
}

TimeoutWarningMessage::~TimeoutWarningMessage() {
  // @@protoc_insertion_point(destructor:TimeoutWarningMessage)
  SharedDtor();
}

void TimeoutWarningMessage::SharedDtor() {
}

void TimeoutWarningMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeoutWarningMessage& TimeoutWarningMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TimeoutWarningMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void TimeoutWarningMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TimeoutWarningMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&timeoutreason_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&remainingseconds_) -
        reinterpret_cast<char*>(&timeoutreason_)) + sizeof(remainingseconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TimeoutWarningMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TimeoutWarningMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .TimeoutWarningMessage.TimeoutReason timeoutReason = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::TimeoutWarningMessage_TimeoutReason_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_timeoutreason(static_cast<::TimeoutWarningMessage_TimeoutReason>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 remainingSeconds = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_remainingseconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TimeoutWarningMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:TimeoutWarningMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TimeoutWarningMessage.TimeoutReason timeoutReason = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TimeoutWarningMessage_TimeoutReason_IsValid(value)) {
            set_timeoutreason(static_cast< ::TimeoutWarningMessage_TimeoutReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 remainingSeconds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_remainingseconds(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remainingseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TimeoutWarningMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TimeoutWarningMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TimeoutWarningMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TimeoutWarningMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TimeoutWarningMessage.TimeoutReason timeoutReason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->timeoutreason(), output);
  }

  // required uint32 remainingSeconds = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remainingseconds(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:TimeoutWarningMessage)
}

size_t TimeoutWarningMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TimeoutWarningMessage)
  size_t total_size = 0;

  if (has_timeoutreason()) {
    // required .TimeoutWarningMessage.TimeoutReason timeoutReason = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeoutreason());
  }

  if (has_remainingseconds()) {
    // required uint32 remainingSeconds = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remainingseconds());
  }

  return total_size;
}
size_t TimeoutWarningMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TimeoutWarningMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TimeoutWarningMessage.TimeoutReason timeoutReason = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeoutreason());

    // required uint32 remainingSeconds = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remainingseconds());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeoutWarningMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TimeoutWarningMessage*>(&from));
}

void TimeoutWarningMessage::MergeFrom(const TimeoutWarningMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TimeoutWarningMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      timeoutreason_ = from.timeoutreason_;
    }
    if (cached_has_bits & 0x00000002u) {
      remainingseconds_ = from.remainingseconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimeoutWarningMessage::CopyFrom(const TimeoutWarningMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TimeoutWarningMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeoutWarningMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TimeoutWarningMessage::Swap(TimeoutWarningMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeoutWarningMessage::InternalSwap(TimeoutWarningMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timeoutreason_, other->timeoutreason_);
  swap(remainingseconds_, other->remainingseconds_);
}

::std::string TimeoutWarningMessage::GetTypeName() const {
  return "TimeoutWarningMessage";
}


// ===================================================================

void ResetTimeoutMessage::InitAsDefaultInstance() {
}
class ResetTimeoutMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetTimeoutMessage::ResetTimeoutMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ResetTimeoutMessage)
}
ResetTimeoutMessage::ResetTimeoutMessage(const ResetTimeoutMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ResetTimeoutMessage)
}

void ResetTimeoutMessage::SharedCtor() {
}

ResetTimeoutMessage::~ResetTimeoutMessage() {
  // @@protoc_insertion_point(destructor:ResetTimeoutMessage)
  SharedDtor();
}

void ResetTimeoutMessage::SharedDtor() {
}

void ResetTimeoutMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetTimeoutMessage& ResetTimeoutMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ResetTimeoutMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void ResetTimeoutMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ResetTimeoutMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResetTimeoutMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ResetTimeoutMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResetTimeoutMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ResetTimeoutMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:ResetTimeoutMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ResetTimeoutMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResetTimeoutMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ResetTimeoutMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ResetTimeoutMessage)
}

size_t ResetTimeoutMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResetTimeoutMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetTimeoutMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResetTimeoutMessage*>(&from));
}

void ResetTimeoutMessage::MergeFrom(const ResetTimeoutMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResetTimeoutMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResetTimeoutMessage::CopyFrom(const ResetTimeoutMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResetTimeoutMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetTimeoutMessage::IsInitialized() const {
  return true;
}

void ResetTimeoutMessage::Swap(ResetTimeoutMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetTimeoutMessage::InternalSwap(ResetTimeoutMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::std::string ResetTimeoutMessage::GetTypeName() const {
  return "ResetTimeoutMessage";
}


// ===================================================================

void ReportAvatarMessage::InitAsDefaultInstance() {
}
class ReportAvatarMessage::HasBitSetters {
 public:
  static void set_has_reportedplayerid(ReportAvatarMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_reportedavatarhash(ReportAvatarMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportAvatarMessage::kReportedPlayerIdFieldNumber;
const int ReportAvatarMessage::kReportedAvatarHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportAvatarMessage::ReportAvatarMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReportAvatarMessage)
}
ReportAvatarMessage::ReportAvatarMessage(const ReportAvatarMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reportedavatarhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reportedavatarhash()) {
    reportedavatarhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reportedavatarhash_);
  }
  reportedplayerid_ = from.reportedplayerid_;
  // @@protoc_insertion_point(copy_constructor:ReportAvatarMessage)
}

void ReportAvatarMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ReportAvatarMessage_pokerth_2eproto.base);
  reportedavatarhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reportedplayerid_ = 0u;
}

ReportAvatarMessage::~ReportAvatarMessage() {
  // @@protoc_insertion_point(destructor:ReportAvatarMessage)
  SharedDtor();
}

void ReportAvatarMessage::SharedDtor() {
  reportedavatarhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReportAvatarMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportAvatarMessage& ReportAvatarMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReportAvatarMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void ReportAvatarMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ReportAvatarMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reportedavatarhash_.ClearNonDefaultToEmptyNoArena();
  }
  reportedplayerid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReportAvatarMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReportAvatarMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 reportedPlayerId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_reportedplayerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required bytes reportedAvatarHash = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_reportedavatarhash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReportAvatarMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ReportAvatarMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reportedPlayerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_reportedplayerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reportedplayerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes reportedAvatarHash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reportedavatarhash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReportAvatarMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReportAvatarMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReportAvatarMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReportAvatarMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 reportedPlayerId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reportedplayerid(), output);
  }

  // required bytes reportedAvatarHash = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->reportedavatarhash(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ReportAvatarMessage)
}

size_t ReportAvatarMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ReportAvatarMessage)
  size_t total_size = 0;

  if (has_reportedavatarhash()) {
    // required bytes reportedAvatarHash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reportedavatarhash());
  }

  if (has_reportedplayerid()) {
    // required uint32 reportedPlayerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reportedplayerid());
  }

  return total_size;
}
size_t ReportAvatarMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReportAvatarMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes reportedAvatarHash = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reportedavatarhash());

    // required uint32 reportedPlayerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reportedplayerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportAvatarMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReportAvatarMessage*>(&from));
}

void ReportAvatarMessage::MergeFrom(const ReportAvatarMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReportAvatarMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      reportedavatarhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reportedavatarhash_);
    }
    if (cached_has_bits & 0x00000002u) {
      reportedplayerid_ = from.reportedplayerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReportAvatarMessage::CopyFrom(const ReportAvatarMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReportAvatarMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportAvatarMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ReportAvatarMessage::Swap(ReportAvatarMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportAvatarMessage::InternalSwap(ReportAvatarMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reportedavatarhash_.Swap(&other->reportedavatarhash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reportedplayerid_, other->reportedplayerid_);
}

::std::string ReportAvatarMessage::GetTypeName() const {
  return "ReportAvatarMessage";
}


// ===================================================================

void ReportAvatarAckMessage::InitAsDefaultInstance() {
}
class ReportAvatarAckMessage::HasBitSetters {
 public:
  static void set_has_reportedplayerid(ReportAvatarAckMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_reportavatarresult(ReportAvatarAckMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportAvatarAckMessage::kReportedPlayerIdFieldNumber;
const int ReportAvatarAckMessage::kReportAvatarResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportAvatarAckMessage::ReportAvatarAckMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReportAvatarAckMessage)
}
ReportAvatarAckMessage::ReportAvatarAckMessage(const ReportAvatarAckMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reportedplayerid_, &from.reportedplayerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reportavatarresult_) -
    reinterpret_cast<char*>(&reportedplayerid_)) + sizeof(reportavatarresult_));
  // @@protoc_insertion_point(copy_constructor:ReportAvatarAckMessage)
}

void ReportAvatarAckMessage::SharedCtor() {
  ::memset(&reportedplayerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reportavatarresult_) -
      reinterpret_cast<char*>(&reportedplayerid_)) + sizeof(reportavatarresult_));
}

ReportAvatarAckMessage::~ReportAvatarAckMessage() {
  // @@protoc_insertion_point(destructor:ReportAvatarAckMessage)
  SharedDtor();
}

void ReportAvatarAckMessage::SharedDtor() {
}

void ReportAvatarAckMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportAvatarAckMessage& ReportAvatarAckMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReportAvatarAckMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void ReportAvatarAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ReportAvatarAckMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&reportedplayerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reportavatarresult_) -
        reinterpret_cast<char*>(&reportedplayerid_)) + sizeof(reportavatarresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReportAvatarAckMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReportAvatarAckMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 reportedPlayerId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_reportedplayerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .ReportAvatarAckMessage.ReportAvatarResult reportAvatarResult = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::ReportAvatarAckMessage_ReportAvatarResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_reportavatarresult(static_cast<::ReportAvatarAckMessage_ReportAvatarResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReportAvatarAckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ReportAvatarAckMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reportedPlayerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_reportedplayerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reportedplayerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ReportAvatarAckMessage.ReportAvatarResult reportAvatarResult = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ReportAvatarAckMessage_ReportAvatarResult_IsValid(value)) {
            set_reportavatarresult(static_cast< ::ReportAvatarAckMessage_ReportAvatarResult >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReportAvatarAckMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReportAvatarAckMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReportAvatarAckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReportAvatarAckMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 reportedPlayerId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reportedplayerid(), output);
  }

  // required .ReportAvatarAckMessage.ReportAvatarResult reportAvatarResult = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reportavatarresult(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ReportAvatarAckMessage)
}

size_t ReportAvatarAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ReportAvatarAckMessage)
  size_t total_size = 0;

  if (has_reportedplayerid()) {
    // required uint32 reportedPlayerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reportedplayerid());
  }

  if (has_reportavatarresult()) {
    // required .ReportAvatarAckMessage.ReportAvatarResult reportAvatarResult = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reportavatarresult());
  }

  return total_size;
}
size_t ReportAvatarAckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReportAvatarAckMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 reportedPlayerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reportedplayerid());

    // required .ReportAvatarAckMessage.ReportAvatarResult reportAvatarResult = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reportavatarresult());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportAvatarAckMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReportAvatarAckMessage*>(&from));
}

void ReportAvatarAckMessage::MergeFrom(const ReportAvatarAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReportAvatarAckMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      reportedplayerid_ = from.reportedplayerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      reportavatarresult_ = from.reportavatarresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReportAvatarAckMessage::CopyFrom(const ReportAvatarAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReportAvatarAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportAvatarAckMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ReportAvatarAckMessage::Swap(ReportAvatarAckMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportAvatarAckMessage::InternalSwap(ReportAvatarAckMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(reportedplayerid_, other->reportedplayerid_);
  swap(reportavatarresult_, other->reportavatarresult_);
}

::std::string ReportAvatarAckMessage::GetTypeName() const {
  return "ReportAvatarAckMessage";
}


// ===================================================================

void ReportGameMessage::InitAsDefaultInstance() {
}
class ReportGameMessage::HasBitSetters {
 public:
  static void set_has_reportedgameid(ReportGameMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportGameMessage::kReportedGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportGameMessage::ReportGameMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReportGameMessage)
}
ReportGameMessage::ReportGameMessage(const ReportGameMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reportedgameid_ = from.reportedgameid_;
  // @@protoc_insertion_point(copy_constructor:ReportGameMessage)
}

void ReportGameMessage::SharedCtor() {
  reportedgameid_ = 0u;
}

ReportGameMessage::~ReportGameMessage() {
  // @@protoc_insertion_point(destructor:ReportGameMessage)
  SharedDtor();
}

void ReportGameMessage::SharedDtor() {
}

void ReportGameMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportGameMessage& ReportGameMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReportGameMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void ReportGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ReportGameMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reportedgameid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReportGameMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReportGameMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 reportedGameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_reportedgameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReportGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ReportGameMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reportedGameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_reportedgameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reportedgameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReportGameMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReportGameMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReportGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReportGameMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 reportedGameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reportedgameid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ReportGameMessage)
}

size_t ReportGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReportGameMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 reportedGameId = 1;
  if (has_reportedgameid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reportedgameid());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportGameMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReportGameMessage*>(&from));
}

void ReportGameMessage::MergeFrom(const ReportGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReportGameMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reportedgameid()) {
    set_reportedgameid(from.reportedgameid());
  }
}

void ReportGameMessage::CopyFrom(const ReportGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReportGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ReportGameMessage::Swap(ReportGameMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportGameMessage::InternalSwap(ReportGameMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(reportedgameid_, other->reportedgameid_);
}

::std::string ReportGameMessage::GetTypeName() const {
  return "ReportGameMessage";
}


// ===================================================================

void ReportGameAckMessage::InitAsDefaultInstance() {
}
class ReportGameAckMessage::HasBitSetters {
 public:
  static void set_has_reportedgameid(ReportGameAckMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_reportgameresult(ReportGameAckMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportGameAckMessage::kReportedGameIdFieldNumber;
const int ReportGameAckMessage::kReportGameResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportGameAckMessage::ReportGameAckMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReportGameAckMessage)
}
ReportGameAckMessage::ReportGameAckMessage(const ReportGameAckMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reportedgameid_, &from.reportedgameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reportgameresult_) -
    reinterpret_cast<char*>(&reportedgameid_)) + sizeof(reportgameresult_));
  // @@protoc_insertion_point(copy_constructor:ReportGameAckMessage)
}

void ReportGameAckMessage::SharedCtor() {
  ::memset(&reportedgameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reportgameresult_) -
      reinterpret_cast<char*>(&reportedgameid_)) + sizeof(reportgameresult_));
}

ReportGameAckMessage::~ReportGameAckMessage() {
  // @@protoc_insertion_point(destructor:ReportGameAckMessage)
  SharedDtor();
}

void ReportGameAckMessage::SharedDtor() {
}

void ReportGameAckMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportGameAckMessage& ReportGameAckMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReportGameAckMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void ReportGameAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ReportGameAckMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&reportedgameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reportgameresult_) -
        reinterpret_cast<char*>(&reportedgameid_)) + sizeof(reportgameresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReportGameAckMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReportGameAckMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 reportedGameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_reportedgameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .ReportGameAckMessage.ReportGameResult reportGameResult = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::ReportGameAckMessage_ReportGameResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_reportgameresult(static_cast<::ReportGameAckMessage_ReportGameResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReportGameAckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ReportGameAckMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reportedGameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_reportedgameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reportedgameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ReportGameAckMessage.ReportGameResult reportGameResult = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ReportGameAckMessage_ReportGameResult_IsValid(value)) {
            set_reportgameresult(static_cast< ::ReportGameAckMessage_ReportGameResult >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReportGameAckMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReportGameAckMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReportGameAckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReportGameAckMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 reportedGameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reportedgameid(), output);
  }

  // required .ReportGameAckMessage.ReportGameResult reportGameResult = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reportgameresult(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ReportGameAckMessage)
}

size_t ReportGameAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ReportGameAckMessage)
  size_t total_size = 0;

  if (has_reportedgameid()) {
    // required uint32 reportedGameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reportedgameid());
  }

  if (has_reportgameresult()) {
    // required .ReportGameAckMessage.ReportGameResult reportGameResult = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reportgameresult());
  }

  return total_size;
}
size_t ReportGameAckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReportGameAckMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 reportedGameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reportedgameid());

    // required .ReportGameAckMessage.ReportGameResult reportGameResult = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reportgameresult());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportGameAckMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReportGameAckMessage*>(&from));
}

void ReportGameAckMessage::MergeFrom(const ReportGameAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReportGameAckMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      reportedgameid_ = from.reportedgameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      reportgameresult_ = from.reportgameresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReportGameAckMessage::CopyFrom(const ReportGameAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReportGameAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportGameAckMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ReportGameAckMessage::Swap(ReportGameAckMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportGameAckMessage::InternalSwap(ReportGameAckMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(reportedgameid_, other->reportedgameid_);
  swap(reportgameresult_, other->reportgameresult_);
}

::std::string ReportGameAckMessage::GetTypeName() const {
  return "ReportGameAckMessage";
}


// ===================================================================

void ErrorMessage::InitAsDefaultInstance() {
}
class ErrorMessage::HasBitSetters {
 public:
  static void set_has_errorreason(ErrorMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ErrorMessage::kErrorReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ErrorMessage::ErrorMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ErrorMessage)
}
ErrorMessage::ErrorMessage(const ErrorMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errorreason_ = from.errorreason_;
  // @@protoc_insertion_point(copy_constructor:ErrorMessage)
}

void ErrorMessage::SharedCtor() {
  errorreason_ = 0;
}

ErrorMessage::~ErrorMessage() {
  // @@protoc_insertion_point(destructor:ErrorMessage)
  SharedDtor();
}

void ErrorMessage::SharedDtor() {
}

void ErrorMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErrorMessage& ErrorMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ErrorMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void ErrorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ErrorMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errorreason_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ErrorMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ErrorMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .ErrorMessage.ErrorReason errorReason = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::ErrorMessage_ErrorReason_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_errorreason(static_cast<::ErrorMessage_ErrorReason>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ErrorMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ErrorMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ErrorMessage.ErrorReason errorReason = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ErrorMessage_ErrorReason_IsValid(value)) {
            set_errorreason(static_cast< ::ErrorMessage_ErrorReason >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ErrorMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ErrorMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ErrorMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ErrorMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ErrorMessage.ErrorReason errorReason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errorreason(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ErrorMessage)
}

size_t ErrorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ErrorMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .ErrorMessage.ErrorReason errorReason = 1;
  if (has_errorreason()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errorreason());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ErrorMessage*>(&from));
}

void ErrorMessage::MergeFrom(const ErrorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ErrorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_errorreason()) {
    set_errorreason(from.errorreason());
  }
}

void ErrorMessage::CopyFrom(const ErrorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ErrorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ErrorMessage::Swap(ErrorMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ErrorMessage::InternalSwap(ErrorMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(errorreason_, other->errorreason_);
}

::std::string ErrorMessage::GetTypeName() const {
  return "ErrorMessage";
}


// ===================================================================

void AdminRemoveGameMessage::InitAsDefaultInstance() {
}
class AdminRemoveGameMessage::HasBitSetters {
 public:
  static void set_has_removegameid(AdminRemoveGameMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminRemoveGameMessage::kRemoveGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminRemoveGameMessage::AdminRemoveGameMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AdminRemoveGameMessage)
}
AdminRemoveGameMessage::AdminRemoveGameMessage(const AdminRemoveGameMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  removegameid_ = from.removegameid_;
  // @@protoc_insertion_point(copy_constructor:AdminRemoveGameMessage)
}

void AdminRemoveGameMessage::SharedCtor() {
  removegameid_ = 0u;
}

AdminRemoveGameMessage::~AdminRemoveGameMessage() {
  // @@protoc_insertion_point(destructor:AdminRemoveGameMessage)
  SharedDtor();
}

void AdminRemoveGameMessage::SharedDtor() {
}

void AdminRemoveGameMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminRemoveGameMessage& AdminRemoveGameMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AdminRemoveGameMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AdminRemoveGameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AdminRemoveGameMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  removegameid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdminRemoveGameMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AdminRemoveGameMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 removeGameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_removegameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdminRemoveGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:AdminRemoveGameMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 removeGameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_removegameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &removegameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AdminRemoveGameMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AdminRemoveGameMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdminRemoveGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AdminRemoveGameMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 removeGameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->removegameid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AdminRemoveGameMessage)
}

size_t AdminRemoveGameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AdminRemoveGameMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 removeGameId = 1;
  if (has_removegameid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->removegameid());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminRemoveGameMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminRemoveGameMessage*>(&from));
}

void AdminRemoveGameMessage::MergeFrom(const AdminRemoveGameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AdminRemoveGameMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_removegameid()) {
    set_removegameid(from.removegameid());
  }
}

void AdminRemoveGameMessage::CopyFrom(const AdminRemoveGameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdminRemoveGameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminRemoveGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AdminRemoveGameMessage::Swap(AdminRemoveGameMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminRemoveGameMessage::InternalSwap(AdminRemoveGameMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(removegameid_, other->removegameid_);
}

::std::string AdminRemoveGameMessage::GetTypeName() const {
  return "AdminRemoveGameMessage";
}


// ===================================================================

void AdminRemoveGameAckMessage::InitAsDefaultInstance() {
}
class AdminRemoveGameAckMessage::HasBitSetters {
 public:
  static void set_has_removegameid(AdminRemoveGameAckMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_removegameresult(AdminRemoveGameAckMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminRemoveGameAckMessage::kRemoveGameIdFieldNumber;
const int AdminRemoveGameAckMessage::kRemoveGameResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminRemoveGameAckMessage::AdminRemoveGameAckMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AdminRemoveGameAckMessage)
}
AdminRemoveGameAckMessage::AdminRemoveGameAckMessage(const AdminRemoveGameAckMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&removegameid_, &from.removegameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&removegameresult_) -
    reinterpret_cast<char*>(&removegameid_)) + sizeof(removegameresult_));
  // @@protoc_insertion_point(copy_constructor:AdminRemoveGameAckMessage)
}

void AdminRemoveGameAckMessage::SharedCtor() {
  ::memset(&removegameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&removegameresult_) -
      reinterpret_cast<char*>(&removegameid_)) + sizeof(removegameresult_));
}

AdminRemoveGameAckMessage::~AdminRemoveGameAckMessage() {
  // @@protoc_insertion_point(destructor:AdminRemoveGameAckMessage)
  SharedDtor();
}

void AdminRemoveGameAckMessage::SharedDtor() {
}

void AdminRemoveGameAckMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminRemoveGameAckMessage& AdminRemoveGameAckMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AdminRemoveGameAckMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AdminRemoveGameAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AdminRemoveGameAckMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&removegameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&removegameresult_) -
        reinterpret_cast<char*>(&removegameid_)) + sizeof(removegameresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdminRemoveGameAckMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AdminRemoveGameAckMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 removeGameId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_removegameid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .AdminRemoveGameAckMessage.AdminRemoveGameResult removeGameResult = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::AdminRemoveGameAckMessage_AdminRemoveGameResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_removegameresult(static_cast<::AdminRemoveGameAckMessage_AdminRemoveGameResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdminRemoveGameAckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:AdminRemoveGameAckMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 removeGameId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_removegameid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &removegameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .AdminRemoveGameAckMessage.AdminRemoveGameResult removeGameResult = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AdminRemoveGameAckMessage_AdminRemoveGameResult_IsValid(value)) {
            set_removegameresult(static_cast< ::AdminRemoveGameAckMessage_AdminRemoveGameResult >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AdminRemoveGameAckMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AdminRemoveGameAckMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdminRemoveGameAckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AdminRemoveGameAckMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 removeGameId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->removegameid(), output);
  }

  // required .AdminRemoveGameAckMessage.AdminRemoveGameResult removeGameResult = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->removegameresult(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AdminRemoveGameAckMessage)
}

size_t AdminRemoveGameAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AdminRemoveGameAckMessage)
  size_t total_size = 0;

  if (has_removegameid()) {
    // required uint32 removeGameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->removegameid());
  }

  if (has_removegameresult()) {
    // required .AdminRemoveGameAckMessage.AdminRemoveGameResult removeGameResult = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->removegameresult());
  }

  return total_size;
}
size_t AdminRemoveGameAckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AdminRemoveGameAckMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 removeGameId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->removegameid());

    // required .AdminRemoveGameAckMessage.AdminRemoveGameResult removeGameResult = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->removegameresult());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminRemoveGameAckMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminRemoveGameAckMessage*>(&from));
}

void AdminRemoveGameAckMessage::MergeFrom(const AdminRemoveGameAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AdminRemoveGameAckMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      removegameid_ = from.removegameid_;
    }
    if (cached_has_bits & 0x00000002u) {
      removegameresult_ = from.removegameresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AdminRemoveGameAckMessage::CopyFrom(const AdminRemoveGameAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdminRemoveGameAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminRemoveGameAckMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AdminRemoveGameAckMessage::Swap(AdminRemoveGameAckMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminRemoveGameAckMessage::InternalSwap(AdminRemoveGameAckMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(removegameid_, other->removegameid_);
  swap(removegameresult_, other->removegameresult_);
}

::std::string AdminRemoveGameAckMessage::GetTypeName() const {
  return "AdminRemoveGameAckMessage";
}


// ===================================================================

void AdminBanPlayerMessage::InitAsDefaultInstance() {
}
class AdminBanPlayerMessage::HasBitSetters {
 public:
  static void set_has_banplayerid(AdminBanPlayerMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminBanPlayerMessage::kBanPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminBanPlayerMessage::AdminBanPlayerMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AdminBanPlayerMessage)
}
AdminBanPlayerMessage::AdminBanPlayerMessage(const AdminBanPlayerMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  banplayerid_ = from.banplayerid_;
  // @@protoc_insertion_point(copy_constructor:AdminBanPlayerMessage)
}

void AdminBanPlayerMessage::SharedCtor() {
  banplayerid_ = 0u;
}

AdminBanPlayerMessage::~AdminBanPlayerMessage() {
  // @@protoc_insertion_point(destructor:AdminBanPlayerMessage)
  SharedDtor();
}

void AdminBanPlayerMessage::SharedDtor() {
}

void AdminBanPlayerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminBanPlayerMessage& AdminBanPlayerMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AdminBanPlayerMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AdminBanPlayerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AdminBanPlayerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  banplayerid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdminBanPlayerMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AdminBanPlayerMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 banPlayerId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_banplayerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdminBanPlayerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:AdminBanPlayerMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 banPlayerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_banplayerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banplayerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AdminBanPlayerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AdminBanPlayerMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdminBanPlayerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AdminBanPlayerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 banPlayerId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->banplayerid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AdminBanPlayerMessage)
}

size_t AdminBanPlayerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AdminBanPlayerMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 banPlayerId = 1;
  if (has_banplayerid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->banplayerid());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminBanPlayerMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminBanPlayerMessage*>(&from));
}

void AdminBanPlayerMessage::MergeFrom(const AdminBanPlayerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AdminBanPlayerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_banplayerid()) {
    set_banplayerid(from.banplayerid());
  }
}

void AdminBanPlayerMessage::CopyFrom(const AdminBanPlayerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdminBanPlayerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminBanPlayerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AdminBanPlayerMessage::Swap(AdminBanPlayerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminBanPlayerMessage::InternalSwap(AdminBanPlayerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(banplayerid_, other->banplayerid_);
}

::std::string AdminBanPlayerMessage::GetTypeName() const {
  return "AdminBanPlayerMessage";
}


// ===================================================================

void AdminBanPlayerAckMessage::InitAsDefaultInstance() {
}
class AdminBanPlayerAckMessage::HasBitSetters {
 public:
  static void set_has_banplayerid(AdminBanPlayerAckMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_banplayerresult(AdminBanPlayerAckMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminBanPlayerAckMessage::kBanPlayerIdFieldNumber;
const int AdminBanPlayerAckMessage::kBanPlayerResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminBanPlayerAckMessage::AdminBanPlayerAckMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AdminBanPlayerAckMessage)
}
AdminBanPlayerAckMessage::AdminBanPlayerAckMessage(const AdminBanPlayerAckMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&banplayerid_, &from.banplayerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&banplayerresult_) -
    reinterpret_cast<char*>(&banplayerid_)) + sizeof(banplayerresult_));
  // @@protoc_insertion_point(copy_constructor:AdminBanPlayerAckMessage)
}

void AdminBanPlayerAckMessage::SharedCtor() {
  ::memset(&banplayerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&banplayerresult_) -
      reinterpret_cast<char*>(&banplayerid_)) + sizeof(banplayerresult_));
}

AdminBanPlayerAckMessage::~AdminBanPlayerAckMessage() {
  // @@protoc_insertion_point(destructor:AdminBanPlayerAckMessage)
  SharedDtor();
}

void AdminBanPlayerAckMessage::SharedDtor() {
}

void AdminBanPlayerAckMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminBanPlayerAckMessage& AdminBanPlayerAckMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AdminBanPlayerAckMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void AdminBanPlayerAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AdminBanPlayerAckMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&banplayerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&banplayerresult_) -
        reinterpret_cast<char*>(&banplayerid_)) + sizeof(banplayerresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdminBanPlayerAckMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AdminBanPlayerAckMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 banPlayerId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_banplayerid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .AdminBanPlayerAckMessage.AdminBanPlayerResult banPlayerResult = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::AdminBanPlayerAckMessage_AdminBanPlayerResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_banplayerresult(static_cast<::AdminBanPlayerAckMessage_AdminBanPlayerResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdminBanPlayerAckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:AdminBanPlayerAckMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 banPlayerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_banplayerid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banplayerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .AdminBanPlayerAckMessage.AdminBanPlayerResult banPlayerResult = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AdminBanPlayerAckMessage_AdminBanPlayerResult_IsValid(value)) {
            set_banplayerresult(static_cast< ::AdminBanPlayerAckMessage_AdminBanPlayerResult >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AdminBanPlayerAckMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AdminBanPlayerAckMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdminBanPlayerAckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AdminBanPlayerAckMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 banPlayerId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->banplayerid(), output);
  }

  // required .AdminBanPlayerAckMessage.AdminBanPlayerResult banPlayerResult = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->banplayerresult(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:AdminBanPlayerAckMessage)
}

size_t AdminBanPlayerAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AdminBanPlayerAckMessage)
  size_t total_size = 0;

  if (has_banplayerid()) {
    // required uint32 banPlayerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->banplayerid());
  }

  if (has_banplayerresult()) {
    // required .AdminBanPlayerAckMessage.AdminBanPlayerResult banPlayerResult = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->banplayerresult());
  }

  return total_size;
}
size_t AdminBanPlayerAckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AdminBanPlayerAckMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 banPlayerId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->banplayerid());

    // required .AdminBanPlayerAckMessage.AdminBanPlayerResult banPlayerResult = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->banplayerresult());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminBanPlayerAckMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminBanPlayerAckMessage*>(&from));
}

void AdminBanPlayerAckMessage::MergeFrom(const AdminBanPlayerAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AdminBanPlayerAckMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      banplayerid_ = from.banplayerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      banplayerresult_ = from.banplayerresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AdminBanPlayerAckMessage::CopyFrom(const AdminBanPlayerAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AdminBanPlayerAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminBanPlayerAckMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AdminBanPlayerAckMessage::Swap(AdminBanPlayerAckMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminBanPlayerAckMessage::InternalSwap(AdminBanPlayerAckMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(banplayerid_, other->banplayerid_);
  swap(banplayerresult_, other->banplayerresult_);
}

::std::string AdminBanPlayerAckMessage::GetTypeName() const {
  return "AdminBanPlayerAckMessage";
}


// ===================================================================

void PokerTHMessage::InitAsDefaultInstance() {
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->announcemessage_ = const_cast< ::AnnounceMessage*>(
      ::AnnounceMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->initmessage_ = const_cast< ::InitMessage*>(
      ::InitMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->authserverchallengemessage_ = const_cast< ::AuthServerChallengeMessage*>(
      ::AuthServerChallengeMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->authclientresponsemessage_ = const_cast< ::AuthClientResponseMessage*>(
      ::AuthClientResponseMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->authserververificationmessage_ = const_cast< ::AuthServerVerificationMessage*>(
      ::AuthServerVerificationMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->initackmessage_ = const_cast< ::InitAckMessage*>(
      ::InitAckMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->avatarrequestmessage_ = const_cast< ::AvatarRequestMessage*>(
      ::AvatarRequestMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->avatarheadermessage_ = const_cast< ::AvatarHeaderMessage*>(
      ::AvatarHeaderMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->avatardatamessage_ = const_cast< ::AvatarDataMessage*>(
      ::AvatarDataMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->avatarendmessage_ = const_cast< ::AvatarEndMessage*>(
      ::AvatarEndMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->unknownavatarmessage_ = const_cast< ::UnknownAvatarMessage*>(
      ::UnknownAvatarMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->playerlistmessage_ = const_cast< ::PlayerListMessage*>(
      ::PlayerListMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->gamelistnewmessage_ = const_cast< ::GameListNewMessage*>(
      ::GameListNewMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->gamelistupdatemessage_ = const_cast< ::GameListUpdateMessage*>(
      ::GameListUpdateMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->gamelistplayerjoinedmessage_ = const_cast< ::GameListPlayerJoinedMessage*>(
      ::GameListPlayerJoinedMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->gamelistplayerleftmessage_ = const_cast< ::GameListPlayerLeftMessage*>(
      ::GameListPlayerLeftMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->gamelistadminchangedmessage_ = const_cast< ::GameListAdminChangedMessage*>(
      ::GameListAdminChangedMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->playerinforequestmessage_ = const_cast< ::PlayerInfoRequestMessage*>(
      ::PlayerInfoRequestMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->playerinforeplymessage_ = const_cast< ::PlayerInfoReplyMessage*>(
      ::PlayerInfoReplyMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->subscriptionrequestmessage_ = const_cast< ::SubscriptionRequestMessage*>(
      ::SubscriptionRequestMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->joinexistinggamemessage_ = const_cast< ::JoinExistingGameMessage*>(
      ::JoinExistingGameMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->joinnewgamemessage_ = const_cast< ::JoinNewGameMessage*>(
      ::JoinNewGameMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->rejoinexistinggamemessage_ = const_cast< ::RejoinExistingGameMessage*>(
      ::RejoinExistingGameMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->joingameackmessage_ = const_cast< ::JoinGameAckMessage*>(
      ::JoinGameAckMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->joingamefailedmessage_ = const_cast< ::JoinGameFailedMessage*>(
      ::JoinGameFailedMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->gameplayerjoinedmessage_ = const_cast< ::GamePlayerJoinedMessage*>(
      ::GamePlayerJoinedMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->gameplayerleftmessage_ = const_cast< ::GamePlayerLeftMessage*>(
      ::GamePlayerLeftMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->gameadminchangedmessage_ = const_cast< ::GameAdminChangedMessage*>(
      ::GameAdminChangedMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->removedfromgamemessage_ = const_cast< ::RemovedFromGameMessage*>(
      ::RemovedFromGameMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->kickplayerrequestmessage_ = const_cast< ::KickPlayerRequestMessage*>(
      ::KickPlayerRequestMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->leavegamerequestmessage_ = const_cast< ::LeaveGameRequestMessage*>(
      ::LeaveGameRequestMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->inviteplayertogamemessage_ = const_cast< ::InvitePlayerToGameMessage*>(
      ::InvitePlayerToGameMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->invitenotifymessage_ = const_cast< ::InviteNotifyMessage*>(
      ::InviteNotifyMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->rejectgameinvitationmessage_ = const_cast< ::RejectGameInvitationMessage*>(
      ::RejectGameInvitationMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->rejectinvnotifymessage_ = const_cast< ::RejectInvNotifyMessage*>(
      ::RejectInvNotifyMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->starteventmessage_ = const_cast< ::StartEventMessage*>(
      ::StartEventMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->starteventackmessage_ = const_cast< ::StartEventAckMessage*>(
      ::StartEventAckMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->gamestartinitialmessage_ = const_cast< ::GameStartInitialMessage*>(
      ::GameStartInitialMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->gamestartrejoinmessage_ = const_cast< ::GameStartRejoinMessage*>(
      ::GameStartRejoinMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->handstartmessage_ = const_cast< ::HandStartMessage*>(
      ::HandStartMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->playersturnmessage_ = const_cast< ::PlayersTurnMessage*>(
      ::PlayersTurnMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->myactionrequestmessage_ = const_cast< ::MyActionRequestMessage*>(
      ::MyActionRequestMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->youractionrejectedmessage_ = const_cast< ::YourActionRejectedMessage*>(
      ::YourActionRejectedMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->playersactiondonemessage_ = const_cast< ::PlayersActionDoneMessage*>(
      ::PlayersActionDoneMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->dealflopcardsmessage_ = const_cast< ::DealFlopCardsMessage*>(
      ::DealFlopCardsMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->dealturncardmessage_ = const_cast< ::DealTurnCardMessage*>(
      ::DealTurnCardMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->dealrivercardmessage_ = const_cast< ::DealRiverCardMessage*>(
      ::DealRiverCardMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->allinshowcardsmessage_ = const_cast< ::AllInShowCardsMessage*>(
      ::AllInShowCardsMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->endofhandshowcardsmessage_ = const_cast< ::EndOfHandShowCardsMessage*>(
      ::EndOfHandShowCardsMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->endofhandhidecardsmessage_ = const_cast< ::EndOfHandHideCardsMessage*>(
      ::EndOfHandHideCardsMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->showmycardsrequestmessage_ = const_cast< ::ShowMyCardsRequestMessage*>(
      ::ShowMyCardsRequestMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->afterhandshowcardsmessage_ = const_cast< ::AfterHandShowCardsMessage*>(
      ::AfterHandShowCardsMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->endofgamemessage_ = const_cast< ::EndOfGameMessage*>(
      ::EndOfGameMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->playeridchangedmessage_ = const_cast< ::PlayerIdChangedMessage*>(
      ::PlayerIdChangedMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->askkickplayermessage_ = const_cast< ::AskKickPlayerMessage*>(
      ::AskKickPlayerMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->askkickdeniedmessage_ = const_cast< ::AskKickDeniedMessage*>(
      ::AskKickDeniedMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->startkickpetitionmessage_ = const_cast< ::StartKickPetitionMessage*>(
      ::StartKickPetitionMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->votekickrequestmessage_ = const_cast< ::VoteKickRequestMessage*>(
      ::VoteKickRequestMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->votekickreplymessage_ = const_cast< ::VoteKickReplyMessage*>(
      ::VoteKickReplyMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->kickpetitionupdatemessage_ = const_cast< ::KickPetitionUpdateMessage*>(
      ::KickPetitionUpdateMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->endkickpetitionmessage_ = const_cast< ::EndKickPetitionMessage*>(
      ::EndKickPetitionMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->statisticsmessage_ = const_cast< ::StatisticsMessage*>(
      ::StatisticsMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->chatrequestmessage_ = const_cast< ::ChatRequestMessage*>(
      ::ChatRequestMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->chatmessage_ = const_cast< ::ChatMessage*>(
      ::ChatMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->chatrejectmessage_ = const_cast< ::ChatRejectMessage*>(
      ::ChatRejectMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->dialogmessage_ = const_cast< ::DialogMessage*>(
      ::DialogMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->timeoutwarningmessage_ = const_cast< ::TimeoutWarningMessage*>(
      ::TimeoutWarningMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->resettimeoutmessage_ = const_cast< ::ResetTimeoutMessage*>(
      ::ResetTimeoutMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->reportavatarmessage_ = const_cast< ::ReportAvatarMessage*>(
      ::ReportAvatarMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->reportavatarackmessage_ = const_cast< ::ReportAvatarAckMessage*>(
      ::ReportAvatarAckMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->reportgamemessage_ = const_cast< ::ReportGameMessage*>(
      ::ReportGameMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->reportgameackmessage_ = const_cast< ::ReportGameAckMessage*>(
      ::ReportGameAckMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->errormessage_ = const_cast< ::ErrorMessage*>(
      ::ErrorMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->adminremovegamemessage_ = const_cast< ::AdminRemoveGameMessage*>(
      ::AdminRemoveGameMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->adminremovegameackmessage_ = const_cast< ::AdminRemoveGameAckMessage*>(
      ::AdminRemoveGameAckMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->adminbanplayermessage_ = const_cast< ::AdminBanPlayerMessage*>(
      ::AdminBanPlayerMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->adminbanplayerackmessage_ = const_cast< ::AdminBanPlayerAckMessage*>(
      ::AdminBanPlayerAckMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->gamelistspectatorjoinedmessage_ = const_cast< ::GameListSpectatorJoinedMessage*>(
      ::GameListSpectatorJoinedMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->gamelistspectatorleftmessage_ = const_cast< ::GameListSpectatorLeftMessage*>(
      ::GameListSpectatorLeftMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->gamespectatorjoinedmessage_ = const_cast< ::GameSpectatorJoinedMessage*>(
      ::GameSpectatorJoinedMessage::internal_default_instance());
  ::_PokerTHMessage_default_instance_._instance.get_mutable()->gamespectatorleftmessage_ = const_cast< ::GameSpectatorLeftMessage*>(
      ::GameSpectatorLeftMessage::internal_default_instance());
}
class PokerTHMessage::HasBitSetters {
 public:
  static void set_has_messagetype(PokerTHMessage* msg) {
    msg->_has_bits_[2] |= 0x00020000u;
  }
  static const ::AnnounceMessage& announcemessage(const PokerTHMessage* msg);
  static void set_has_announcemessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::InitMessage& initmessage(const PokerTHMessage* msg);
  static void set_has_initmessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::AuthServerChallengeMessage& authserverchallengemessage(const PokerTHMessage* msg);
  static void set_has_authserverchallengemessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::AuthClientResponseMessage& authclientresponsemessage(const PokerTHMessage* msg);
  static void set_has_authclientresponsemessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::AuthServerVerificationMessage& authserververificationmessage(const PokerTHMessage* msg);
  static void set_has_authserververificationmessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::InitAckMessage& initackmessage(const PokerTHMessage* msg);
  static void set_has_initackmessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static const ::AvatarRequestMessage& avatarrequestmessage(const PokerTHMessage* msg);
  static void set_has_avatarrequestmessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static const ::AvatarHeaderMessage& avatarheadermessage(const PokerTHMessage* msg);
  static void set_has_avatarheadermessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static const ::AvatarDataMessage& avatardatamessage(const PokerTHMessage* msg);
  static void set_has_avatardatamessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static const ::AvatarEndMessage& avatarendmessage(const PokerTHMessage* msg);
  static void set_has_avatarendmessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static const ::UnknownAvatarMessage& unknownavatarmessage(const PokerTHMessage* msg);
  static void set_has_unknownavatarmessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static const ::PlayerListMessage& playerlistmessage(const PokerTHMessage* msg);
  static void set_has_playerlistmessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static const ::GameListNewMessage& gamelistnewmessage(const PokerTHMessage* msg);
  static void set_has_gamelistnewmessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static const ::GameListUpdateMessage& gamelistupdatemessage(const PokerTHMessage* msg);
  static void set_has_gamelistupdatemessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static const ::GameListPlayerJoinedMessage& gamelistplayerjoinedmessage(const PokerTHMessage* msg);
  static void set_has_gamelistplayerjoinedmessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static const ::GameListPlayerLeftMessage& gamelistplayerleftmessage(const PokerTHMessage* msg);
  static void set_has_gamelistplayerleftmessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static const ::GameListAdminChangedMessage& gamelistadminchangedmessage(const PokerTHMessage* msg);
  static void set_has_gamelistadminchangedmessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static const ::PlayerInfoRequestMessage& playerinforequestmessage(const PokerTHMessage* msg);
  static void set_has_playerinforequestmessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static const ::PlayerInfoReplyMessage& playerinforeplymessage(const PokerTHMessage* msg);
  static void set_has_playerinforeplymessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static const ::SubscriptionRequestMessage& subscriptionrequestmessage(const PokerTHMessage* msg);
  static void set_has_subscriptionrequestmessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static const ::JoinExistingGameMessage& joinexistinggamemessage(const PokerTHMessage* msg);
  static void set_has_joinexistinggamemessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static const ::JoinNewGameMessage& joinnewgamemessage(const PokerTHMessage* msg);
  static void set_has_joinnewgamemessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static const ::RejoinExistingGameMessage& rejoinexistinggamemessage(const PokerTHMessage* msg);
  static void set_has_rejoinexistinggamemessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static const ::JoinGameAckMessage& joingameackmessage(const PokerTHMessage* msg);
  static void set_has_joingameackmessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static const ::JoinGameFailedMessage& joingamefailedmessage(const PokerTHMessage* msg);
  static void set_has_joingamefailedmessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static const ::GamePlayerJoinedMessage& gameplayerjoinedmessage(const PokerTHMessage* msg);
  static void set_has_gameplayerjoinedmessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static const ::GamePlayerLeftMessage& gameplayerleftmessage(const PokerTHMessage* msg);
  static void set_has_gameplayerleftmessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
  static const ::GameAdminChangedMessage& gameadminchangedmessage(const PokerTHMessage* msg);
  static void set_has_gameadminchangedmessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static const ::RemovedFromGameMessage& removedfromgamemessage(const PokerTHMessage* msg);
  static void set_has_removedfromgamemessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x10000000u;
  }
  static const ::KickPlayerRequestMessage& kickplayerrequestmessage(const PokerTHMessage* msg);
  static void set_has_kickplayerrequestmessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x20000000u;
  }
  static const ::LeaveGameRequestMessage& leavegamerequestmessage(const PokerTHMessage* msg);
  static void set_has_leavegamerequestmessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x40000000u;
  }
  static const ::InvitePlayerToGameMessage& inviteplayertogamemessage(const PokerTHMessage* msg);
  static void set_has_inviteplayertogamemessage(PokerTHMessage* msg) {
    msg->_has_bits_[0] |= 0x80000000u;
  }
  static const ::InviteNotifyMessage& invitenotifymessage(const PokerTHMessage* msg);
  static void set_has_invitenotifymessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00000001u;
  }
  static const ::RejectGameInvitationMessage& rejectgameinvitationmessage(const PokerTHMessage* msg);
  static void set_has_rejectgameinvitationmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00000002u;
  }
  static const ::RejectInvNotifyMessage& rejectinvnotifymessage(const PokerTHMessage* msg);
  static void set_has_rejectinvnotifymessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00000004u;
  }
  static const ::StartEventMessage& starteventmessage(const PokerTHMessage* msg);
  static void set_has_starteventmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00000008u;
  }
  static const ::StartEventAckMessage& starteventackmessage(const PokerTHMessage* msg);
  static void set_has_starteventackmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00000010u;
  }
  static const ::GameStartInitialMessage& gamestartinitialmessage(const PokerTHMessage* msg);
  static void set_has_gamestartinitialmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00000020u;
  }
  static const ::GameStartRejoinMessage& gamestartrejoinmessage(const PokerTHMessage* msg);
  static void set_has_gamestartrejoinmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00000040u;
  }
  static const ::HandStartMessage& handstartmessage(const PokerTHMessage* msg);
  static void set_has_handstartmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00000080u;
  }
  static const ::PlayersTurnMessage& playersturnmessage(const PokerTHMessage* msg);
  static void set_has_playersturnmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00000100u;
  }
  static const ::MyActionRequestMessage& myactionrequestmessage(const PokerTHMessage* msg);
  static void set_has_myactionrequestmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00000200u;
  }
  static const ::YourActionRejectedMessage& youractionrejectedmessage(const PokerTHMessage* msg);
  static void set_has_youractionrejectedmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00000400u;
  }
  static const ::PlayersActionDoneMessage& playersactiondonemessage(const PokerTHMessage* msg);
  static void set_has_playersactiondonemessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00000800u;
  }
  static const ::DealFlopCardsMessage& dealflopcardsmessage(const PokerTHMessage* msg);
  static void set_has_dealflopcardsmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00001000u;
  }
  static const ::DealTurnCardMessage& dealturncardmessage(const PokerTHMessage* msg);
  static void set_has_dealturncardmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00002000u;
  }
  static const ::DealRiverCardMessage& dealrivercardmessage(const PokerTHMessage* msg);
  static void set_has_dealrivercardmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00004000u;
  }
  static const ::AllInShowCardsMessage& allinshowcardsmessage(const PokerTHMessage* msg);
  static void set_has_allinshowcardsmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00008000u;
  }
  static const ::EndOfHandShowCardsMessage& endofhandshowcardsmessage(const PokerTHMessage* msg);
  static void set_has_endofhandshowcardsmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00010000u;
  }
  static const ::EndOfHandHideCardsMessage& endofhandhidecardsmessage(const PokerTHMessage* msg);
  static void set_has_endofhandhidecardsmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00020000u;
  }
  static const ::ShowMyCardsRequestMessage& showmycardsrequestmessage(const PokerTHMessage* msg);
  static void set_has_showmycardsrequestmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00040000u;
  }
  static const ::AfterHandShowCardsMessage& afterhandshowcardsmessage(const PokerTHMessage* msg);
  static void set_has_afterhandshowcardsmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00080000u;
  }
  static const ::EndOfGameMessage& endofgamemessage(const PokerTHMessage* msg);
  static void set_has_endofgamemessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00100000u;
  }
  static const ::PlayerIdChangedMessage& playeridchangedmessage(const PokerTHMessage* msg);
  static void set_has_playeridchangedmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00200000u;
  }
  static const ::AskKickPlayerMessage& askkickplayermessage(const PokerTHMessage* msg);
  static void set_has_askkickplayermessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00400000u;
  }
  static const ::AskKickDeniedMessage& askkickdeniedmessage(const PokerTHMessage* msg);
  static void set_has_askkickdeniedmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x00800000u;
  }
  static const ::StartKickPetitionMessage& startkickpetitionmessage(const PokerTHMessage* msg);
  static void set_has_startkickpetitionmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x01000000u;
  }
  static const ::VoteKickRequestMessage& votekickrequestmessage(const PokerTHMessage* msg);
  static void set_has_votekickrequestmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x02000000u;
  }
  static const ::VoteKickReplyMessage& votekickreplymessage(const PokerTHMessage* msg);
  static void set_has_votekickreplymessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x04000000u;
  }
  static const ::KickPetitionUpdateMessage& kickpetitionupdatemessage(const PokerTHMessage* msg);
  static void set_has_kickpetitionupdatemessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x08000000u;
  }
  static const ::EndKickPetitionMessage& endkickpetitionmessage(const PokerTHMessage* msg);
  static void set_has_endkickpetitionmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x10000000u;
  }
  static const ::StatisticsMessage& statisticsmessage(const PokerTHMessage* msg);
  static void set_has_statisticsmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x20000000u;
  }
  static const ::ChatRequestMessage& chatrequestmessage(const PokerTHMessage* msg);
  static void set_has_chatrequestmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x40000000u;
  }
  static const ::ChatMessage& chatmessage(const PokerTHMessage* msg);
  static void set_has_chatmessage(PokerTHMessage* msg) {
    msg->_has_bits_[1] |= 0x80000000u;
  }
  static const ::ChatRejectMessage& chatrejectmessage(const PokerTHMessage* msg);
  static void set_has_chatrejectmessage(PokerTHMessage* msg) {
    msg->_has_bits_[2] |= 0x00000001u;
  }
  static const ::DialogMessage& dialogmessage(const PokerTHMessage* msg);
  static void set_has_dialogmessage(PokerTHMessage* msg) {
    msg->_has_bits_[2] |= 0x00000002u;
  }
  static const ::TimeoutWarningMessage& timeoutwarningmessage(const PokerTHMessage* msg);
  static void set_has_timeoutwarningmessage(PokerTHMessage* msg) {
    msg->_has_bits_[2] |= 0x00000004u;
  }
  static const ::ResetTimeoutMessage& resettimeoutmessage(const PokerTHMessage* msg);
  static void set_has_resettimeoutmessage(PokerTHMessage* msg) {
    msg->_has_bits_[2] |= 0x00000008u;
  }
  static const ::ReportAvatarMessage& reportavatarmessage(const PokerTHMessage* msg);
  static void set_has_reportavatarmessage(PokerTHMessage* msg) {
    msg->_has_bits_[2] |= 0x00000010u;
  }
  static const ::ReportAvatarAckMessage& reportavatarackmessage(const PokerTHMessage* msg);
  static void set_has_reportavatarackmessage(PokerTHMessage* msg) {
    msg->_has_bits_[2] |= 0x00000020u;
  }
  static const ::ReportGameMessage& reportgamemessage(const PokerTHMessage* msg);
  static void set_has_reportgamemessage(PokerTHMessage* msg) {
    msg->_has_bits_[2] |= 0x00000040u;
  }
  static const ::ReportGameAckMessage& reportgameackmessage(const PokerTHMessage* msg);
  static void set_has_reportgameackmessage(PokerTHMessage* msg) {
    msg->_has_bits_[2] |= 0x00000080u;
  }
  static const ::ErrorMessage& errormessage(const PokerTHMessage* msg);
  static void set_has_errormessage(PokerTHMessage* msg) {
    msg->_has_bits_[2] |= 0x00000100u;
  }
  static const ::AdminRemoveGameMessage& adminremovegamemessage(const PokerTHMessage* msg);
  static void set_has_adminremovegamemessage(PokerTHMessage* msg) {
    msg->_has_bits_[2] |= 0x00000200u;
  }
  static const ::AdminRemoveGameAckMessage& adminremovegameackmessage(const PokerTHMessage* msg);
  static void set_has_adminremovegameackmessage(PokerTHMessage* msg) {
    msg->_has_bits_[2] |= 0x00000400u;
  }
  static const ::AdminBanPlayerMessage& adminbanplayermessage(const PokerTHMessage* msg);
  static void set_has_adminbanplayermessage(PokerTHMessage* msg) {
    msg->_has_bits_[2] |= 0x00000800u;
  }
  static const ::AdminBanPlayerAckMessage& adminbanplayerackmessage(const PokerTHMessage* msg);
  static void set_has_adminbanplayerackmessage(PokerTHMessage* msg) {
    msg->_has_bits_[2] |= 0x00001000u;
  }
  static const ::GameListSpectatorJoinedMessage& gamelistspectatorjoinedmessage(const PokerTHMessage* msg);
  static void set_has_gamelistspectatorjoinedmessage(PokerTHMessage* msg) {
    msg->_has_bits_[2] |= 0x00002000u;
  }
  static const ::GameListSpectatorLeftMessage& gamelistspectatorleftmessage(const PokerTHMessage* msg);
  static void set_has_gamelistspectatorleftmessage(PokerTHMessage* msg) {
    msg->_has_bits_[2] |= 0x00004000u;
  }
  static const ::GameSpectatorJoinedMessage& gamespectatorjoinedmessage(const PokerTHMessage* msg);
  static void set_has_gamespectatorjoinedmessage(PokerTHMessage* msg) {
    msg->_has_bits_[2] |= 0x00008000u;
  }
  static const ::GameSpectatorLeftMessage& gamespectatorleftmessage(const PokerTHMessage* msg);
  static void set_has_gamespectatorleftmessage(PokerTHMessage* msg) {
    msg->_has_bits_[2] |= 0x00010000u;
  }
};

const ::AnnounceMessage&
PokerTHMessage::HasBitSetters::announcemessage(const PokerTHMessage* msg) {
  return *msg->announcemessage_;
}
const ::InitMessage&
PokerTHMessage::HasBitSetters::initmessage(const PokerTHMessage* msg) {
  return *msg->initmessage_;
}
const ::AuthServerChallengeMessage&
PokerTHMessage::HasBitSetters::authserverchallengemessage(const PokerTHMessage* msg) {
  return *msg->authserverchallengemessage_;
}
const ::AuthClientResponseMessage&
PokerTHMessage::HasBitSetters::authclientresponsemessage(const PokerTHMessage* msg) {
  return *msg->authclientresponsemessage_;
}
const ::AuthServerVerificationMessage&
PokerTHMessage::HasBitSetters::authserververificationmessage(const PokerTHMessage* msg) {
  return *msg->authserververificationmessage_;
}
const ::InitAckMessage&
PokerTHMessage::HasBitSetters::initackmessage(const PokerTHMessage* msg) {
  return *msg->initackmessage_;
}
const ::AvatarRequestMessage&
PokerTHMessage::HasBitSetters::avatarrequestmessage(const PokerTHMessage* msg) {
  return *msg->avatarrequestmessage_;
}
const ::AvatarHeaderMessage&
PokerTHMessage::HasBitSetters::avatarheadermessage(const PokerTHMessage* msg) {
  return *msg->avatarheadermessage_;
}
const ::AvatarDataMessage&
PokerTHMessage::HasBitSetters::avatardatamessage(const PokerTHMessage* msg) {
  return *msg->avatardatamessage_;
}
const ::AvatarEndMessage&
PokerTHMessage::HasBitSetters::avatarendmessage(const PokerTHMessage* msg) {
  return *msg->avatarendmessage_;
}
const ::UnknownAvatarMessage&
PokerTHMessage::HasBitSetters::unknownavatarmessage(const PokerTHMessage* msg) {
  return *msg->unknownavatarmessage_;
}
const ::PlayerListMessage&
PokerTHMessage::HasBitSetters::playerlistmessage(const PokerTHMessage* msg) {
  return *msg->playerlistmessage_;
}
const ::GameListNewMessage&
PokerTHMessage::HasBitSetters::gamelistnewmessage(const PokerTHMessage* msg) {
  return *msg->gamelistnewmessage_;
}
const ::GameListUpdateMessage&
PokerTHMessage::HasBitSetters::gamelistupdatemessage(const PokerTHMessage* msg) {
  return *msg->gamelistupdatemessage_;
}
const ::GameListPlayerJoinedMessage&
PokerTHMessage::HasBitSetters::gamelistplayerjoinedmessage(const PokerTHMessage* msg) {
  return *msg->gamelistplayerjoinedmessage_;
}
const ::GameListPlayerLeftMessage&
PokerTHMessage::HasBitSetters::gamelistplayerleftmessage(const PokerTHMessage* msg) {
  return *msg->gamelistplayerleftmessage_;
}
const ::GameListAdminChangedMessage&
PokerTHMessage::HasBitSetters::gamelistadminchangedmessage(const PokerTHMessage* msg) {
  return *msg->gamelistadminchangedmessage_;
}
const ::PlayerInfoRequestMessage&
PokerTHMessage::HasBitSetters::playerinforequestmessage(const PokerTHMessage* msg) {
  return *msg->playerinforequestmessage_;
}
const ::PlayerInfoReplyMessage&
PokerTHMessage::HasBitSetters::playerinforeplymessage(const PokerTHMessage* msg) {
  return *msg->playerinforeplymessage_;
}
const ::SubscriptionRequestMessage&
PokerTHMessage::HasBitSetters::subscriptionrequestmessage(const PokerTHMessage* msg) {
  return *msg->subscriptionrequestmessage_;
}
const ::JoinExistingGameMessage&
PokerTHMessage::HasBitSetters::joinexistinggamemessage(const PokerTHMessage* msg) {
  return *msg->joinexistinggamemessage_;
}
const ::JoinNewGameMessage&
PokerTHMessage::HasBitSetters::joinnewgamemessage(const PokerTHMessage* msg) {
  return *msg->joinnewgamemessage_;
}
const ::RejoinExistingGameMessage&
PokerTHMessage::HasBitSetters::rejoinexistinggamemessage(const PokerTHMessage* msg) {
  return *msg->rejoinexistinggamemessage_;
}
const ::JoinGameAckMessage&
PokerTHMessage::HasBitSetters::joingameackmessage(const PokerTHMessage* msg) {
  return *msg->joingameackmessage_;
}
const ::JoinGameFailedMessage&
PokerTHMessage::HasBitSetters::joingamefailedmessage(const PokerTHMessage* msg) {
  return *msg->joingamefailedmessage_;
}
const ::GamePlayerJoinedMessage&
PokerTHMessage::HasBitSetters::gameplayerjoinedmessage(const PokerTHMessage* msg) {
  return *msg->gameplayerjoinedmessage_;
}
const ::GamePlayerLeftMessage&
PokerTHMessage::HasBitSetters::gameplayerleftmessage(const PokerTHMessage* msg) {
  return *msg->gameplayerleftmessage_;
}
const ::GameAdminChangedMessage&
PokerTHMessage::HasBitSetters::gameadminchangedmessage(const PokerTHMessage* msg) {
  return *msg->gameadminchangedmessage_;
}
const ::RemovedFromGameMessage&
PokerTHMessage::HasBitSetters::removedfromgamemessage(const PokerTHMessage* msg) {
  return *msg->removedfromgamemessage_;
}
const ::KickPlayerRequestMessage&
PokerTHMessage::HasBitSetters::kickplayerrequestmessage(const PokerTHMessage* msg) {
  return *msg->kickplayerrequestmessage_;
}
const ::LeaveGameRequestMessage&
PokerTHMessage::HasBitSetters::leavegamerequestmessage(const PokerTHMessage* msg) {
  return *msg->leavegamerequestmessage_;
}
const ::InvitePlayerToGameMessage&
PokerTHMessage::HasBitSetters::inviteplayertogamemessage(const PokerTHMessage* msg) {
  return *msg->inviteplayertogamemessage_;
}
const ::InviteNotifyMessage&
PokerTHMessage::HasBitSetters::invitenotifymessage(const PokerTHMessage* msg) {
  return *msg->invitenotifymessage_;
}
const ::RejectGameInvitationMessage&
PokerTHMessage::HasBitSetters::rejectgameinvitationmessage(const PokerTHMessage* msg) {
  return *msg->rejectgameinvitationmessage_;
}
const ::RejectInvNotifyMessage&
PokerTHMessage::HasBitSetters::rejectinvnotifymessage(const PokerTHMessage* msg) {
  return *msg->rejectinvnotifymessage_;
}
const ::StartEventMessage&
PokerTHMessage::HasBitSetters::starteventmessage(const PokerTHMessage* msg) {
  return *msg->starteventmessage_;
}
const ::StartEventAckMessage&
PokerTHMessage::HasBitSetters::starteventackmessage(const PokerTHMessage* msg) {
  return *msg->starteventackmessage_;
}
const ::GameStartInitialMessage&
PokerTHMessage::HasBitSetters::gamestartinitialmessage(const PokerTHMessage* msg) {
  return *msg->gamestartinitialmessage_;
}
const ::GameStartRejoinMessage&
PokerTHMessage::HasBitSetters::gamestartrejoinmessage(const PokerTHMessage* msg) {
  return *msg->gamestartrejoinmessage_;
}
const ::HandStartMessage&
PokerTHMessage::HasBitSetters::handstartmessage(const PokerTHMessage* msg) {
  return *msg->handstartmessage_;
}
const ::PlayersTurnMessage&
PokerTHMessage::HasBitSetters::playersturnmessage(const PokerTHMessage* msg) {
  return *msg->playersturnmessage_;
}
const ::MyActionRequestMessage&
PokerTHMessage::HasBitSetters::myactionrequestmessage(const PokerTHMessage* msg) {
  return *msg->myactionrequestmessage_;
}
const ::YourActionRejectedMessage&
PokerTHMessage::HasBitSetters::youractionrejectedmessage(const PokerTHMessage* msg) {
  return *msg->youractionrejectedmessage_;
}
const ::PlayersActionDoneMessage&
PokerTHMessage::HasBitSetters::playersactiondonemessage(const PokerTHMessage* msg) {
  return *msg->playersactiondonemessage_;
}
const ::DealFlopCardsMessage&
PokerTHMessage::HasBitSetters::dealflopcardsmessage(const PokerTHMessage* msg) {
  return *msg->dealflopcardsmessage_;
}
const ::DealTurnCardMessage&
PokerTHMessage::HasBitSetters::dealturncardmessage(const PokerTHMessage* msg) {
  return *msg->dealturncardmessage_;
}
const ::DealRiverCardMessage&
PokerTHMessage::HasBitSetters::dealrivercardmessage(const PokerTHMessage* msg) {
  return *msg->dealrivercardmessage_;
}
const ::AllInShowCardsMessage&
PokerTHMessage::HasBitSetters::allinshowcardsmessage(const PokerTHMessage* msg) {
  return *msg->allinshowcardsmessage_;
}
const ::EndOfHandShowCardsMessage&
PokerTHMessage::HasBitSetters::endofhandshowcardsmessage(const PokerTHMessage* msg) {
  return *msg->endofhandshowcardsmessage_;
}
const ::EndOfHandHideCardsMessage&
PokerTHMessage::HasBitSetters::endofhandhidecardsmessage(const PokerTHMessage* msg) {
  return *msg->endofhandhidecardsmessage_;
}
const ::ShowMyCardsRequestMessage&
PokerTHMessage::HasBitSetters::showmycardsrequestmessage(const PokerTHMessage* msg) {
  return *msg->showmycardsrequestmessage_;
}
const ::AfterHandShowCardsMessage&
PokerTHMessage::HasBitSetters::afterhandshowcardsmessage(const PokerTHMessage* msg) {
  return *msg->afterhandshowcardsmessage_;
}
const ::EndOfGameMessage&
PokerTHMessage::HasBitSetters::endofgamemessage(const PokerTHMessage* msg) {
  return *msg->endofgamemessage_;
}
const ::PlayerIdChangedMessage&
PokerTHMessage::HasBitSetters::playeridchangedmessage(const PokerTHMessage* msg) {
  return *msg->playeridchangedmessage_;
}
const ::AskKickPlayerMessage&
PokerTHMessage::HasBitSetters::askkickplayermessage(const PokerTHMessage* msg) {
  return *msg->askkickplayermessage_;
}
const ::AskKickDeniedMessage&
PokerTHMessage::HasBitSetters::askkickdeniedmessage(const PokerTHMessage* msg) {
  return *msg->askkickdeniedmessage_;
}
const ::StartKickPetitionMessage&
PokerTHMessage::HasBitSetters::startkickpetitionmessage(const PokerTHMessage* msg) {
  return *msg->startkickpetitionmessage_;
}
const ::VoteKickRequestMessage&
PokerTHMessage::HasBitSetters::votekickrequestmessage(const PokerTHMessage* msg) {
  return *msg->votekickrequestmessage_;
}
const ::VoteKickReplyMessage&
PokerTHMessage::HasBitSetters::votekickreplymessage(const PokerTHMessage* msg) {
  return *msg->votekickreplymessage_;
}
const ::KickPetitionUpdateMessage&
PokerTHMessage::HasBitSetters::kickpetitionupdatemessage(const PokerTHMessage* msg) {
  return *msg->kickpetitionupdatemessage_;
}
const ::EndKickPetitionMessage&
PokerTHMessage::HasBitSetters::endkickpetitionmessage(const PokerTHMessage* msg) {
  return *msg->endkickpetitionmessage_;
}
const ::StatisticsMessage&
PokerTHMessage::HasBitSetters::statisticsmessage(const PokerTHMessage* msg) {
  return *msg->statisticsmessage_;
}
const ::ChatRequestMessage&
PokerTHMessage::HasBitSetters::chatrequestmessage(const PokerTHMessage* msg) {
  return *msg->chatrequestmessage_;
}
const ::ChatMessage&
PokerTHMessage::HasBitSetters::chatmessage(const PokerTHMessage* msg) {
  return *msg->chatmessage_;
}
const ::ChatRejectMessage&
PokerTHMessage::HasBitSetters::chatrejectmessage(const PokerTHMessage* msg) {
  return *msg->chatrejectmessage_;
}
const ::DialogMessage&
PokerTHMessage::HasBitSetters::dialogmessage(const PokerTHMessage* msg) {
  return *msg->dialogmessage_;
}
const ::TimeoutWarningMessage&
PokerTHMessage::HasBitSetters::timeoutwarningmessage(const PokerTHMessage* msg) {
  return *msg->timeoutwarningmessage_;
}
const ::ResetTimeoutMessage&
PokerTHMessage::HasBitSetters::resettimeoutmessage(const PokerTHMessage* msg) {
  return *msg->resettimeoutmessage_;
}
const ::ReportAvatarMessage&
PokerTHMessage::HasBitSetters::reportavatarmessage(const PokerTHMessage* msg) {
  return *msg->reportavatarmessage_;
}
const ::ReportAvatarAckMessage&
PokerTHMessage::HasBitSetters::reportavatarackmessage(const PokerTHMessage* msg) {
  return *msg->reportavatarackmessage_;
}
const ::ReportGameMessage&
PokerTHMessage::HasBitSetters::reportgamemessage(const PokerTHMessage* msg) {
  return *msg->reportgamemessage_;
}
const ::ReportGameAckMessage&
PokerTHMessage::HasBitSetters::reportgameackmessage(const PokerTHMessage* msg) {
  return *msg->reportgameackmessage_;
}
const ::ErrorMessage&
PokerTHMessage::HasBitSetters::errormessage(const PokerTHMessage* msg) {
  return *msg->errormessage_;
}
const ::AdminRemoveGameMessage&
PokerTHMessage::HasBitSetters::adminremovegamemessage(const PokerTHMessage* msg) {
  return *msg->adminremovegamemessage_;
}
const ::AdminRemoveGameAckMessage&
PokerTHMessage::HasBitSetters::adminremovegameackmessage(const PokerTHMessage* msg) {
  return *msg->adminremovegameackmessage_;
}
const ::AdminBanPlayerMessage&
PokerTHMessage::HasBitSetters::adminbanplayermessage(const PokerTHMessage* msg) {
  return *msg->adminbanplayermessage_;
}
const ::AdminBanPlayerAckMessage&
PokerTHMessage::HasBitSetters::adminbanplayerackmessage(const PokerTHMessage* msg) {
  return *msg->adminbanplayerackmessage_;
}
const ::GameListSpectatorJoinedMessage&
PokerTHMessage::HasBitSetters::gamelistspectatorjoinedmessage(const PokerTHMessage* msg) {
  return *msg->gamelistspectatorjoinedmessage_;
}
const ::GameListSpectatorLeftMessage&
PokerTHMessage::HasBitSetters::gamelistspectatorleftmessage(const PokerTHMessage* msg) {
  return *msg->gamelistspectatorleftmessage_;
}
const ::GameSpectatorJoinedMessage&
PokerTHMessage::HasBitSetters::gamespectatorjoinedmessage(const PokerTHMessage* msg) {
  return *msg->gamespectatorjoinedmessage_;
}
const ::GameSpectatorLeftMessage&
PokerTHMessage::HasBitSetters::gamespectatorleftmessage(const PokerTHMessage* msg) {
  return *msg->gamespectatorleftmessage_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PokerTHMessage::kMessageTypeFieldNumber;
const int PokerTHMessage::kAnnounceMessageFieldNumber;
const int PokerTHMessage::kInitMessageFieldNumber;
const int PokerTHMessage::kAuthServerChallengeMessageFieldNumber;
const int PokerTHMessage::kAuthClientResponseMessageFieldNumber;
const int PokerTHMessage::kAuthServerVerificationMessageFieldNumber;
const int PokerTHMessage::kInitAckMessageFieldNumber;
const int PokerTHMessage::kAvatarRequestMessageFieldNumber;
const int PokerTHMessage::kAvatarHeaderMessageFieldNumber;
const int PokerTHMessage::kAvatarDataMessageFieldNumber;
const int PokerTHMessage::kAvatarEndMessageFieldNumber;
const int PokerTHMessage::kUnknownAvatarMessageFieldNumber;
const int PokerTHMessage::kPlayerListMessageFieldNumber;
const int PokerTHMessage::kGameListNewMessageFieldNumber;
const int PokerTHMessage::kGameListUpdateMessageFieldNumber;
const int PokerTHMessage::kGameListPlayerJoinedMessageFieldNumber;
const int PokerTHMessage::kGameListPlayerLeftMessageFieldNumber;
const int PokerTHMessage::kGameListAdminChangedMessageFieldNumber;
const int PokerTHMessage::kPlayerInfoRequestMessageFieldNumber;
const int PokerTHMessage::kPlayerInfoReplyMessageFieldNumber;
const int PokerTHMessage::kSubscriptionRequestMessageFieldNumber;
const int PokerTHMessage::kJoinExistingGameMessageFieldNumber;
const int PokerTHMessage::kJoinNewGameMessageFieldNumber;
const int PokerTHMessage::kRejoinExistingGameMessageFieldNumber;
const int PokerTHMessage::kJoinGameAckMessageFieldNumber;
const int PokerTHMessage::kJoinGameFailedMessageFieldNumber;
const int PokerTHMessage::kGamePlayerJoinedMessageFieldNumber;
const int PokerTHMessage::kGamePlayerLeftMessageFieldNumber;
const int PokerTHMessage::kGameAdminChangedMessageFieldNumber;
const int PokerTHMessage::kRemovedFromGameMessageFieldNumber;
const int PokerTHMessage::kKickPlayerRequestMessageFieldNumber;
const int PokerTHMessage::kLeaveGameRequestMessageFieldNumber;
const int PokerTHMessage::kInvitePlayerToGameMessageFieldNumber;
const int PokerTHMessage::kInviteNotifyMessageFieldNumber;
const int PokerTHMessage::kRejectGameInvitationMessageFieldNumber;
const int PokerTHMessage::kRejectInvNotifyMessageFieldNumber;
const int PokerTHMessage::kStartEventMessageFieldNumber;
const int PokerTHMessage::kStartEventAckMessageFieldNumber;
const int PokerTHMessage::kGameStartInitialMessageFieldNumber;
const int PokerTHMessage::kGameStartRejoinMessageFieldNumber;
const int PokerTHMessage::kHandStartMessageFieldNumber;
const int PokerTHMessage::kPlayersTurnMessageFieldNumber;
const int PokerTHMessage::kMyActionRequestMessageFieldNumber;
const int PokerTHMessage::kYourActionRejectedMessageFieldNumber;
const int PokerTHMessage::kPlayersActionDoneMessageFieldNumber;
const int PokerTHMessage::kDealFlopCardsMessageFieldNumber;
const int PokerTHMessage::kDealTurnCardMessageFieldNumber;
const int PokerTHMessage::kDealRiverCardMessageFieldNumber;
const int PokerTHMessage::kAllInShowCardsMessageFieldNumber;
const int PokerTHMessage::kEndOfHandShowCardsMessageFieldNumber;
const int PokerTHMessage::kEndOfHandHideCardsMessageFieldNumber;
const int PokerTHMessage::kShowMyCardsRequestMessageFieldNumber;
const int PokerTHMessage::kAfterHandShowCardsMessageFieldNumber;
const int PokerTHMessage::kEndOfGameMessageFieldNumber;
const int PokerTHMessage::kPlayerIdChangedMessageFieldNumber;
const int PokerTHMessage::kAskKickPlayerMessageFieldNumber;
const int PokerTHMessage::kAskKickDeniedMessageFieldNumber;
const int PokerTHMessage::kStartKickPetitionMessageFieldNumber;
const int PokerTHMessage::kVoteKickRequestMessageFieldNumber;
const int PokerTHMessage::kVoteKickReplyMessageFieldNumber;
const int PokerTHMessage::kKickPetitionUpdateMessageFieldNumber;
const int PokerTHMessage::kEndKickPetitionMessageFieldNumber;
const int PokerTHMessage::kStatisticsMessageFieldNumber;
const int PokerTHMessage::kChatRequestMessageFieldNumber;
const int PokerTHMessage::kChatMessageFieldNumber;
const int PokerTHMessage::kChatRejectMessageFieldNumber;
const int PokerTHMessage::kDialogMessageFieldNumber;
const int PokerTHMessage::kTimeoutWarningMessageFieldNumber;
const int PokerTHMessage::kResetTimeoutMessageFieldNumber;
const int PokerTHMessage::kReportAvatarMessageFieldNumber;
const int PokerTHMessage::kReportAvatarAckMessageFieldNumber;
const int PokerTHMessage::kReportGameMessageFieldNumber;
const int PokerTHMessage::kReportGameAckMessageFieldNumber;
const int PokerTHMessage::kErrorMessageFieldNumber;
const int PokerTHMessage::kAdminRemoveGameMessageFieldNumber;
const int PokerTHMessage::kAdminRemoveGameAckMessageFieldNumber;
const int PokerTHMessage::kAdminBanPlayerMessageFieldNumber;
const int PokerTHMessage::kAdminBanPlayerAckMessageFieldNumber;
const int PokerTHMessage::kGameListSpectatorJoinedMessageFieldNumber;
const int PokerTHMessage::kGameListSpectatorLeftMessageFieldNumber;
const int PokerTHMessage::kGameSpectatorJoinedMessageFieldNumber;
const int PokerTHMessage::kGameSpectatorLeftMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PokerTHMessage::PokerTHMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PokerTHMessage)
}
PokerTHMessage::PokerTHMessage(const PokerTHMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_announcemessage()) {
    announcemessage_ = new ::AnnounceMessage(*from.announcemessage_);
  } else {
    announcemessage_ = nullptr;
  }
  if (from.has_initmessage()) {
    initmessage_ = new ::InitMessage(*from.initmessage_);
  } else {
    initmessage_ = nullptr;
  }
  if (from.has_authserverchallengemessage()) {
    authserverchallengemessage_ = new ::AuthServerChallengeMessage(*from.authserverchallengemessage_);
  } else {
    authserverchallengemessage_ = nullptr;
  }
  if (from.has_authclientresponsemessage()) {
    authclientresponsemessage_ = new ::AuthClientResponseMessage(*from.authclientresponsemessage_);
  } else {
    authclientresponsemessage_ = nullptr;
  }
  if (from.has_authserververificationmessage()) {
    authserververificationmessage_ = new ::AuthServerVerificationMessage(*from.authserververificationmessage_);
  } else {
    authserververificationmessage_ = nullptr;
  }
  if (from.has_initackmessage()) {
    initackmessage_ = new ::InitAckMessage(*from.initackmessage_);
  } else {
    initackmessage_ = nullptr;
  }
  if (from.has_avatarrequestmessage()) {
    avatarrequestmessage_ = new ::AvatarRequestMessage(*from.avatarrequestmessage_);
  } else {
    avatarrequestmessage_ = nullptr;
  }
  if (from.has_avatarheadermessage()) {
    avatarheadermessage_ = new ::AvatarHeaderMessage(*from.avatarheadermessage_);
  } else {
    avatarheadermessage_ = nullptr;
  }
  if (from.has_avatardatamessage()) {
    avatardatamessage_ = new ::AvatarDataMessage(*from.avatardatamessage_);
  } else {
    avatardatamessage_ = nullptr;
  }
  if (from.has_avatarendmessage()) {
    avatarendmessage_ = new ::AvatarEndMessage(*from.avatarendmessage_);
  } else {
    avatarendmessage_ = nullptr;
  }
  if (from.has_unknownavatarmessage()) {
    unknownavatarmessage_ = new ::UnknownAvatarMessage(*from.unknownavatarmessage_);
  } else {
    unknownavatarmessage_ = nullptr;
  }
  if (from.has_playerlistmessage()) {
    playerlistmessage_ = new ::PlayerListMessage(*from.playerlistmessage_);
  } else {
    playerlistmessage_ = nullptr;
  }
  if (from.has_gamelistnewmessage()) {
    gamelistnewmessage_ = new ::GameListNewMessage(*from.gamelistnewmessage_);
  } else {
    gamelistnewmessage_ = nullptr;
  }
  if (from.has_gamelistupdatemessage()) {
    gamelistupdatemessage_ = new ::GameListUpdateMessage(*from.gamelistupdatemessage_);
  } else {
    gamelistupdatemessage_ = nullptr;
  }
  if (from.has_gamelistplayerjoinedmessage()) {
    gamelistplayerjoinedmessage_ = new ::GameListPlayerJoinedMessage(*from.gamelistplayerjoinedmessage_);
  } else {
    gamelistplayerjoinedmessage_ = nullptr;
  }
  if (from.has_gamelistplayerleftmessage()) {
    gamelistplayerleftmessage_ = new ::GameListPlayerLeftMessage(*from.gamelistplayerleftmessage_);
  } else {
    gamelistplayerleftmessage_ = nullptr;
  }
  if (from.has_gamelistadminchangedmessage()) {
    gamelistadminchangedmessage_ = new ::GameListAdminChangedMessage(*from.gamelistadminchangedmessage_);
  } else {
    gamelistadminchangedmessage_ = nullptr;
  }
  if (from.has_playerinforequestmessage()) {
    playerinforequestmessage_ = new ::PlayerInfoRequestMessage(*from.playerinforequestmessage_);
  } else {
    playerinforequestmessage_ = nullptr;
  }
  if (from.has_playerinforeplymessage()) {
    playerinforeplymessage_ = new ::PlayerInfoReplyMessage(*from.playerinforeplymessage_);
  } else {
    playerinforeplymessage_ = nullptr;
  }
  if (from.has_subscriptionrequestmessage()) {
    subscriptionrequestmessage_ = new ::SubscriptionRequestMessage(*from.subscriptionrequestmessage_);
  } else {
    subscriptionrequestmessage_ = nullptr;
  }
  if (from.has_joinexistinggamemessage()) {
    joinexistinggamemessage_ = new ::JoinExistingGameMessage(*from.joinexistinggamemessage_);
  } else {
    joinexistinggamemessage_ = nullptr;
  }
  if (from.has_joinnewgamemessage()) {
    joinnewgamemessage_ = new ::JoinNewGameMessage(*from.joinnewgamemessage_);
  } else {
    joinnewgamemessage_ = nullptr;
  }
  if (from.has_rejoinexistinggamemessage()) {
    rejoinexistinggamemessage_ = new ::RejoinExistingGameMessage(*from.rejoinexistinggamemessage_);
  } else {
    rejoinexistinggamemessage_ = nullptr;
  }
  if (from.has_joingameackmessage()) {
    joingameackmessage_ = new ::JoinGameAckMessage(*from.joingameackmessage_);
  } else {
    joingameackmessage_ = nullptr;
  }
  if (from.has_joingamefailedmessage()) {
    joingamefailedmessage_ = new ::JoinGameFailedMessage(*from.joingamefailedmessage_);
  } else {
    joingamefailedmessage_ = nullptr;
  }
  if (from.has_gameplayerjoinedmessage()) {
    gameplayerjoinedmessage_ = new ::GamePlayerJoinedMessage(*from.gameplayerjoinedmessage_);
  } else {
    gameplayerjoinedmessage_ = nullptr;
  }
  if (from.has_gameplayerleftmessage()) {
    gameplayerleftmessage_ = new ::GamePlayerLeftMessage(*from.gameplayerleftmessage_);
  } else {
    gameplayerleftmessage_ = nullptr;
  }
  if (from.has_gameadminchangedmessage()) {
    gameadminchangedmessage_ = new ::GameAdminChangedMessage(*from.gameadminchangedmessage_);
  } else {
    gameadminchangedmessage_ = nullptr;
  }
  if (from.has_removedfromgamemessage()) {
    removedfromgamemessage_ = new ::RemovedFromGameMessage(*from.removedfromgamemessage_);
  } else {
    removedfromgamemessage_ = nullptr;
  }
  if (from.has_kickplayerrequestmessage()) {
    kickplayerrequestmessage_ = new ::KickPlayerRequestMessage(*from.kickplayerrequestmessage_);
  } else {
    kickplayerrequestmessage_ = nullptr;
  }
  if (from.has_leavegamerequestmessage()) {
    leavegamerequestmessage_ = new ::LeaveGameRequestMessage(*from.leavegamerequestmessage_);
  } else {
    leavegamerequestmessage_ = nullptr;
  }
  if (from.has_inviteplayertogamemessage()) {
    inviteplayertogamemessage_ = new ::InvitePlayerToGameMessage(*from.inviteplayertogamemessage_);
  } else {
    inviteplayertogamemessage_ = nullptr;
  }
  if (from.has_invitenotifymessage()) {
    invitenotifymessage_ = new ::InviteNotifyMessage(*from.invitenotifymessage_);
  } else {
    invitenotifymessage_ = nullptr;
  }
  if (from.has_rejectgameinvitationmessage()) {
    rejectgameinvitationmessage_ = new ::RejectGameInvitationMessage(*from.rejectgameinvitationmessage_);
  } else {
    rejectgameinvitationmessage_ = nullptr;
  }
  if (from.has_rejectinvnotifymessage()) {
    rejectinvnotifymessage_ = new ::RejectInvNotifyMessage(*from.rejectinvnotifymessage_);
  } else {
    rejectinvnotifymessage_ = nullptr;
  }
  if (from.has_starteventmessage()) {
    starteventmessage_ = new ::StartEventMessage(*from.starteventmessage_);
  } else {
    starteventmessage_ = nullptr;
  }
  if (from.has_starteventackmessage()) {
    starteventackmessage_ = new ::StartEventAckMessage(*from.starteventackmessage_);
  } else {
    starteventackmessage_ = nullptr;
  }
  if (from.has_gamestartinitialmessage()) {
    gamestartinitialmessage_ = new ::GameStartInitialMessage(*from.gamestartinitialmessage_);
  } else {
    gamestartinitialmessage_ = nullptr;
  }
  if (from.has_gamestartrejoinmessage()) {
    gamestartrejoinmessage_ = new ::GameStartRejoinMessage(*from.gamestartrejoinmessage_);
  } else {
    gamestartrejoinmessage_ = nullptr;
  }
  if (from.has_handstartmessage()) {
    handstartmessage_ = new ::HandStartMessage(*from.handstartmessage_);
  } else {
    handstartmessage_ = nullptr;
  }
  if (from.has_playersturnmessage()) {
    playersturnmessage_ = new ::PlayersTurnMessage(*from.playersturnmessage_);
  } else {
    playersturnmessage_ = nullptr;
  }
  if (from.has_myactionrequestmessage()) {
    myactionrequestmessage_ = new ::MyActionRequestMessage(*from.myactionrequestmessage_);
  } else {
    myactionrequestmessage_ = nullptr;
  }
  if (from.has_youractionrejectedmessage()) {
    youractionrejectedmessage_ = new ::YourActionRejectedMessage(*from.youractionrejectedmessage_);
  } else {
    youractionrejectedmessage_ = nullptr;
  }
  if (from.has_playersactiondonemessage()) {
    playersactiondonemessage_ = new ::PlayersActionDoneMessage(*from.playersactiondonemessage_);
  } else {
    playersactiondonemessage_ = nullptr;
  }
  if (from.has_dealflopcardsmessage()) {
    dealflopcardsmessage_ = new ::DealFlopCardsMessage(*from.dealflopcardsmessage_);
  } else {
    dealflopcardsmessage_ = nullptr;
  }
  if (from.has_dealturncardmessage()) {
    dealturncardmessage_ = new ::DealTurnCardMessage(*from.dealturncardmessage_);
  } else {
    dealturncardmessage_ = nullptr;
  }
  if (from.has_dealrivercardmessage()) {
    dealrivercardmessage_ = new ::DealRiverCardMessage(*from.dealrivercardmessage_);
  } else {
    dealrivercardmessage_ = nullptr;
  }
  if (from.has_allinshowcardsmessage()) {
    allinshowcardsmessage_ = new ::AllInShowCardsMessage(*from.allinshowcardsmessage_);
  } else {
    allinshowcardsmessage_ = nullptr;
  }
  if (from.has_endofhandshowcardsmessage()) {
    endofhandshowcardsmessage_ = new ::EndOfHandShowCardsMessage(*from.endofhandshowcardsmessage_);
  } else {
    endofhandshowcardsmessage_ = nullptr;
  }
  if (from.has_endofhandhidecardsmessage()) {
    endofhandhidecardsmessage_ = new ::EndOfHandHideCardsMessage(*from.endofhandhidecardsmessage_);
  } else {
    endofhandhidecardsmessage_ = nullptr;
  }
  if (from.has_showmycardsrequestmessage()) {
    showmycardsrequestmessage_ = new ::ShowMyCardsRequestMessage(*from.showmycardsrequestmessage_);
  } else {
    showmycardsrequestmessage_ = nullptr;
  }
  if (from.has_afterhandshowcardsmessage()) {
    afterhandshowcardsmessage_ = new ::AfterHandShowCardsMessage(*from.afterhandshowcardsmessage_);
  } else {
    afterhandshowcardsmessage_ = nullptr;
  }
  if (from.has_endofgamemessage()) {
    endofgamemessage_ = new ::EndOfGameMessage(*from.endofgamemessage_);
  } else {
    endofgamemessage_ = nullptr;
  }
  if (from.has_playeridchangedmessage()) {
    playeridchangedmessage_ = new ::PlayerIdChangedMessage(*from.playeridchangedmessage_);
  } else {
    playeridchangedmessage_ = nullptr;
  }
  if (from.has_askkickplayermessage()) {
    askkickplayermessage_ = new ::AskKickPlayerMessage(*from.askkickplayermessage_);
  } else {
    askkickplayermessage_ = nullptr;
  }
  if (from.has_askkickdeniedmessage()) {
    askkickdeniedmessage_ = new ::AskKickDeniedMessage(*from.askkickdeniedmessage_);
  } else {
    askkickdeniedmessage_ = nullptr;
  }
  if (from.has_startkickpetitionmessage()) {
    startkickpetitionmessage_ = new ::StartKickPetitionMessage(*from.startkickpetitionmessage_);
  } else {
    startkickpetitionmessage_ = nullptr;
  }
  if (from.has_votekickrequestmessage()) {
    votekickrequestmessage_ = new ::VoteKickRequestMessage(*from.votekickrequestmessage_);
  } else {
    votekickrequestmessage_ = nullptr;
  }
  if (from.has_votekickreplymessage()) {
    votekickreplymessage_ = new ::VoteKickReplyMessage(*from.votekickreplymessage_);
  } else {
    votekickreplymessage_ = nullptr;
  }
  if (from.has_kickpetitionupdatemessage()) {
    kickpetitionupdatemessage_ = new ::KickPetitionUpdateMessage(*from.kickpetitionupdatemessage_);
  } else {
    kickpetitionupdatemessage_ = nullptr;
  }
  if (from.has_endkickpetitionmessage()) {
    endkickpetitionmessage_ = new ::EndKickPetitionMessage(*from.endkickpetitionmessage_);
  } else {
    endkickpetitionmessage_ = nullptr;
  }
  if (from.has_statisticsmessage()) {
    statisticsmessage_ = new ::StatisticsMessage(*from.statisticsmessage_);
  } else {
    statisticsmessage_ = nullptr;
  }
  if (from.has_chatrequestmessage()) {
    chatrequestmessage_ = new ::ChatRequestMessage(*from.chatrequestmessage_);
  } else {
    chatrequestmessage_ = nullptr;
  }
  if (from.has_chatmessage()) {
    chatmessage_ = new ::ChatMessage(*from.chatmessage_);
  } else {
    chatmessage_ = nullptr;
  }
  if (from.has_chatrejectmessage()) {
    chatrejectmessage_ = new ::ChatRejectMessage(*from.chatrejectmessage_);
  } else {
    chatrejectmessage_ = nullptr;
  }
  if (from.has_dialogmessage()) {
    dialogmessage_ = new ::DialogMessage(*from.dialogmessage_);
  } else {
    dialogmessage_ = nullptr;
  }
  if (from.has_timeoutwarningmessage()) {
    timeoutwarningmessage_ = new ::TimeoutWarningMessage(*from.timeoutwarningmessage_);
  } else {
    timeoutwarningmessage_ = nullptr;
  }
  if (from.has_resettimeoutmessage()) {
    resettimeoutmessage_ = new ::ResetTimeoutMessage(*from.resettimeoutmessage_);
  } else {
    resettimeoutmessage_ = nullptr;
  }
  if (from.has_reportavatarmessage()) {
    reportavatarmessage_ = new ::ReportAvatarMessage(*from.reportavatarmessage_);
  } else {
    reportavatarmessage_ = nullptr;
  }
  if (from.has_reportavatarackmessage()) {
    reportavatarackmessage_ = new ::ReportAvatarAckMessage(*from.reportavatarackmessage_);
  } else {
    reportavatarackmessage_ = nullptr;
  }
  if (from.has_reportgamemessage()) {
    reportgamemessage_ = new ::ReportGameMessage(*from.reportgamemessage_);
  } else {
    reportgamemessage_ = nullptr;
  }
  if (from.has_reportgameackmessage()) {
    reportgameackmessage_ = new ::ReportGameAckMessage(*from.reportgameackmessage_);
  } else {
    reportgameackmessage_ = nullptr;
  }
  if (from.has_errormessage()) {
    errormessage_ = new ::ErrorMessage(*from.errormessage_);
  } else {
    errormessage_ = nullptr;
  }
  if (from.has_adminremovegamemessage()) {
    adminremovegamemessage_ = new ::AdminRemoveGameMessage(*from.adminremovegamemessage_);
  } else {
    adminremovegamemessage_ = nullptr;
  }
  if (from.has_adminremovegameackmessage()) {
    adminremovegameackmessage_ = new ::AdminRemoveGameAckMessage(*from.adminremovegameackmessage_);
  } else {
    adminremovegameackmessage_ = nullptr;
  }
  if (from.has_adminbanplayermessage()) {
    adminbanplayermessage_ = new ::AdminBanPlayerMessage(*from.adminbanplayermessage_);
  } else {
    adminbanplayermessage_ = nullptr;
  }
  if (from.has_adminbanplayerackmessage()) {
    adminbanplayerackmessage_ = new ::AdminBanPlayerAckMessage(*from.adminbanplayerackmessage_);
  } else {
    adminbanplayerackmessage_ = nullptr;
  }
  if (from.has_gamelistspectatorjoinedmessage()) {
    gamelistspectatorjoinedmessage_ = new ::GameListSpectatorJoinedMessage(*from.gamelistspectatorjoinedmessage_);
  } else {
    gamelistspectatorjoinedmessage_ = nullptr;
  }
  if (from.has_gamelistspectatorleftmessage()) {
    gamelistspectatorleftmessage_ = new ::GameListSpectatorLeftMessage(*from.gamelistspectatorleftmessage_);
  } else {
    gamelistspectatorleftmessage_ = nullptr;
  }
  if (from.has_gamespectatorjoinedmessage()) {
    gamespectatorjoinedmessage_ = new ::GameSpectatorJoinedMessage(*from.gamespectatorjoinedmessage_);
  } else {
    gamespectatorjoinedmessage_ = nullptr;
  }
  if (from.has_gamespectatorleftmessage()) {
    gamespectatorleftmessage_ = new ::GameSpectatorLeftMessage(*from.gamespectatorleftmessage_);
  } else {
    gamespectatorleftmessage_ = nullptr;
  }
  messagetype_ = from.messagetype_;
  // @@protoc_insertion_point(copy_constructor:PokerTHMessage)
}

void PokerTHMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PokerTHMessage_pokerth_2eproto.base);
  ::memset(&announcemessage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamespectatorleftmessage_) -
      reinterpret_cast<char*>(&announcemessage_)) + sizeof(gamespectatorleftmessage_));
  messagetype_ = 1;
}

PokerTHMessage::~PokerTHMessage() {
  // @@protoc_insertion_point(destructor:PokerTHMessage)
  SharedDtor();
}

void PokerTHMessage::SharedDtor() {
  if (this != internal_default_instance()) delete announcemessage_;
  if (this != internal_default_instance()) delete initmessage_;
  if (this != internal_default_instance()) delete authserverchallengemessage_;
  if (this != internal_default_instance()) delete authclientresponsemessage_;
  if (this != internal_default_instance()) delete authserververificationmessage_;
  if (this != internal_default_instance()) delete initackmessage_;
  if (this != internal_default_instance()) delete avatarrequestmessage_;
  if (this != internal_default_instance()) delete avatarheadermessage_;
  if (this != internal_default_instance()) delete avatardatamessage_;
  if (this != internal_default_instance()) delete avatarendmessage_;
  if (this != internal_default_instance()) delete unknownavatarmessage_;
  if (this != internal_default_instance()) delete playerlistmessage_;
  if (this != internal_default_instance()) delete gamelistnewmessage_;
  if (this != internal_default_instance()) delete gamelistupdatemessage_;
  if (this != internal_default_instance()) delete gamelistplayerjoinedmessage_;
  if (this != internal_default_instance()) delete gamelistplayerleftmessage_;
  if (this != internal_default_instance()) delete gamelistadminchangedmessage_;
  if (this != internal_default_instance()) delete playerinforequestmessage_;
  if (this != internal_default_instance()) delete playerinforeplymessage_;
  if (this != internal_default_instance()) delete subscriptionrequestmessage_;
  if (this != internal_default_instance()) delete joinexistinggamemessage_;
  if (this != internal_default_instance()) delete joinnewgamemessage_;
  if (this != internal_default_instance()) delete rejoinexistinggamemessage_;
  if (this != internal_default_instance()) delete joingameackmessage_;
  if (this != internal_default_instance()) delete joingamefailedmessage_;
  if (this != internal_default_instance()) delete gameplayerjoinedmessage_;
  if (this != internal_default_instance()) delete gameplayerleftmessage_;
  if (this != internal_default_instance()) delete gameadminchangedmessage_;
  if (this != internal_default_instance()) delete removedfromgamemessage_;
  if (this != internal_default_instance()) delete kickplayerrequestmessage_;
  if (this != internal_default_instance()) delete leavegamerequestmessage_;
  if (this != internal_default_instance()) delete inviteplayertogamemessage_;
  if (this != internal_default_instance()) delete invitenotifymessage_;
  if (this != internal_default_instance()) delete rejectgameinvitationmessage_;
  if (this != internal_default_instance()) delete rejectinvnotifymessage_;
  if (this != internal_default_instance()) delete starteventmessage_;
  if (this != internal_default_instance()) delete starteventackmessage_;
  if (this != internal_default_instance()) delete gamestartinitialmessage_;
  if (this != internal_default_instance()) delete gamestartrejoinmessage_;
  if (this != internal_default_instance()) delete handstartmessage_;
  if (this != internal_default_instance()) delete playersturnmessage_;
  if (this != internal_default_instance()) delete myactionrequestmessage_;
  if (this != internal_default_instance()) delete youractionrejectedmessage_;
  if (this != internal_default_instance()) delete playersactiondonemessage_;
  if (this != internal_default_instance()) delete dealflopcardsmessage_;
  if (this != internal_default_instance()) delete dealturncardmessage_;
  if (this != internal_default_instance()) delete dealrivercardmessage_;
  if (this != internal_default_instance()) delete allinshowcardsmessage_;
  if (this != internal_default_instance()) delete endofhandshowcardsmessage_;
  if (this != internal_default_instance()) delete endofhandhidecardsmessage_;
  if (this != internal_default_instance()) delete showmycardsrequestmessage_;
  if (this != internal_default_instance()) delete afterhandshowcardsmessage_;
  if (this != internal_default_instance()) delete endofgamemessage_;
  if (this != internal_default_instance()) delete playeridchangedmessage_;
  if (this != internal_default_instance()) delete askkickplayermessage_;
  if (this != internal_default_instance()) delete askkickdeniedmessage_;
  if (this != internal_default_instance()) delete startkickpetitionmessage_;
  if (this != internal_default_instance()) delete votekickrequestmessage_;
  if (this != internal_default_instance()) delete votekickreplymessage_;
  if (this != internal_default_instance()) delete kickpetitionupdatemessage_;
  if (this != internal_default_instance()) delete endkickpetitionmessage_;
  if (this != internal_default_instance()) delete statisticsmessage_;
  if (this != internal_default_instance()) delete chatrequestmessage_;
  if (this != internal_default_instance()) delete chatmessage_;
  if (this != internal_default_instance()) delete chatrejectmessage_;
  if (this != internal_default_instance()) delete dialogmessage_;
  if (this != internal_default_instance()) delete timeoutwarningmessage_;
  if (this != internal_default_instance()) delete resettimeoutmessage_;
  if (this != internal_default_instance()) delete reportavatarmessage_;
  if (this != internal_default_instance()) delete reportavatarackmessage_;
  if (this != internal_default_instance()) delete reportgamemessage_;
  if (this != internal_default_instance()) delete reportgameackmessage_;
  if (this != internal_default_instance()) delete errormessage_;
  if (this != internal_default_instance()) delete adminremovegamemessage_;
  if (this != internal_default_instance()) delete adminremovegameackmessage_;
  if (this != internal_default_instance()) delete adminbanplayermessage_;
  if (this != internal_default_instance()) delete adminbanplayerackmessage_;
  if (this != internal_default_instance()) delete gamelistspectatorjoinedmessage_;
  if (this != internal_default_instance()) delete gamelistspectatorleftmessage_;
  if (this != internal_default_instance()) delete gamespectatorjoinedmessage_;
  if (this != internal_default_instance()) delete gamespectatorleftmessage_;
}

void PokerTHMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PokerTHMessage& PokerTHMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PokerTHMessage_pokerth_2eproto.base);
  return *internal_default_instance();
}


void PokerTHMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:PokerTHMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(announcemessage_ != nullptr);
      announcemessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(initmessage_ != nullptr);
      initmessage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(authserverchallengemessage_ != nullptr);
      authserverchallengemessage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(authclientresponsemessage_ != nullptr);
      authclientresponsemessage_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(authserververificationmessage_ != nullptr);
      authserververificationmessage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(initackmessage_ != nullptr);
      initackmessage_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(avatarrequestmessage_ != nullptr);
      avatarrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(avatarheadermessage_ != nullptr);
      avatarheadermessage_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(avatardatamessage_ != nullptr);
      avatardatamessage_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(avatarendmessage_ != nullptr);
      avatarendmessage_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(unknownavatarmessage_ != nullptr);
      unknownavatarmessage_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(playerlistmessage_ != nullptr);
      playerlistmessage_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(gamelistnewmessage_ != nullptr);
      gamelistnewmessage_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(gamelistupdatemessage_ != nullptr);
      gamelistupdatemessage_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(gamelistplayerjoinedmessage_ != nullptr);
      gamelistplayerjoinedmessage_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(gamelistplayerleftmessage_ != nullptr);
      gamelistplayerleftmessage_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(gamelistadminchangedmessage_ != nullptr);
      gamelistadminchangedmessage_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(playerinforequestmessage_ != nullptr);
      playerinforequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(playerinforeplymessage_ != nullptr);
      playerinforeplymessage_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(subscriptionrequestmessage_ != nullptr);
      subscriptionrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(joinexistinggamemessage_ != nullptr);
      joinexistinggamemessage_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(joinnewgamemessage_ != nullptr);
      joinnewgamemessage_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(rejoinexistinggamemessage_ != nullptr);
      rejoinexistinggamemessage_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(joingameackmessage_ != nullptr);
      joingameackmessage_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(joingamefailedmessage_ != nullptr);
      joingamefailedmessage_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(gameplayerjoinedmessage_ != nullptr);
      gameplayerjoinedmessage_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(gameplayerleftmessage_ != nullptr);
      gameplayerleftmessage_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(gameadminchangedmessage_ != nullptr);
      gameadminchangedmessage_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(removedfromgamemessage_ != nullptr);
      removedfromgamemessage_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(kickplayerrequestmessage_ != nullptr);
      kickplayerrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(leavegamerequestmessage_ != nullptr);
      leavegamerequestmessage_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(inviteplayertogamemessage_ != nullptr);
      inviteplayertogamemessage_->Clear();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(invitenotifymessage_ != nullptr);
      invitenotifymessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rejectgameinvitationmessage_ != nullptr);
      rejectgameinvitationmessage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rejectinvnotifymessage_ != nullptr);
      rejectinvnotifymessage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(starteventmessage_ != nullptr);
      starteventmessage_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(starteventackmessage_ != nullptr);
      starteventackmessage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(gamestartinitialmessage_ != nullptr);
      gamestartinitialmessage_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(gamestartrejoinmessage_ != nullptr);
      gamestartrejoinmessage_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(handstartmessage_ != nullptr);
      handstartmessage_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(playersturnmessage_ != nullptr);
      playersturnmessage_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(myactionrequestmessage_ != nullptr);
      myactionrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(youractionrejectedmessage_ != nullptr);
      youractionrejectedmessage_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(playersactiondonemessage_ != nullptr);
      playersactiondonemessage_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(dealflopcardsmessage_ != nullptr);
      dealflopcardsmessage_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(dealturncardmessage_ != nullptr);
      dealturncardmessage_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(dealrivercardmessage_ != nullptr);
      dealrivercardmessage_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(allinshowcardsmessage_ != nullptr);
      allinshowcardsmessage_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(endofhandshowcardsmessage_ != nullptr);
      endofhandshowcardsmessage_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(endofhandhidecardsmessage_ != nullptr);
      endofhandhidecardsmessage_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(showmycardsrequestmessage_ != nullptr);
      showmycardsrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(afterhandshowcardsmessage_ != nullptr);
      afterhandshowcardsmessage_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(endofgamemessage_ != nullptr);
      endofgamemessage_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(playeridchangedmessage_ != nullptr);
      playeridchangedmessage_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(askkickplayermessage_ != nullptr);
      askkickplayermessage_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(askkickdeniedmessage_ != nullptr);
      askkickdeniedmessage_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(startkickpetitionmessage_ != nullptr);
      startkickpetitionmessage_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(votekickrequestmessage_ != nullptr);
      votekickrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(votekickreplymessage_ != nullptr);
      votekickreplymessage_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(kickpetitionupdatemessage_ != nullptr);
      kickpetitionupdatemessage_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(endkickpetitionmessage_ != nullptr);
      endkickpetitionmessage_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(statisticsmessage_ != nullptr);
      statisticsmessage_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(chatrequestmessage_ != nullptr);
      chatrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(chatmessage_ != nullptr);
      chatmessage_->Clear();
    }
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(chatrejectmessage_ != nullptr);
      chatrejectmessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dialogmessage_ != nullptr);
      dialogmessage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(timeoutwarningmessage_ != nullptr);
      timeoutwarningmessage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(resettimeoutmessage_ != nullptr);
      resettimeoutmessage_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(reportavatarmessage_ != nullptr);
      reportavatarmessage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(reportavatarackmessage_ != nullptr);
      reportavatarackmessage_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(reportgamemessage_ != nullptr);
      reportgamemessage_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(reportgameackmessage_ != nullptr);
      reportgameackmessage_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(errormessage_ != nullptr);
      errormessage_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(adminremovegamemessage_ != nullptr);
      adminremovegamemessage_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(adminremovegameackmessage_ != nullptr);
      adminremovegameackmessage_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(adminbanplayermessage_ != nullptr);
      adminbanplayermessage_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(adminbanplayerackmessage_ != nullptr);
      adminbanplayerackmessage_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(gamelistspectatorjoinedmessage_ != nullptr);
      gamelistspectatorjoinedmessage_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(gamelistspectatorleftmessage_ != nullptr);
      gamelistspectatorleftmessage_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(gamespectatorjoinedmessage_ != nullptr);
      gamespectatorjoinedmessage_->Clear();
    }
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(gamespectatorleftmessage_ != nullptr);
      gamespectatorleftmessage_->Clear();
    }
    messagetype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PokerTHMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PokerTHMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .PokerTHMessage.PokerTHMessageType messageType = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::PokerTHMessage_PokerTHMessageType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_messagetype(static_cast<::PokerTHMessage_PokerTHMessageType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .AnnounceMessage announceMessage = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::AnnounceMessage::_InternalParse;
        object = msg->mutable_announcemessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .InitMessage initMessage = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::InitMessage::_InternalParse;
        object = msg->mutable_initmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .AuthServerChallengeMessage authServerChallengeMessage = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::AuthServerChallengeMessage::_InternalParse;
        object = msg->mutable_authserverchallengemessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .AuthClientResponseMessage authClientResponseMessage = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::AuthClientResponseMessage::_InternalParse;
        object = msg->mutable_authclientresponsemessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .AuthServerVerificationMessage authServerVerificationMessage = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::AuthServerVerificationMessage::_InternalParse;
        object = msg->mutable_authserververificationmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .InitAckMessage initAckMessage = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::InitAckMessage::_InternalParse;
        object = msg->mutable_initackmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .AvatarRequestMessage avatarRequestMessage = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::AvatarRequestMessage::_InternalParse;
        object = msg->mutable_avatarrequestmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .AvatarHeaderMessage avatarHeaderMessage = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::AvatarHeaderMessage::_InternalParse;
        object = msg->mutable_avatarheadermessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .AvatarDataMessage avatarDataMessage = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::AvatarDataMessage::_InternalParse;
        object = msg->mutable_avatardatamessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .AvatarEndMessage avatarEndMessage = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::AvatarEndMessage::_InternalParse;
        object = msg->mutable_avatarendmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .UnknownAvatarMessage unknownAvatarMessage = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::UnknownAvatarMessage::_InternalParse;
        object = msg->mutable_unknownavatarmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .PlayerListMessage playerListMessage = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::PlayerListMessage::_InternalParse;
        object = msg->mutable_playerlistmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .GameListNewMessage gameListNewMessage = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GameListNewMessage::_InternalParse;
        object = msg->mutable_gamelistnewmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .GameListUpdateMessage gameListUpdateMessage = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GameListUpdateMessage::_InternalParse;
        object = msg->mutable_gamelistupdatemessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .GameListPlayerJoinedMessage gameListPlayerJoinedMessage = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GameListPlayerJoinedMessage::_InternalParse;
        object = msg->mutable_gamelistplayerjoinedmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .GameListPlayerLeftMessage gameListPlayerLeftMessage = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GameListPlayerLeftMessage::_InternalParse;
        object = msg->mutable_gamelistplayerleftmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .GameListAdminChangedMessage gameListAdminChangedMessage = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GameListAdminChangedMessage::_InternalParse;
        object = msg->mutable_gamelistadminchangedmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .PlayerInfoRequestMessage playerInfoRequestMessage = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 154) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::PlayerInfoRequestMessage::_InternalParse;
        object = msg->mutable_playerinforequestmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .PlayerInfoReplyMessage playerInfoReplyMessage = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::PlayerInfoReplyMessage::_InternalParse;
        object = msg->mutable_playerinforeplymessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .SubscriptionRequestMessage subscriptionRequestMessage = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::SubscriptionRequestMessage::_InternalParse;
        object = msg->mutable_subscriptionrequestmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .JoinExistingGameMessage joinExistingGameMessage = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::JoinExistingGameMessage::_InternalParse;
        object = msg->mutable_joinexistinggamemessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .JoinNewGameMessage joinNewGameMessage = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 186) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::JoinNewGameMessage::_InternalParse;
        object = msg->mutable_joinnewgamemessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .RejoinExistingGameMessage rejoinExistingGameMessage = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 194) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::RejoinExistingGameMessage::_InternalParse;
        object = msg->mutable_rejoinexistinggamemessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .JoinGameAckMessage joinGameAckMessage = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 202) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::JoinGameAckMessage::_InternalParse;
        object = msg->mutable_joingameackmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .JoinGameFailedMessage joinGameFailedMessage = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 210) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::JoinGameFailedMessage::_InternalParse;
        object = msg->mutable_joingamefailedmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .GamePlayerJoinedMessage gamePlayerJoinedMessage = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 218) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GamePlayerJoinedMessage::_InternalParse;
        object = msg->mutable_gameplayerjoinedmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .GamePlayerLeftMessage gamePlayerLeftMessage = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 226) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GamePlayerLeftMessage::_InternalParse;
        object = msg->mutable_gameplayerleftmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .GameAdminChangedMessage gameAdminChangedMessage = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 234) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GameAdminChangedMessage::_InternalParse;
        object = msg->mutable_gameadminchangedmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .RemovedFromGameMessage removedFromGameMessage = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 242) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::RemovedFromGameMessage::_InternalParse;
        object = msg->mutable_removedfromgamemessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .KickPlayerRequestMessage kickPlayerRequestMessage = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 250) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::KickPlayerRequestMessage::_InternalParse;
        object = msg->mutable_kickplayerrequestmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .LeaveGameRequestMessage leaveGameRequestMessage = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 2) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::LeaveGameRequestMessage::_InternalParse;
        object = msg->mutable_leavegamerequestmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .InvitePlayerToGameMessage invitePlayerToGameMessage = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::InvitePlayerToGameMessage::_InternalParse;
        object = msg->mutable_inviteplayertogamemessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .InviteNotifyMessage inviteNotifyMessage = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::InviteNotifyMessage::_InternalParse;
        object = msg->mutable_invitenotifymessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .RejectGameInvitationMessage rejectGameInvitationMessage = 35;
      case 35: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::RejectGameInvitationMessage::_InternalParse;
        object = msg->mutable_rejectgameinvitationmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .RejectInvNotifyMessage rejectInvNotifyMessage = 36;
      case 36: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::RejectInvNotifyMessage::_InternalParse;
        object = msg->mutable_rejectinvnotifymessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .StartEventMessage startEventMessage = 37;
      case 37: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::StartEventMessage::_InternalParse;
        object = msg->mutable_starteventmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .StartEventAckMessage startEventAckMessage = 38;
      case 38: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::StartEventAckMessage::_InternalParse;
        object = msg->mutable_starteventackmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .GameStartInitialMessage gameStartInitialMessage = 39;
      case 39: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GameStartInitialMessage::_InternalParse;
        object = msg->mutable_gamestartinitialmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .GameStartRejoinMessage gameStartRejoinMessage = 40;
      case 40: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GameStartRejoinMessage::_InternalParse;
        object = msg->mutable_gamestartrejoinmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .HandStartMessage handStartMessage = 41;
      case 41: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::HandStartMessage::_InternalParse;
        object = msg->mutable_handstartmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .PlayersTurnMessage playersTurnMessage = 42;
      case 42: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::PlayersTurnMessage::_InternalParse;
        object = msg->mutable_playersturnmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .MyActionRequestMessage myActionRequestMessage = 43;
      case 43: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::MyActionRequestMessage::_InternalParse;
        object = msg->mutable_myactionrequestmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .YourActionRejectedMessage yourActionRejectedMessage = 44;
      case 44: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::YourActionRejectedMessage::_InternalParse;
        object = msg->mutable_youractionrejectedmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .PlayersActionDoneMessage playersActionDoneMessage = 45;
      case 45: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::PlayersActionDoneMessage::_InternalParse;
        object = msg->mutable_playersactiondonemessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .DealFlopCardsMessage dealFlopCardsMessage = 46;
      case 46: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::DealFlopCardsMessage::_InternalParse;
        object = msg->mutable_dealflopcardsmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .DealTurnCardMessage dealTurnCardMessage = 47;
      case 47: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::DealTurnCardMessage::_InternalParse;
        object = msg->mutable_dealturncardmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .DealRiverCardMessage dealRiverCardMessage = 48;
      case 48: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::DealRiverCardMessage::_InternalParse;
        object = msg->mutable_dealrivercardmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .AllInShowCardsMessage allInShowCardsMessage = 49;
      case 49: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::AllInShowCardsMessage::_InternalParse;
        object = msg->mutable_allinshowcardsmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .EndOfHandShowCardsMessage endOfHandShowCardsMessage = 50;
      case 50: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::EndOfHandShowCardsMessage::_InternalParse;
        object = msg->mutable_endofhandshowcardsmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .EndOfHandHideCardsMessage endOfHandHideCardsMessage = 51;
      case 51: {
        if (static_cast<::google::protobuf::uint8>(tag) != 154) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::EndOfHandHideCardsMessage::_InternalParse;
        object = msg->mutable_endofhandhidecardsmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .ShowMyCardsRequestMessage showMyCardsRequestMessage = 52;
      case 52: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ShowMyCardsRequestMessage::_InternalParse;
        object = msg->mutable_showmycardsrequestmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .AfterHandShowCardsMessage afterHandShowCardsMessage = 53;
      case 53: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::AfterHandShowCardsMessage::_InternalParse;
        object = msg->mutable_afterhandshowcardsmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .EndOfGameMessage endOfGameMessage = 54;
      case 54: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::EndOfGameMessage::_InternalParse;
        object = msg->mutable_endofgamemessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .PlayerIdChangedMessage playerIdChangedMessage = 55;
      case 55: {
        if (static_cast<::google::protobuf::uint8>(tag) != 186) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::PlayerIdChangedMessage::_InternalParse;
        object = msg->mutable_playeridchangedmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .AskKickPlayerMessage askKickPlayerMessage = 56;
      case 56: {
        if (static_cast<::google::protobuf::uint8>(tag) != 194) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::AskKickPlayerMessage::_InternalParse;
        object = msg->mutable_askkickplayermessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .AskKickDeniedMessage askKickDeniedMessage = 57;
      case 57: {
        if (static_cast<::google::protobuf::uint8>(tag) != 202) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::AskKickDeniedMessage::_InternalParse;
        object = msg->mutable_askkickdeniedmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .StartKickPetitionMessage startKickPetitionMessage = 58;
      case 58: {
        if (static_cast<::google::protobuf::uint8>(tag) != 210) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::StartKickPetitionMessage::_InternalParse;
        object = msg->mutable_startkickpetitionmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .VoteKickRequestMessage voteKickRequestMessage = 59;
      case 59: {
        if (static_cast<::google::protobuf::uint8>(tag) != 218) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::VoteKickRequestMessage::_InternalParse;
        object = msg->mutable_votekickrequestmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .VoteKickReplyMessage voteKickReplyMessage = 60;
      case 60: {
        if (static_cast<::google::protobuf::uint8>(tag) != 226) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::VoteKickReplyMessage::_InternalParse;
        object = msg->mutable_votekickreplymessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .KickPetitionUpdateMessage kickPetitionUpdateMessage = 61;
      case 61: {
        if (static_cast<::google::protobuf::uint8>(tag) != 234) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::KickPetitionUpdateMessage::_InternalParse;
        object = msg->mutable_kickpetitionupdatemessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .EndKickPetitionMessage endKickPetitionMessage = 62;
      case 62: {
        if (static_cast<::google::protobuf::uint8>(tag) != 242) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::EndKickPetitionMessage::_InternalParse;
        object = msg->mutable_endkickpetitionmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .StatisticsMessage statisticsMessage = 63;
      case 63: {
        if (static_cast<::google::protobuf::uint8>(tag) != 250) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::StatisticsMessage::_InternalParse;
        object = msg->mutable_statisticsmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .ChatRequestMessage chatRequestMessage = 64;
      case 64: {
        if (static_cast<::google::protobuf::uint8>(tag) != 2) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ChatRequestMessage::_InternalParse;
        object = msg->mutable_chatrequestmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .ChatMessage chatMessage = 65;
      case 65: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ChatMessage::_InternalParse;
        object = msg->mutable_chatmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .ChatRejectMessage chatRejectMessage = 66;
      case 66: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ChatRejectMessage::_InternalParse;
        object = msg->mutable_chatrejectmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .DialogMessage dialogMessage = 67;
      case 67: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::DialogMessage::_InternalParse;
        object = msg->mutable_dialogmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .TimeoutWarningMessage timeoutWarningMessage = 68;
      case 68: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::TimeoutWarningMessage::_InternalParse;
        object = msg->mutable_timeoutwarningmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .ResetTimeoutMessage resetTimeoutMessage = 69;
      case 69: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ResetTimeoutMessage::_InternalParse;
        object = msg->mutable_resettimeoutmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .ReportAvatarMessage reportAvatarMessage = 70;
      case 70: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ReportAvatarMessage::_InternalParse;
        object = msg->mutable_reportavatarmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .ReportAvatarAckMessage reportAvatarAckMessage = 71;
      case 71: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ReportAvatarAckMessage::_InternalParse;
        object = msg->mutable_reportavatarackmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .ReportGameMessage reportGameMessage = 72;
      case 72: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ReportGameMessage::_InternalParse;
        object = msg->mutable_reportgamemessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .ReportGameAckMessage reportGameAckMessage = 73;
      case 73: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ReportGameAckMessage::_InternalParse;
        object = msg->mutable_reportgameackmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .ErrorMessage errorMessage = 74;
      case 74: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ErrorMessage::_InternalParse;
        object = msg->mutable_errormessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .AdminRemoveGameMessage adminRemoveGameMessage = 75;
      case 75: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::AdminRemoveGameMessage::_InternalParse;
        object = msg->mutable_adminremovegamemessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .AdminRemoveGameAckMessage adminRemoveGameAckMessage = 76;
      case 76: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::AdminRemoveGameAckMessage::_InternalParse;
        object = msg->mutable_adminremovegameackmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .AdminBanPlayerMessage adminBanPlayerMessage = 77;
      case 77: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::AdminBanPlayerMessage::_InternalParse;
        object = msg->mutable_adminbanplayermessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .AdminBanPlayerAckMessage adminBanPlayerAckMessage = 78;
      case 78: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::AdminBanPlayerAckMessage::_InternalParse;
        object = msg->mutable_adminbanplayerackmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .GameListSpectatorJoinedMessage gameListSpectatorJoinedMessage = 79;
      case 79: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GameListSpectatorJoinedMessage::_InternalParse;
        object = msg->mutable_gamelistspectatorjoinedmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .GameListSpectatorLeftMessage gameListSpectatorLeftMessage = 80;
      case 80: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GameListSpectatorLeftMessage::_InternalParse;
        object = msg->mutable_gamelistspectatorleftmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .GameSpectatorJoinedMessage gameSpectatorJoinedMessage = 81;
      case 81: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GameSpectatorJoinedMessage::_InternalParse;
        object = msg->mutable_gamespectatorjoinedmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .GameSpectatorLeftMessage gameSpectatorLeftMessage = 82;
      case 82: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::GameSpectatorLeftMessage::_InternalParse;
        object = msg->mutable_gamespectatorleftmessage();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PokerTHMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:PokerTHMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PokerTHMessage.PokerTHMessageType messageType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PokerTHMessage_PokerTHMessageType_IsValid(value)) {
            set_messagetype(static_cast< ::PokerTHMessage_PokerTHMessageType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AnnounceMessage announceMessage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_announcemessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .InitMessage initMessage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_initmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AuthServerChallengeMessage authServerChallengeMessage = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_authserverchallengemessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AuthClientResponseMessage authClientResponseMessage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_authclientresponsemessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AuthServerVerificationMessage authServerVerificationMessage = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_authserververificationmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .InitAckMessage initAckMessage = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_initackmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AvatarRequestMessage avatarRequestMessage = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_avatarrequestmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AvatarHeaderMessage avatarHeaderMessage = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_avatarheadermessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AvatarDataMessage avatarDataMessage = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_avatardatamessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AvatarEndMessage avatarEndMessage = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_avatarendmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .UnknownAvatarMessage unknownAvatarMessage = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unknownavatarmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .PlayerListMessage playerListMessage = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_playerlistmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameListNewMessage gameListNewMessage = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gamelistnewmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameListUpdateMessage gameListUpdateMessage = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gamelistupdatemessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameListPlayerJoinedMessage gameListPlayerJoinedMessage = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gamelistplayerjoinedmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameListPlayerLeftMessage gameListPlayerLeftMessage = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gamelistplayerleftmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameListAdminChangedMessage gameListAdminChangedMessage = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gamelistadminchangedmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .PlayerInfoRequestMessage playerInfoRequestMessage = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (154 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_playerinforequestmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .PlayerInfoReplyMessage playerInfoReplyMessage = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_playerinforeplymessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SubscriptionRequestMessage subscriptionRequestMessage = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (170 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subscriptionrequestmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .JoinExistingGameMessage joinExistingGameMessage = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_joinexistinggamemessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .JoinNewGameMessage joinNewGameMessage = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (186 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_joinnewgamemessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .RejoinExistingGameMessage rejoinExistingGameMessage = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (194 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rejoinexistinggamemessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .JoinGameAckMessage joinGameAckMessage = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (202 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_joingameackmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .JoinGameFailedMessage joinGameFailedMessage = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (210 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_joingamefailedmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GamePlayerJoinedMessage gamePlayerJoinedMessage = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (218 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gameplayerjoinedmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GamePlayerLeftMessage gamePlayerLeftMessage = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (226 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gameplayerleftmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameAdminChangedMessage gameAdminChangedMessage = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (234 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gameadminchangedmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .RemovedFromGameMessage removedFromGameMessage = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (242 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_removedfromgamemessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .KickPlayerRequestMessage kickPlayerRequestMessage = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (250 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kickplayerrequestmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .LeaveGameRequestMessage leaveGameRequestMessage = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (258 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leavegamerequestmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .InvitePlayerToGameMessage invitePlayerToGameMessage = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (266 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inviteplayertogamemessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .InviteNotifyMessage inviteNotifyMessage = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (274 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_invitenotifymessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .RejectGameInvitationMessage rejectGameInvitationMessage = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (282 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rejectgameinvitationmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .RejectInvNotifyMessage rejectInvNotifyMessage = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (290 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rejectinvnotifymessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .StartEventMessage startEventMessage = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (298 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_starteventmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .StartEventAckMessage startEventAckMessage = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (306 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_starteventackmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameStartInitialMessage gameStartInitialMessage = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (314 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gamestartinitialmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameStartRejoinMessage gameStartRejoinMessage = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (322 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gamestartrejoinmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .HandStartMessage handStartMessage = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (330 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_handstartmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .PlayersTurnMessage playersTurnMessage = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (338 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_playersturnmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MyActionRequestMessage myActionRequestMessage = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (346 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_myactionrequestmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .YourActionRejectedMessage yourActionRejectedMessage = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (354 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_youractionrejectedmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .PlayersActionDoneMessage playersActionDoneMessage = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (362 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_playersactiondonemessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DealFlopCardsMessage dealFlopCardsMessage = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (370 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dealflopcardsmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DealTurnCardMessage dealTurnCardMessage = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (378 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dealturncardmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DealRiverCardMessage dealRiverCardMessage = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (386 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dealrivercardmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AllInShowCardsMessage allInShowCardsMessage = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (394 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_allinshowcardsmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EndOfHandShowCardsMessage endOfHandShowCardsMessage = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (402 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_endofhandshowcardsmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EndOfHandHideCardsMessage endOfHandHideCardsMessage = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (410 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_endofhandhidecardsmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ShowMyCardsRequestMessage showMyCardsRequestMessage = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (418 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_showmycardsrequestmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AfterHandShowCardsMessage afterHandShowCardsMessage = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (426 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_afterhandshowcardsmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EndOfGameMessage endOfGameMessage = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (434 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_endofgamemessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .PlayerIdChangedMessage playerIdChangedMessage = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (442 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_playeridchangedmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AskKickPlayerMessage askKickPlayerMessage = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (450 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_askkickplayermessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AskKickDeniedMessage askKickDeniedMessage = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (458 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_askkickdeniedmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .StartKickPetitionMessage startKickPetitionMessage = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (466 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_startkickpetitionmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .VoteKickRequestMessage voteKickRequestMessage = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (474 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_votekickrequestmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .VoteKickReplyMessage voteKickReplyMessage = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (482 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_votekickreplymessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .KickPetitionUpdateMessage kickPetitionUpdateMessage = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (490 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kickpetitionupdatemessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EndKickPetitionMessage endKickPetitionMessage = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (498 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_endkickpetitionmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .StatisticsMessage statisticsMessage = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (506 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_statisticsmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ChatRequestMessage chatRequestMessage = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (514 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chatrequestmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ChatMessage chatMessage = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (522 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chatmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ChatRejectMessage chatRejectMessage = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (530 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chatrejectmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .DialogMessage dialogMessage = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (538 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dialogmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TimeoutWarningMessage timeoutWarningMessage = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (546 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timeoutwarningmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ResetTimeoutMessage resetTimeoutMessage = 69;
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (554 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resettimeoutmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ReportAvatarMessage reportAvatarMessage = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (562 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reportavatarmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ReportAvatarAckMessage reportAvatarAckMessage = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (570 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reportavatarackmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ReportGameMessage reportGameMessage = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (578 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reportgamemessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ReportGameAckMessage reportGameAckMessage = 73;
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (586 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reportgameackmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ErrorMessage errorMessage = 74;
      case 74: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (594 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_errormessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AdminRemoveGameMessage adminRemoveGameMessage = 75;
      case 75: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (602 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_adminremovegamemessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AdminRemoveGameAckMessage adminRemoveGameAckMessage = 76;
      case 76: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (610 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_adminremovegameackmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AdminBanPlayerMessage adminBanPlayerMessage = 77;
      case 77: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (618 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_adminbanplayermessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AdminBanPlayerAckMessage adminBanPlayerAckMessage = 78;
      case 78: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (626 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_adminbanplayerackmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameListSpectatorJoinedMessage gameListSpectatorJoinedMessage = 79;
      case 79: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (634 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gamelistspectatorjoinedmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameListSpectatorLeftMessage gameListSpectatorLeftMessage = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (642 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gamelistspectatorleftmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameSpectatorJoinedMessage gameSpectatorJoinedMessage = 81;
      case 81: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (650 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gamespectatorjoinedmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameSpectatorLeftMessage gameSpectatorLeftMessage = 82;
      case 82: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (658 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gamespectatorleftmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PokerTHMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PokerTHMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PokerTHMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PokerTHMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[2];
  // required .PokerTHMessage.PokerTHMessageType messageType = 1;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->messagetype(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .AnnounceMessage announceMessage = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, HasBitSetters::announcemessage(this), output);
  }

  // optional .InitMessage initMessage = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, HasBitSetters::initmessage(this), output);
  }

  // optional .AuthServerChallengeMessage authServerChallengeMessage = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, HasBitSetters::authserverchallengemessage(this), output);
  }

  // optional .AuthClientResponseMessage authClientResponseMessage = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, HasBitSetters::authclientresponsemessage(this), output);
  }

  // optional .AuthServerVerificationMessage authServerVerificationMessage = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, HasBitSetters::authserververificationmessage(this), output);
  }

  // optional .InitAckMessage initAckMessage = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, HasBitSetters::initackmessage(this), output);
  }

  // optional .AvatarRequestMessage avatarRequestMessage = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, HasBitSetters::avatarrequestmessage(this), output);
  }

  // optional .AvatarHeaderMessage avatarHeaderMessage = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, HasBitSetters::avatarheadermessage(this), output);
  }

  // optional .AvatarDataMessage avatarDataMessage = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, HasBitSetters::avatardatamessage(this), output);
  }

  // optional .AvatarEndMessage avatarEndMessage = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, HasBitSetters::avatarendmessage(this), output);
  }

  // optional .UnknownAvatarMessage unknownAvatarMessage = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, HasBitSetters::unknownavatarmessage(this), output);
  }

  // optional .PlayerListMessage playerListMessage = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, HasBitSetters::playerlistmessage(this), output);
  }

  // optional .GameListNewMessage gameListNewMessage = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, HasBitSetters::gamelistnewmessage(this), output);
  }

  // optional .GameListUpdateMessage gameListUpdateMessage = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, HasBitSetters::gamelistupdatemessage(this), output);
  }

  // optional .GameListPlayerJoinedMessage gameListPlayerJoinedMessage = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, HasBitSetters::gamelistplayerjoinedmessage(this), output);
  }

  // optional .GameListPlayerLeftMessage gameListPlayerLeftMessage = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, HasBitSetters::gamelistplayerleftmessage(this), output);
  }

  // optional .GameListAdminChangedMessage gameListAdminChangedMessage = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, HasBitSetters::gamelistadminchangedmessage(this), output);
  }

  // optional .PlayerInfoRequestMessage playerInfoRequestMessage = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, HasBitSetters::playerinforequestmessage(this), output);
  }

  // optional .PlayerInfoReplyMessage playerInfoReplyMessage = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, HasBitSetters::playerinforeplymessage(this), output);
  }

  // optional .SubscriptionRequestMessage subscriptionRequestMessage = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, HasBitSetters::subscriptionrequestmessage(this), output);
  }

  // optional .JoinExistingGameMessage joinExistingGameMessage = 22;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, HasBitSetters::joinexistinggamemessage(this), output);
  }

  // optional .JoinNewGameMessage joinNewGameMessage = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, HasBitSetters::joinnewgamemessage(this), output);
  }

  // optional .RejoinExistingGameMessage rejoinExistingGameMessage = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24, HasBitSetters::rejoinexistinggamemessage(this), output);
  }

  // optional .JoinGameAckMessage joinGameAckMessage = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, HasBitSetters::joingameackmessage(this), output);
  }

  // optional .JoinGameFailedMessage joinGameFailedMessage = 26;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      26, HasBitSetters::joingamefailedmessage(this), output);
  }

  // optional .GamePlayerJoinedMessage gamePlayerJoinedMessage = 27;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27, HasBitSetters::gameplayerjoinedmessage(this), output);
  }

  // optional .GamePlayerLeftMessage gamePlayerLeftMessage = 28;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      28, HasBitSetters::gameplayerleftmessage(this), output);
  }

  // optional .GameAdminChangedMessage gameAdminChangedMessage = 29;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      29, HasBitSetters::gameadminchangedmessage(this), output);
  }

  // optional .RemovedFromGameMessage removedFromGameMessage = 30;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30, HasBitSetters::removedfromgamemessage(this), output);
  }

  // optional .KickPlayerRequestMessage kickPlayerRequestMessage = 31;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31, HasBitSetters::kickplayerrequestmessage(this), output);
  }

  // optional .LeaveGameRequestMessage leaveGameRequestMessage = 32;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      32, HasBitSetters::leavegamerequestmessage(this), output);
  }

  // optional .InvitePlayerToGameMessage invitePlayerToGameMessage = 33;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      33, HasBitSetters::inviteplayertogamemessage(this), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .InviteNotifyMessage inviteNotifyMessage = 34;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      34, HasBitSetters::invitenotifymessage(this), output);
  }

  // optional .RejectGameInvitationMessage rejectGameInvitationMessage = 35;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      35, HasBitSetters::rejectgameinvitationmessage(this), output);
  }

  // optional .RejectInvNotifyMessage rejectInvNotifyMessage = 36;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      36, HasBitSetters::rejectinvnotifymessage(this), output);
  }

  // optional .StartEventMessage startEventMessage = 37;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      37, HasBitSetters::starteventmessage(this), output);
  }

  // optional .StartEventAckMessage startEventAckMessage = 38;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      38, HasBitSetters::starteventackmessage(this), output);
  }

  // optional .GameStartInitialMessage gameStartInitialMessage = 39;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      39, HasBitSetters::gamestartinitialmessage(this), output);
  }

  // optional .GameStartRejoinMessage gameStartRejoinMessage = 40;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      40, HasBitSetters::gamestartrejoinmessage(this), output);
  }

  // optional .HandStartMessage handStartMessage = 41;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      41, HasBitSetters::handstartmessage(this), output);
  }

  // optional .PlayersTurnMessage playersTurnMessage = 42;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      42, HasBitSetters::playersturnmessage(this), output);
  }

  // optional .MyActionRequestMessage myActionRequestMessage = 43;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      43, HasBitSetters::myactionrequestmessage(this), output);
  }

  // optional .YourActionRejectedMessage yourActionRejectedMessage = 44;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      44, HasBitSetters::youractionrejectedmessage(this), output);
  }

  // optional .PlayersActionDoneMessage playersActionDoneMessage = 45;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      45, HasBitSetters::playersactiondonemessage(this), output);
  }

  // optional .DealFlopCardsMessage dealFlopCardsMessage = 46;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      46, HasBitSetters::dealflopcardsmessage(this), output);
  }

  // optional .DealTurnCardMessage dealTurnCardMessage = 47;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      47, HasBitSetters::dealturncardmessage(this), output);
  }

  // optional .DealRiverCardMessage dealRiverCardMessage = 48;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      48, HasBitSetters::dealrivercardmessage(this), output);
  }

  // optional .AllInShowCardsMessage allInShowCardsMessage = 49;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      49, HasBitSetters::allinshowcardsmessage(this), output);
  }

  // optional .EndOfHandShowCardsMessage endOfHandShowCardsMessage = 50;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      50, HasBitSetters::endofhandshowcardsmessage(this), output);
  }

  // optional .EndOfHandHideCardsMessage endOfHandHideCardsMessage = 51;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      51, HasBitSetters::endofhandhidecardsmessage(this), output);
  }

  // optional .ShowMyCardsRequestMessage showMyCardsRequestMessage = 52;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      52, HasBitSetters::showmycardsrequestmessage(this), output);
  }

  // optional .AfterHandShowCardsMessage afterHandShowCardsMessage = 53;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      53, HasBitSetters::afterhandshowcardsmessage(this), output);
  }

  // optional .EndOfGameMessage endOfGameMessage = 54;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      54, HasBitSetters::endofgamemessage(this), output);
  }

  // optional .PlayerIdChangedMessage playerIdChangedMessage = 55;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      55, HasBitSetters::playeridchangedmessage(this), output);
  }

  // optional .AskKickPlayerMessage askKickPlayerMessage = 56;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      56, HasBitSetters::askkickplayermessage(this), output);
  }

  // optional .AskKickDeniedMessage askKickDeniedMessage = 57;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      57, HasBitSetters::askkickdeniedmessage(this), output);
  }

  // optional .StartKickPetitionMessage startKickPetitionMessage = 58;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      58, HasBitSetters::startkickpetitionmessage(this), output);
  }

  // optional .VoteKickRequestMessage voteKickRequestMessage = 59;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      59, HasBitSetters::votekickrequestmessage(this), output);
  }

  // optional .VoteKickReplyMessage voteKickReplyMessage = 60;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      60, HasBitSetters::votekickreplymessage(this), output);
  }

  // optional .KickPetitionUpdateMessage kickPetitionUpdateMessage = 61;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      61, HasBitSetters::kickpetitionupdatemessage(this), output);
  }

  // optional .EndKickPetitionMessage endKickPetitionMessage = 62;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      62, HasBitSetters::endkickpetitionmessage(this), output);
  }

  // optional .StatisticsMessage statisticsMessage = 63;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      63, HasBitSetters::statisticsmessage(this), output);
  }

  // optional .ChatRequestMessage chatRequestMessage = 64;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      64, HasBitSetters::chatrequestmessage(this), output);
  }

  // optional .ChatMessage chatMessage = 65;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      65, HasBitSetters::chatmessage(this), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional .ChatRejectMessage chatRejectMessage = 66;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      66, HasBitSetters::chatrejectmessage(this), output);
  }

  // optional .DialogMessage dialogMessage = 67;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      67, HasBitSetters::dialogmessage(this), output);
  }

  // optional .TimeoutWarningMessage timeoutWarningMessage = 68;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      68, HasBitSetters::timeoutwarningmessage(this), output);
  }

  // optional .ResetTimeoutMessage resetTimeoutMessage = 69;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      69, HasBitSetters::resettimeoutmessage(this), output);
  }

  // optional .ReportAvatarMessage reportAvatarMessage = 70;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      70, HasBitSetters::reportavatarmessage(this), output);
  }

  // optional .ReportAvatarAckMessage reportAvatarAckMessage = 71;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      71, HasBitSetters::reportavatarackmessage(this), output);
  }

  // optional .ReportGameMessage reportGameMessage = 72;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      72, HasBitSetters::reportgamemessage(this), output);
  }

  // optional .ReportGameAckMessage reportGameAckMessage = 73;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      73, HasBitSetters::reportgameackmessage(this), output);
  }

  // optional .ErrorMessage errorMessage = 74;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      74, HasBitSetters::errormessage(this), output);
  }

  // optional .AdminRemoveGameMessage adminRemoveGameMessage = 75;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      75, HasBitSetters::adminremovegamemessage(this), output);
  }

  // optional .AdminRemoveGameAckMessage adminRemoveGameAckMessage = 76;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      76, HasBitSetters::adminremovegameackmessage(this), output);
  }

  // optional .AdminBanPlayerMessage adminBanPlayerMessage = 77;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      77, HasBitSetters::adminbanplayermessage(this), output);
  }

  // optional .AdminBanPlayerAckMessage adminBanPlayerAckMessage = 78;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      78, HasBitSetters::adminbanplayerackmessage(this), output);
  }

  // optional .GameListSpectatorJoinedMessage gameListSpectatorJoinedMessage = 79;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      79, HasBitSetters::gamelistspectatorjoinedmessage(this), output);
  }

  // optional .GameListSpectatorLeftMessage gameListSpectatorLeftMessage = 80;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      80, HasBitSetters::gamelistspectatorleftmessage(this), output);
  }

  // optional .GameSpectatorJoinedMessage gameSpectatorJoinedMessage = 81;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      81, HasBitSetters::gamespectatorjoinedmessage(this), output);
  }

  // optional .GameSpectatorLeftMessage gameSpectatorLeftMessage = 82;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      82, HasBitSetters::gamespectatorleftmessage(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:PokerTHMessage)
}

size_t PokerTHMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PokerTHMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .PokerTHMessage.PokerTHMessageType messageType = 1;
  if (has_messagetype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagetype());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .AnnounceMessage announceMessage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *announcemessage_);
    }

    // optional .InitMessage initMessage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *initmessage_);
    }

    // optional .AuthServerChallengeMessage authServerChallengeMessage = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *authserverchallengemessage_);
    }

    // optional .AuthClientResponseMessage authClientResponseMessage = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *authclientresponsemessage_);
    }

    // optional .AuthServerVerificationMessage authServerVerificationMessage = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *authserververificationmessage_);
    }

    // optional .InitAckMessage initAckMessage = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *initackmessage_);
    }

    // optional .AvatarRequestMessage avatarRequestMessage = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *avatarrequestmessage_);
    }

    // optional .AvatarHeaderMessage avatarHeaderMessage = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *avatarheadermessage_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .AvatarDataMessage avatarDataMessage = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *avatardatamessage_);
    }

    // optional .AvatarEndMessage avatarEndMessage = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *avatarendmessage_);
    }

    // optional .UnknownAvatarMessage unknownAvatarMessage = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *unknownavatarmessage_);
    }

    // optional .PlayerListMessage playerListMessage = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *playerlistmessage_);
    }

    // optional .GameListNewMessage gameListNewMessage = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gamelistnewmessage_);
    }

    // optional .GameListUpdateMessage gameListUpdateMessage = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gamelistupdatemessage_);
    }

    // optional .GameListPlayerJoinedMessage gameListPlayerJoinedMessage = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gamelistplayerjoinedmessage_);
    }

    // optional .GameListPlayerLeftMessage gameListPlayerLeftMessage = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gamelistplayerleftmessage_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .GameListAdminChangedMessage gameListAdminChangedMessage = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gamelistadminchangedmessage_);
    }

    // optional .PlayerInfoRequestMessage playerInfoRequestMessage = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *playerinforequestmessage_);
    }

    // optional .PlayerInfoReplyMessage playerInfoReplyMessage = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *playerinforeplymessage_);
    }

    // optional .SubscriptionRequestMessage subscriptionRequestMessage = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *subscriptionrequestmessage_);
    }

    // optional .JoinExistingGameMessage joinExistingGameMessage = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *joinexistinggamemessage_);
    }

    // optional .JoinNewGameMessage joinNewGameMessage = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *joinnewgamemessage_);
    }

    // optional .RejoinExistingGameMessage rejoinExistingGameMessage = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rejoinexistinggamemessage_);
    }

    // optional .JoinGameAckMessage joinGameAckMessage = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *joingameackmessage_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .JoinGameFailedMessage joinGameFailedMessage = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *joingamefailedmessage_);
    }

    // optional .GamePlayerJoinedMessage gamePlayerJoinedMessage = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gameplayerjoinedmessage_);
    }

    // optional .GamePlayerLeftMessage gamePlayerLeftMessage = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gameplayerleftmessage_);
    }

    // optional .GameAdminChangedMessage gameAdminChangedMessage = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gameadminchangedmessage_);
    }

    // optional .RemovedFromGameMessage removedFromGameMessage = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *removedfromgamemessage_);
    }

    // optional .KickPlayerRequestMessage kickPlayerRequestMessage = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *kickplayerrequestmessage_);
    }

    // optional .LeaveGameRequestMessage leaveGameRequestMessage = 32;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *leavegamerequestmessage_);
    }

    // optional .InvitePlayerToGameMessage invitePlayerToGameMessage = 33;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *inviteplayertogamemessage_);
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .InviteNotifyMessage inviteNotifyMessage = 34;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *invitenotifymessage_);
    }

    // optional .RejectGameInvitationMessage rejectGameInvitationMessage = 35;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rejectgameinvitationmessage_);
    }

    // optional .RejectInvNotifyMessage rejectInvNotifyMessage = 36;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rejectinvnotifymessage_);
    }

    // optional .StartEventMessage startEventMessage = 37;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *starteventmessage_);
    }

    // optional .StartEventAckMessage startEventAckMessage = 38;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *starteventackmessage_);
    }

    // optional .GameStartInitialMessage gameStartInitialMessage = 39;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gamestartinitialmessage_);
    }

    // optional .GameStartRejoinMessage gameStartRejoinMessage = 40;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gamestartrejoinmessage_);
    }

    // optional .HandStartMessage handStartMessage = 41;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *handstartmessage_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .PlayersTurnMessage playersTurnMessage = 42;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *playersturnmessage_);
    }

    // optional .MyActionRequestMessage myActionRequestMessage = 43;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *myactionrequestmessage_);
    }

    // optional .YourActionRejectedMessage yourActionRejectedMessage = 44;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *youractionrejectedmessage_);
    }

    // optional .PlayersActionDoneMessage playersActionDoneMessage = 45;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *playersactiondonemessage_);
    }

    // optional .DealFlopCardsMessage dealFlopCardsMessage = 46;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dealflopcardsmessage_);
    }

    // optional .DealTurnCardMessage dealTurnCardMessage = 47;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dealturncardmessage_);
    }

    // optional .DealRiverCardMessage dealRiverCardMessage = 48;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dealrivercardmessage_);
    }

    // optional .AllInShowCardsMessage allInShowCardsMessage = 49;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *allinshowcardsmessage_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .EndOfHandShowCardsMessage endOfHandShowCardsMessage = 50;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *endofhandshowcardsmessage_);
    }

    // optional .EndOfHandHideCardsMessage endOfHandHideCardsMessage = 51;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *endofhandhidecardsmessage_);
    }

    // optional .ShowMyCardsRequestMessage showMyCardsRequestMessage = 52;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *showmycardsrequestmessage_);
    }

    // optional .AfterHandShowCardsMessage afterHandShowCardsMessage = 53;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *afterhandshowcardsmessage_);
    }

    // optional .EndOfGameMessage endOfGameMessage = 54;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *endofgamemessage_);
    }

    // optional .PlayerIdChangedMessage playerIdChangedMessage = 55;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *playeridchangedmessage_);
    }

    // optional .AskKickPlayerMessage askKickPlayerMessage = 56;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *askkickplayermessage_);
    }

    // optional .AskKickDeniedMessage askKickDeniedMessage = 57;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *askkickdeniedmessage_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .StartKickPetitionMessage startKickPetitionMessage = 58;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *startkickpetitionmessage_);
    }

    // optional .VoteKickRequestMessage voteKickRequestMessage = 59;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *votekickrequestmessage_);
    }

    // optional .VoteKickReplyMessage voteKickReplyMessage = 60;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *votekickreplymessage_);
    }

    // optional .KickPetitionUpdateMessage kickPetitionUpdateMessage = 61;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *kickpetitionupdatemessage_);
    }

    // optional .EndKickPetitionMessage endKickPetitionMessage = 62;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *endkickpetitionmessage_);
    }

    // optional .StatisticsMessage statisticsMessage = 63;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *statisticsmessage_);
    }

    // optional .ChatRequestMessage chatRequestMessage = 64;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *chatrequestmessage_);
    }

    // optional .ChatMessage chatMessage = 65;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *chatmessage_);
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional .ChatRejectMessage chatRejectMessage = 66;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *chatrejectmessage_);
    }

    // optional .DialogMessage dialogMessage = 67;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dialogmessage_);
    }

    // optional .TimeoutWarningMessage timeoutWarningMessage = 68;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *timeoutwarningmessage_);
    }

    // optional .ResetTimeoutMessage resetTimeoutMessage = 69;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resettimeoutmessage_);
    }

    // optional .ReportAvatarMessage reportAvatarMessage = 70;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reportavatarmessage_);
    }

    // optional .ReportAvatarAckMessage reportAvatarAckMessage = 71;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reportavatarackmessage_);
    }

    // optional .ReportGameMessage reportGameMessage = 72;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reportgamemessage_);
    }

    // optional .ReportGameAckMessage reportGameAckMessage = 73;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *reportgameackmessage_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .ErrorMessage errorMessage = 74;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *errormessage_);
    }

    // optional .AdminRemoveGameMessage adminRemoveGameMessage = 75;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *adminremovegamemessage_);
    }

    // optional .AdminRemoveGameAckMessage adminRemoveGameAckMessage = 76;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *adminremovegameackmessage_);
    }

    // optional .AdminBanPlayerMessage adminBanPlayerMessage = 77;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *adminbanplayermessage_);
    }

    // optional .AdminBanPlayerAckMessage adminBanPlayerAckMessage = 78;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *adminbanplayerackmessage_);
    }

    // optional .GameListSpectatorJoinedMessage gameListSpectatorJoinedMessage = 79;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gamelistspectatorjoinedmessage_);
    }

    // optional .GameListSpectatorLeftMessage gameListSpectatorLeftMessage = 80;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gamelistspectatorleftmessage_);
    }

    // optional .GameSpectatorJoinedMessage gameSpectatorJoinedMessage = 81;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gamespectatorjoinedmessage_);
    }

  }
  // optional .GameSpectatorLeftMessage gameSpectatorLeftMessage = 82;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gamespectatorleftmessage_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PokerTHMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PokerTHMessage*>(&from));
}

void PokerTHMessage::MergeFrom(const PokerTHMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PokerTHMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_announcemessage()->::AnnounceMessage::MergeFrom(from.announcemessage());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_initmessage()->::InitMessage::MergeFrom(from.initmessage());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_authserverchallengemessage()->::AuthServerChallengeMessage::MergeFrom(from.authserverchallengemessage());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_authclientresponsemessage()->::AuthClientResponseMessage::MergeFrom(from.authclientresponsemessage());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_authserververificationmessage()->::AuthServerVerificationMessage::MergeFrom(from.authserververificationmessage());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_initackmessage()->::InitAckMessage::MergeFrom(from.initackmessage());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_avatarrequestmessage()->::AvatarRequestMessage::MergeFrom(from.avatarrequestmessage());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_avatarheadermessage()->::AvatarHeaderMessage::MergeFrom(from.avatarheadermessage());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_avatardatamessage()->::AvatarDataMessage::MergeFrom(from.avatardatamessage());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_avatarendmessage()->::AvatarEndMessage::MergeFrom(from.avatarendmessage());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_unknownavatarmessage()->::UnknownAvatarMessage::MergeFrom(from.unknownavatarmessage());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_playerlistmessage()->::PlayerListMessage::MergeFrom(from.playerlistmessage());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_gamelistnewmessage()->::GameListNewMessage::MergeFrom(from.gamelistnewmessage());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_gamelistupdatemessage()->::GameListUpdateMessage::MergeFrom(from.gamelistupdatemessage());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_gamelistplayerjoinedmessage()->::GameListPlayerJoinedMessage::MergeFrom(from.gamelistplayerjoinedmessage());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_gamelistplayerleftmessage()->::GameListPlayerLeftMessage::MergeFrom(from.gamelistplayerleftmessage());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_gamelistadminchangedmessage()->::GameListAdminChangedMessage::MergeFrom(from.gamelistadminchangedmessage());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_playerinforequestmessage()->::PlayerInfoRequestMessage::MergeFrom(from.playerinforequestmessage());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_playerinforeplymessage()->::PlayerInfoReplyMessage::MergeFrom(from.playerinforeplymessage());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_subscriptionrequestmessage()->::SubscriptionRequestMessage::MergeFrom(from.subscriptionrequestmessage());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_joinexistinggamemessage()->::JoinExistingGameMessage::MergeFrom(from.joinexistinggamemessage());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_joinnewgamemessage()->::JoinNewGameMessage::MergeFrom(from.joinnewgamemessage());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_rejoinexistinggamemessage()->::RejoinExistingGameMessage::MergeFrom(from.rejoinexistinggamemessage());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_joingameackmessage()->::JoinGameAckMessage::MergeFrom(from.joingameackmessage());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_joingamefailedmessage()->::JoinGameFailedMessage::MergeFrom(from.joingamefailedmessage());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_gameplayerjoinedmessage()->::GamePlayerJoinedMessage::MergeFrom(from.gameplayerjoinedmessage());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_gameplayerleftmessage()->::GamePlayerLeftMessage::MergeFrom(from.gameplayerleftmessage());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_gameadminchangedmessage()->::GameAdminChangedMessage::MergeFrom(from.gameadminchangedmessage());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_removedfromgamemessage()->::RemovedFromGameMessage::MergeFrom(from.removedfromgamemessage());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_kickplayerrequestmessage()->::KickPlayerRequestMessage::MergeFrom(from.kickplayerrequestmessage());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_leavegamerequestmessage()->::LeaveGameRequestMessage::MergeFrom(from.leavegamerequestmessage());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_inviteplayertogamemessage()->::InvitePlayerToGameMessage::MergeFrom(from.inviteplayertogamemessage());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_invitenotifymessage()->::InviteNotifyMessage::MergeFrom(from.invitenotifymessage());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_rejectgameinvitationmessage()->::RejectGameInvitationMessage::MergeFrom(from.rejectgameinvitationmessage());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_rejectinvnotifymessage()->::RejectInvNotifyMessage::MergeFrom(from.rejectinvnotifymessage());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_starteventmessage()->::StartEventMessage::MergeFrom(from.starteventmessage());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_starteventackmessage()->::StartEventAckMessage::MergeFrom(from.starteventackmessage());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_gamestartinitialmessage()->::GameStartInitialMessage::MergeFrom(from.gamestartinitialmessage());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_gamestartrejoinmessage()->::GameStartRejoinMessage::MergeFrom(from.gamestartrejoinmessage());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_handstartmessage()->::HandStartMessage::MergeFrom(from.handstartmessage());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_playersturnmessage()->::PlayersTurnMessage::MergeFrom(from.playersturnmessage());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_myactionrequestmessage()->::MyActionRequestMessage::MergeFrom(from.myactionrequestmessage());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_youractionrejectedmessage()->::YourActionRejectedMessage::MergeFrom(from.youractionrejectedmessage());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_playersactiondonemessage()->::PlayersActionDoneMessage::MergeFrom(from.playersactiondonemessage());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_dealflopcardsmessage()->::DealFlopCardsMessage::MergeFrom(from.dealflopcardsmessage());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_dealturncardmessage()->::DealTurnCardMessage::MergeFrom(from.dealturncardmessage());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_dealrivercardmessage()->::DealRiverCardMessage::MergeFrom(from.dealrivercardmessage());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_allinshowcardsmessage()->::AllInShowCardsMessage::MergeFrom(from.allinshowcardsmessage());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_endofhandshowcardsmessage()->::EndOfHandShowCardsMessage::MergeFrom(from.endofhandshowcardsmessage());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_endofhandhidecardsmessage()->::EndOfHandHideCardsMessage::MergeFrom(from.endofhandhidecardsmessage());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_showmycardsrequestmessage()->::ShowMyCardsRequestMessage::MergeFrom(from.showmycardsrequestmessage());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_afterhandshowcardsmessage()->::AfterHandShowCardsMessage::MergeFrom(from.afterhandshowcardsmessage());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_endofgamemessage()->::EndOfGameMessage::MergeFrom(from.endofgamemessage());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_playeridchangedmessage()->::PlayerIdChangedMessage::MergeFrom(from.playeridchangedmessage());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_askkickplayermessage()->::AskKickPlayerMessage::MergeFrom(from.askkickplayermessage());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_askkickdeniedmessage()->::AskKickDeniedMessage::MergeFrom(from.askkickdeniedmessage());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_startkickpetitionmessage()->::StartKickPetitionMessage::MergeFrom(from.startkickpetitionmessage());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_votekickrequestmessage()->::VoteKickRequestMessage::MergeFrom(from.votekickrequestmessage());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_votekickreplymessage()->::VoteKickReplyMessage::MergeFrom(from.votekickreplymessage());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_kickpetitionupdatemessage()->::KickPetitionUpdateMessage::MergeFrom(from.kickpetitionupdatemessage());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_endkickpetitionmessage()->::EndKickPetitionMessage::MergeFrom(from.endkickpetitionmessage());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_statisticsmessage()->::StatisticsMessage::MergeFrom(from.statisticsmessage());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_chatrequestmessage()->::ChatRequestMessage::MergeFrom(from.chatrequestmessage());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_chatmessage()->::ChatMessage::MergeFrom(from.chatmessage());
    }
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_chatrejectmessage()->::ChatRejectMessage::MergeFrom(from.chatrejectmessage());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dialogmessage()->::DialogMessage::MergeFrom(from.dialogmessage());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_timeoutwarningmessage()->::TimeoutWarningMessage::MergeFrom(from.timeoutwarningmessage());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_resettimeoutmessage()->::ResetTimeoutMessage::MergeFrom(from.resettimeoutmessage());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_reportavatarmessage()->::ReportAvatarMessage::MergeFrom(from.reportavatarmessage());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_reportavatarackmessage()->::ReportAvatarAckMessage::MergeFrom(from.reportavatarackmessage());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_reportgamemessage()->::ReportGameMessage::MergeFrom(from.reportgamemessage());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_reportgameackmessage()->::ReportGameAckMessage::MergeFrom(from.reportgameackmessage());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_errormessage()->::ErrorMessage::MergeFrom(from.errormessage());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_adminremovegamemessage()->::AdminRemoveGameMessage::MergeFrom(from.adminremovegamemessage());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_adminremovegameackmessage()->::AdminRemoveGameAckMessage::MergeFrom(from.adminremovegameackmessage());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_adminbanplayermessage()->::AdminBanPlayerMessage::MergeFrom(from.adminbanplayermessage());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_adminbanplayerackmessage()->::AdminBanPlayerAckMessage::MergeFrom(from.adminbanplayerackmessage());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_gamelistspectatorjoinedmessage()->::GameListSpectatorJoinedMessage::MergeFrom(from.gamelistspectatorjoinedmessage());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_gamelistspectatorleftmessage()->::GameListSpectatorLeftMessage::MergeFrom(from.gamelistspectatorleftmessage());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_gamespectatorjoinedmessage()->::GameSpectatorJoinedMessage::MergeFrom(from.gamespectatorjoinedmessage());
    }
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_gamespectatorleftmessage()->::GameSpectatorLeftMessage::MergeFrom(from.gamespectatorleftmessage());
    }
    if (cached_has_bits & 0x00020000u) {
      messagetype_ = from.messagetype_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void PokerTHMessage::CopyFrom(const PokerTHMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PokerTHMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PokerTHMessage::IsInitialized() const {
  if ((_has_bits_[2] & 0x00020000) != 0x00020000) return false;
  if (has_announcemessage()) {
    if (!this->announcemessage_->IsInitialized()) return false;
  }
  if (has_initmessage()) {
    if (!this->initmessage_->IsInitialized()) return false;
  }
  if (has_authserverchallengemessage()) {
    if (!this->authserverchallengemessage_->IsInitialized()) return false;
  }
  if (has_authclientresponsemessage()) {
    if (!this->authclientresponsemessage_->IsInitialized()) return false;
  }
  if (has_authserververificationmessage()) {
    if (!this->authserververificationmessage_->IsInitialized()) return false;
  }
  if (has_initackmessage()) {
    if (!this->initackmessage_->IsInitialized()) return false;
  }
  if (has_avatarrequestmessage()) {
    if (!this->avatarrequestmessage_->IsInitialized()) return false;
  }
  if (has_avatarheadermessage()) {
    if (!this->avatarheadermessage_->IsInitialized()) return false;
  }
  if (has_avatardatamessage()) {
    if (!this->avatardatamessage_->IsInitialized()) return false;
  }
  if (has_avatarendmessage()) {
    if (!this->avatarendmessage_->IsInitialized()) return false;
  }
  if (has_unknownavatarmessage()) {
    if (!this->unknownavatarmessage_->IsInitialized()) return false;
  }
  if (has_playerlistmessage()) {
    if (!this->playerlistmessage_->IsInitialized()) return false;
  }
  if (has_gamelistnewmessage()) {
    if (!this->gamelistnewmessage_->IsInitialized()) return false;
  }
  if (has_gamelistupdatemessage()) {
    if (!this->gamelistupdatemessage_->IsInitialized()) return false;
  }
  if (has_gamelistplayerjoinedmessage()) {
    if (!this->gamelistplayerjoinedmessage_->IsInitialized()) return false;
  }
  if (has_gamelistplayerleftmessage()) {
    if (!this->gamelistplayerleftmessage_->IsInitialized()) return false;
  }
  if (has_gamelistadminchangedmessage()) {
    if (!this->gamelistadminchangedmessage_->IsInitialized()) return false;
  }
  if (has_playerinforeplymessage()) {
    if (!this->playerinforeplymessage_->IsInitialized()) return false;
  }
  if (has_subscriptionrequestmessage()) {
    if (!this->subscriptionrequestmessage_->IsInitialized()) return false;
  }
  if (has_joinexistinggamemessage()) {
    if (!this->joinexistinggamemessage_->IsInitialized()) return false;
  }
  if (has_joinnewgamemessage()) {
    if (!this->joinnewgamemessage_->IsInitialized()) return false;
  }
  if (has_rejoinexistinggamemessage()) {
    if (!this->rejoinexistinggamemessage_->IsInitialized()) return false;
  }
  if (has_joingameackmessage()) {
    if (!this->joingameackmessage_->IsInitialized()) return false;
  }
  if (has_joingamefailedmessage()) {
    if (!this->joingamefailedmessage_->IsInitialized()) return false;
  }
  if (has_gameplayerjoinedmessage()) {
    if (!this->gameplayerjoinedmessage_->IsInitialized()) return false;
  }
  if (has_gameplayerleftmessage()) {
    if (!this->gameplayerleftmessage_->IsInitialized()) return false;
  }
  if (has_gameadminchangedmessage()) {
    if (!this->gameadminchangedmessage_->IsInitialized()) return false;
  }
  if (has_removedfromgamemessage()) {
    if (!this->removedfromgamemessage_->IsInitialized()) return false;
  }
  if (has_kickplayerrequestmessage()) {
    if (!this->kickplayerrequestmessage_->IsInitialized()) return false;
  }
  if (has_leavegamerequestmessage()) {
    if (!this->leavegamerequestmessage_->IsInitialized()) return false;
  }
  if (has_inviteplayertogamemessage()) {
    if (!this->inviteplayertogamemessage_->IsInitialized()) return false;
  }
  if (has_invitenotifymessage()) {
    if (!this->invitenotifymessage_->IsInitialized()) return false;
  }
  if (has_rejectgameinvitationmessage()) {
    if (!this->rejectgameinvitationmessage_->IsInitialized()) return false;
  }
  if (has_rejectinvnotifymessage()) {
    if (!this->rejectinvnotifymessage_->IsInitialized()) return false;
  }
  if (has_starteventmessage()) {
    if (!this->starteventmessage_->IsInitialized()) return false;
  }
  if (has_starteventackmessage()) {
    if (!this->starteventackmessage_->IsInitialized()) return false;
  }
  if (has_gamestartinitialmessage()) {
    if (!this->gamestartinitialmessage_->IsInitialized()) return false;
  }
  if (has_gamestartrejoinmessage()) {
    if (!this->gamestartrejoinmessage_->IsInitialized()) return false;
  }
  if (has_handstartmessage()) {
    if (!this->handstartmessage_->IsInitialized()) return false;
  }
  if (has_playersturnmessage()) {
    if (!this->playersturnmessage_->IsInitialized()) return false;
  }
  if (has_myactionrequestmessage()) {
    if (!this->myactionrequestmessage_->IsInitialized()) return false;
  }
  if (has_youractionrejectedmessage()) {
    if (!this->youractionrejectedmessage_->IsInitialized()) return false;
  }
  if (has_playersactiondonemessage()) {
    if (!this->playersactiondonemessage_->IsInitialized()) return false;
  }
  if (has_dealflopcardsmessage()) {
    if (!this->dealflopcardsmessage_->IsInitialized()) return false;
  }
  if (has_dealturncardmessage()) {
    if (!this->dealturncardmessage_->IsInitialized()) return false;
  }
  if (has_dealrivercardmessage()) {
    if (!this->dealrivercardmessage_->IsInitialized()) return false;
  }
  if (has_allinshowcardsmessage()) {
    if (!this->allinshowcardsmessage_->IsInitialized()) return false;
  }
  if (has_endofhandshowcardsmessage()) {
    if (!this->endofhandshowcardsmessage_->IsInitialized()) return false;
  }
  if (has_endofhandhidecardsmessage()) {
    if (!this->endofhandhidecardsmessage_->IsInitialized()) return false;
  }
  if (has_afterhandshowcardsmessage()) {
    if (!this->afterhandshowcardsmessage_->IsInitialized()) return false;
  }
  if (has_endofgamemessage()) {
    if (!this->endofgamemessage_->IsInitialized()) return false;
  }
  if (has_playeridchangedmessage()) {
    if (!this->playeridchangedmessage_->IsInitialized()) return false;
  }
  if (has_askkickplayermessage()) {
    if (!this->askkickplayermessage_->IsInitialized()) return false;
  }
  if (has_askkickdeniedmessage()) {
    if (!this->askkickdeniedmessage_->IsInitialized()) return false;
  }
  if (has_startkickpetitionmessage()) {
    if (!this->startkickpetitionmessage_->IsInitialized()) return false;
  }
  if (has_votekickrequestmessage()) {
    if (!this->votekickrequestmessage_->IsInitialized()) return false;
  }
  if (has_votekickreplymessage()) {
    if (!this->votekickreplymessage_->IsInitialized()) return false;
  }
  if (has_kickpetitionupdatemessage()) {
    if (!this->kickpetitionupdatemessage_->IsInitialized()) return false;
  }
  if (has_endkickpetitionmessage()) {
    if (!this->endkickpetitionmessage_->IsInitialized()) return false;
  }
  if (has_statisticsmessage()) {
    if (!this->statisticsmessage_->IsInitialized()) return false;
  }
  if (has_chatrequestmessage()) {
    if (!this->chatrequestmessage_->IsInitialized()) return false;
  }
  if (has_chatmessage()) {
    if (!this->chatmessage_->IsInitialized()) return false;
  }
  if (has_chatrejectmessage()) {
    if (!this->chatrejectmessage_->IsInitialized()) return false;
  }
  if (has_dialogmessage()) {
    if (!this->dialogmessage_->IsInitialized()) return false;
  }
  if (has_timeoutwarningmessage()) {
    if (!this->timeoutwarningmessage_->IsInitialized()) return false;
  }
  if (has_reportavatarmessage()) {
    if (!this->reportavatarmessage_->IsInitialized()) return false;
  }
  if (has_reportavatarackmessage()) {
    if (!this->reportavatarackmessage_->IsInitialized()) return false;
  }
  if (has_reportgamemessage()) {
    if (!this->reportgamemessage_->IsInitialized()) return false;
  }
  if (has_reportgameackmessage()) {
    if (!this->reportgameackmessage_->IsInitialized()) return false;
  }
  if (has_errormessage()) {
    if (!this->errormessage_->IsInitialized()) return false;
  }
  if (has_adminremovegamemessage()) {
    if (!this->adminremovegamemessage_->IsInitialized()) return false;
  }
  if (has_adminremovegameackmessage()) {
    if (!this->adminremovegameackmessage_->IsInitialized()) return false;
  }
  if (has_adminbanplayermessage()) {
    if (!this->adminbanplayermessage_->IsInitialized()) return false;
  }
  if (has_adminbanplayerackmessage()) {
    if (!this->adminbanplayerackmessage_->IsInitialized()) return false;
  }
  if (has_gamelistspectatorjoinedmessage()) {
    if (!this->gamelistspectatorjoinedmessage_->IsInitialized()) return false;
  }
  if (has_gamelistspectatorleftmessage()) {
    if (!this->gamelistspectatorleftmessage_->IsInitialized()) return false;
  }
  if (has_gamespectatorjoinedmessage()) {
    if (!this->gamespectatorjoinedmessage_->IsInitialized()) return false;
  }
  if (has_gamespectatorleftmessage()) {
    if (!this->gamespectatorleftmessage_->IsInitialized()) return false;
  }
  return true;
}

void PokerTHMessage::Swap(PokerTHMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PokerTHMessage::InternalSwap(PokerTHMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  swap(announcemessage_, other->announcemessage_);
  swap(initmessage_, other->initmessage_);
  swap(authserverchallengemessage_, other->authserverchallengemessage_);
  swap(authclientresponsemessage_, other->authclientresponsemessage_);
  swap(authserververificationmessage_, other->authserververificationmessage_);
  swap(initackmessage_, other->initackmessage_);
  swap(avatarrequestmessage_, other->avatarrequestmessage_);
  swap(avatarheadermessage_, other->avatarheadermessage_);
  swap(avatardatamessage_, other->avatardatamessage_);
  swap(avatarendmessage_, other->avatarendmessage_);
  swap(unknownavatarmessage_, other->unknownavatarmessage_);
  swap(playerlistmessage_, other->playerlistmessage_);
  swap(gamelistnewmessage_, other->gamelistnewmessage_);
  swap(gamelistupdatemessage_, other->gamelistupdatemessage_);
  swap(gamelistplayerjoinedmessage_, other->gamelistplayerjoinedmessage_);
  swap(gamelistplayerleftmessage_, other->gamelistplayerleftmessage_);
  swap(gamelistadminchangedmessage_, other->gamelistadminchangedmessage_);
  swap(playerinforequestmessage_, other->playerinforequestmessage_);
  swap(playerinforeplymessage_, other->playerinforeplymessage_);
  swap(subscriptionrequestmessage_, other->subscriptionrequestmessage_);
  swap(joinexistinggamemessage_, other->joinexistinggamemessage_);
  swap(joinnewgamemessage_, other->joinnewgamemessage_);
  swap(rejoinexistinggamemessage_, other->rejoinexistinggamemessage_);
  swap(joingameackmessage_, other->joingameackmessage_);
  swap(joingamefailedmessage_, other->joingamefailedmessage_);
  swap(gameplayerjoinedmessage_, other->gameplayerjoinedmessage_);
  swap(gameplayerleftmessage_, other->gameplayerleftmessage_);
  swap(gameadminchangedmessage_, other->gameadminchangedmessage_);
  swap(removedfromgamemessage_, other->removedfromgamemessage_);
  swap(kickplayerrequestmessage_, other->kickplayerrequestmessage_);
  swap(leavegamerequestmessage_, other->leavegamerequestmessage_);
  swap(inviteplayertogamemessage_, other->inviteplayertogamemessage_);
  swap(invitenotifymessage_, other->invitenotifymessage_);
  swap(rejectgameinvitationmessage_, other->rejectgameinvitationmessage_);
  swap(rejectinvnotifymessage_, other->rejectinvnotifymessage_);
  swap(starteventmessage_, other->starteventmessage_);
  swap(starteventackmessage_, other->starteventackmessage_);
  swap(gamestartinitialmessage_, other->gamestartinitialmessage_);
  swap(gamestartrejoinmessage_, other->gamestartrejoinmessage_);
  swap(handstartmessage_, other->handstartmessage_);
  swap(playersturnmessage_, other->playersturnmessage_);
  swap(myactionrequestmessage_, other->myactionrequestmessage_);
  swap(youractionrejectedmessage_, other->youractionrejectedmessage_);
  swap(playersactiondonemessage_, other->playersactiondonemessage_);
  swap(dealflopcardsmessage_, other->dealflopcardsmessage_);
  swap(dealturncardmessage_, other->dealturncardmessage_);
  swap(dealrivercardmessage_, other->dealrivercardmessage_);
  swap(allinshowcardsmessage_, other->allinshowcardsmessage_);
  swap(endofhandshowcardsmessage_, other->endofhandshowcardsmessage_);
  swap(endofhandhidecardsmessage_, other->endofhandhidecardsmessage_);
  swap(showmycardsrequestmessage_, other->showmycardsrequestmessage_);
  swap(afterhandshowcardsmessage_, other->afterhandshowcardsmessage_);
  swap(endofgamemessage_, other->endofgamemessage_);
  swap(playeridchangedmessage_, other->playeridchangedmessage_);
  swap(askkickplayermessage_, other->askkickplayermessage_);
  swap(askkickdeniedmessage_, other->askkickdeniedmessage_);
  swap(startkickpetitionmessage_, other->startkickpetitionmessage_);
  swap(votekickrequestmessage_, other->votekickrequestmessage_);
  swap(votekickreplymessage_, other->votekickreplymessage_);
  swap(kickpetitionupdatemessage_, other->kickpetitionupdatemessage_);
  swap(endkickpetitionmessage_, other->endkickpetitionmessage_);
  swap(statisticsmessage_, other->statisticsmessage_);
  swap(chatrequestmessage_, other->chatrequestmessage_);
  swap(chatmessage_, other->chatmessage_);
  swap(chatrejectmessage_, other->chatrejectmessage_);
  swap(dialogmessage_, other->dialogmessage_);
  swap(timeoutwarningmessage_, other->timeoutwarningmessage_);
  swap(resettimeoutmessage_, other->resettimeoutmessage_);
  swap(reportavatarmessage_, other->reportavatarmessage_);
  swap(reportavatarackmessage_, other->reportavatarackmessage_);
  swap(reportgamemessage_, other->reportgamemessage_);
  swap(reportgameackmessage_, other->reportgameackmessage_);
  swap(errormessage_, other->errormessage_);
  swap(adminremovegamemessage_, other->adminremovegamemessage_);
  swap(adminremovegameackmessage_, other->adminremovegameackmessage_);
  swap(adminbanplayermessage_, other->adminbanplayermessage_);
  swap(adminbanplayerackmessage_, other->adminbanplayerackmessage_);
  swap(gamelistspectatorjoinedmessage_, other->gamelistspectatorjoinedmessage_);
  swap(gamelistspectatorleftmessage_, other->gamelistspectatorleftmessage_);
  swap(gamespectatorjoinedmessage_, other->gamespectatorjoinedmessage_);
  swap(gamespectatorleftmessage_, other->gamespectatorleftmessage_);
  swap(messagetype_, other->messagetype_);
}

::std::string PokerTHMessage::GetTypeName() const {
  return "PokerTHMessage";
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::NetGameInfo* Arena::CreateMaybeMessage< ::NetGameInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NetGameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerResult* Arena::CreateMaybeMessage< ::PlayerResult >(Arena* arena) {
  return Arena::CreateInternal< ::PlayerResult >(arena);
}
template<> PROTOBUF_NOINLINE ::AnnounceMessage_Version* Arena::CreateMaybeMessage< ::AnnounceMessage_Version >(Arena* arena) {
  return Arena::CreateInternal< ::AnnounceMessage_Version >(arena);
}
template<> PROTOBUF_NOINLINE ::AnnounceMessage* Arena::CreateMaybeMessage< ::AnnounceMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AnnounceMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::InitMessage* Arena::CreateMaybeMessage< ::InitMessage >(Arena* arena) {
  return Arena::CreateInternal< ::InitMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AuthServerChallengeMessage* Arena::CreateMaybeMessage< ::AuthServerChallengeMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AuthServerChallengeMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AuthClientResponseMessage* Arena::CreateMaybeMessage< ::AuthClientResponseMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AuthClientResponseMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AuthServerVerificationMessage* Arena::CreateMaybeMessage< ::AuthServerVerificationMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AuthServerVerificationMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::InitAckMessage* Arena::CreateMaybeMessage< ::InitAckMessage >(Arena* arena) {
  return Arena::CreateInternal< ::InitAckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AvatarRequestMessage* Arena::CreateMaybeMessage< ::AvatarRequestMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AvatarRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AvatarHeaderMessage* Arena::CreateMaybeMessage< ::AvatarHeaderMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AvatarHeaderMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AvatarDataMessage* Arena::CreateMaybeMessage< ::AvatarDataMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AvatarDataMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AvatarEndMessage* Arena::CreateMaybeMessage< ::AvatarEndMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AvatarEndMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::UnknownAvatarMessage* Arena::CreateMaybeMessage< ::UnknownAvatarMessage >(Arena* arena) {
  return Arena::CreateInternal< ::UnknownAvatarMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerListMessage* Arena::CreateMaybeMessage< ::PlayerListMessage >(Arena* arena) {
  return Arena::CreateInternal< ::PlayerListMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameListNewMessage* Arena::CreateMaybeMessage< ::GameListNewMessage >(Arena* arena) {
  return Arena::CreateInternal< ::GameListNewMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameListUpdateMessage* Arena::CreateMaybeMessage< ::GameListUpdateMessage >(Arena* arena) {
  return Arena::CreateInternal< ::GameListUpdateMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameListPlayerJoinedMessage* Arena::CreateMaybeMessage< ::GameListPlayerJoinedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::GameListPlayerJoinedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameListPlayerLeftMessage* Arena::CreateMaybeMessage< ::GameListPlayerLeftMessage >(Arena* arena) {
  return Arena::CreateInternal< ::GameListPlayerLeftMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameListSpectatorJoinedMessage* Arena::CreateMaybeMessage< ::GameListSpectatorJoinedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::GameListSpectatorJoinedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameListSpectatorLeftMessage* Arena::CreateMaybeMessage< ::GameListSpectatorLeftMessage >(Arena* arena) {
  return Arena::CreateInternal< ::GameListSpectatorLeftMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameListAdminChangedMessage* Arena::CreateMaybeMessage< ::GameListAdminChangedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::GameListAdminChangedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerInfoRequestMessage* Arena::CreateMaybeMessage< ::PlayerInfoRequestMessage >(Arena* arena) {
  return Arena::CreateInternal< ::PlayerInfoRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData* Arena::CreateMaybeMessage< ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData >(Arena* arena) {
  return Arena::CreateInternal< ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerInfoReplyMessage_PlayerInfoData* Arena::CreateMaybeMessage< ::PlayerInfoReplyMessage_PlayerInfoData >(Arena* arena) {
  return Arena::CreateInternal< ::PlayerInfoReplyMessage_PlayerInfoData >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerInfoReplyMessage* Arena::CreateMaybeMessage< ::PlayerInfoReplyMessage >(Arena* arena) {
  return Arena::CreateInternal< ::PlayerInfoReplyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::SubscriptionRequestMessage* Arena::CreateMaybeMessage< ::SubscriptionRequestMessage >(Arena* arena) {
  return Arena::CreateInternal< ::SubscriptionRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::JoinExistingGameMessage* Arena::CreateMaybeMessage< ::JoinExistingGameMessage >(Arena* arena) {
  return Arena::CreateInternal< ::JoinExistingGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::JoinNewGameMessage* Arena::CreateMaybeMessage< ::JoinNewGameMessage >(Arena* arena) {
  return Arena::CreateInternal< ::JoinNewGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::RejoinExistingGameMessage* Arena::CreateMaybeMessage< ::RejoinExistingGameMessage >(Arena* arena) {
  return Arena::CreateInternal< ::RejoinExistingGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::JoinGameAckMessage* Arena::CreateMaybeMessage< ::JoinGameAckMessage >(Arena* arena) {
  return Arena::CreateInternal< ::JoinGameAckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::JoinGameFailedMessage* Arena::CreateMaybeMessage< ::JoinGameFailedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::JoinGameFailedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GamePlayerJoinedMessage* Arena::CreateMaybeMessage< ::GamePlayerJoinedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::GamePlayerJoinedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GamePlayerLeftMessage* Arena::CreateMaybeMessage< ::GamePlayerLeftMessage >(Arena* arena) {
  return Arena::CreateInternal< ::GamePlayerLeftMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameSpectatorJoinedMessage* Arena::CreateMaybeMessage< ::GameSpectatorJoinedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::GameSpectatorJoinedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameSpectatorLeftMessage* Arena::CreateMaybeMessage< ::GameSpectatorLeftMessage >(Arena* arena) {
  return Arena::CreateInternal< ::GameSpectatorLeftMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameAdminChangedMessage* Arena::CreateMaybeMessage< ::GameAdminChangedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::GameAdminChangedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::RemovedFromGameMessage* Arena::CreateMaybeMessage< ::RemovedFromGameMessage >(Arena* arena) {
  return Arena::CreateInternal< ::RemovedFromGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::KickPlayerRequestMessage* Arena::CreateMaybeMessage< ::KickPlayerRequestMessage >(Arena* arena) {
  return Arena::CreateInternal< ::KickPlayerRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::LeaveGameRequestMessage* Arena::CreateMaybeMessage< ::LeaveGameRequestMessage >(Arena* arena) {
  return Arena::CreateInternal< ::LeaveGameRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::InvitePlayerToGameMessage* Arena::CreateMaybeMessage< ::InvitePlayerToGameMessage >(Arena* arena) {
  return Arena::CreateInternal< ::InvitePlayerToGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::InviteNotifyMessage* Arena::CreateMaybeMessage< ::InviteNotifyMessage >(Arena* arena) {
  return Arena::CreateInternal< ::InviteNotifyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::RejectGameInvitationMessage* Arena::CreateMaybeMessage< ::RejectGameInvitationMessage >(Arena* arena) {
  return Arena::CreateInternal< ::RejectGameInvitationMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::RejectInvNotifyMessage* Arena::CreateMaybeMessage< ::RejectInvNotifyMessage >(Arena* arena) {
  return Arena::CreateInternal< ::RejectInvNotifyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::StartEventMessage* Arena::CreateMaybeMessage< ::StartEventMessage >(Arena* arena) {
  return Arena::CreateInternal< ::StartEventMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::StartEventAckMessage* Arena::CreateMaybeMessage< ::StartEventAckMessage >(Arena* arena) {
  return Arena::CreateInternal< ::StartEventAckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameStartInitialMessage* Arena::CreateMaybeMessage< ::GameStartInitialMessage >(Arena* arena) {
  return Arena::CreateInternal< ::GameStartInitialMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameStartRejoinMessage_RejoinPlayerData* Arena::CreateMaybeMessage< ::GameStartRejoinMessage_RejoinPlayerData >(Arena* arena) {
  return Arena::CreateInternal< ::GameStartRejoinMessage_RejoinPlayerData >(arena);
}
template<> PROTOBUF_NOINLINE ::GameStartRejoinMessage* Arena::CreateMaybeMessage< ::GameStartRejoinMessage >(Arena* arena) {
  return Arena::CreateInternal< ::GameStartRejoinMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::HandStartMessage_PlainCards* Arena::CreateMaybeMessage< ::HandStartMessage_PlainCards >(Arena* arena) {
  return Arena::CreateInternal< ::HandStartMessage_PlainCards >(arena);
}
template<> PROTOBUF_NOINLINE ::HandStartMessage* Arena::CreateMaybeMessage< ::HandStartMessage >(Arena* arena) {
  return Arena::CreateInternal< ::HandStartMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayersTurnMessage* Arena::CreateMaybeMessage< ::PlayersTurnMessage >(Arena* arena) {
  return Arena::CreateInternal< ::PlayersTurnMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::MyActionRequestMessage* Arena::CreateMaybeMessage< ::MyActionRequestMessage >(Arena* arena) {
  return Arena::CreateInternal< ::MyActionRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::YourActionRejectedMessage* Arena::CreateMaybeMessage< ::YourActionRejectedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::YourActionRejectedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayersActionDoneMessage* Arena::CreateMaybeMessage< ::PlayersActionDoneMessage >(Arena* arena) {
  return Arena::CreateInternal< ::PlayersActionDoneMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::DealFlopCardsMessage* Arena::CreateMaybeMessage< ::DealFlopCardsMessage >(Arena* arena) {
  return Arena::CreateInternal< ::DealFlopCardsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::DealTurnCardMessage* Arena::CreateMaybeMessage< ::DealTurnCardMessage >(Arena* arena) {
  return Arena::CreateInternal< ::DealTurnCardMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::DealRiverCardMessage* Arena::CreateMaybeMessage< ::DealRiverCardMessage >(Arena* arena) {
  return Arena::CreateInternal< ::DealRiverCardMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AllInShowCardsMessage_PlayerAllIn* Arena::CreateMaybeMessage< ::AllInShowCardsMessage_PlayerAllIn >(Arena* arena) {
  return Arena::CreateInternal< ::AllInShowCardsMessage_PlayerAllIn >(arena);
}
template<> PROTOBUF_NOINLINE ::AllInShowCardsMessage* Arena::CreateMaybeMessage< ::AllInShowCardsMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AllInShowCardsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::EndOfHandShowCardsMessage* Arena::CreateMaybeMessage< ::EndOfHandShowCardsMessage >(Arena* arena) {
  return Arena::CreateInternal< ::EndOfHandShowCardsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::EndOfHandHideCardsMessage* Arena::CreateMaybeMessage< ::EndOfHandHideCardsMessage >(Arena* arena) {
  return Arena::CreateInternal< ::EndOfHandHideCardsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ShowMyCardsRequestMessage* Arena::CreateMaybeMessage< ::ShowMyCardsRequestMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ShowMyCardsRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AfterHandShowCardsMessage* Arena::CreateMaybeMessage< ::AfterHandShowCardsMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AfterHandShowCardsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::EndOfGameMessage* Arena::CreateMaybeMessage< ::EndOfGameMessage >(Arena* arena) {
  return Arena::CreateInternal< ::EndOfGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerIdChangedMessage* Arena::CreateMaybeMessage< ::PlayerIdChangedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::PlayerIdChangedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AskKickPlayerMessage* Arena::CreateMaybeMessage< ::AskKickPlayerMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AskKickPlayerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AskKickDeniedMessage* Arena::CreateMaybeMessage< ::AskKickDeniedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AskKickDeniedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::StartKickPetitionMessage* Arena::CreateMaybeMessage< ::StartKickPetitionMessage >(Arena* arena) {
  return Arena::CreateInternal< ::StartKickPetitionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::VoteKickRequestMessage* Arena::CreateMaybeMessage< ::VoteKickRequestMessage >(Arena* arena) {
  return Arena::CreateInternal< ::VoteKickRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::VoteKickReplyMessage* Arena::CreateMaybeMessage< ::VoteKickReplyMessage >(Arena* arena) {
  return Arena::CreateInternal< ::VoteKickReplyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::KickPetitionUpdateMessage* Arena::CreateMaybeMessage< ::KickPetitionUpdateMessage >(Arena* arena) {
  return Arena::CreateInternal< ::KickPetitionUpdateMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::EndKickPetitionMessage* Arena::CreateMaybeMessage< ::EndKickPetitionMessage >(Arena* arena) {
  return Arena::CreateInternal< ::EndKickPetitionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::StatisticsMessage_StatisticsData* Arena::CreateMaybeMessage< ::StatisticsMessage_StatisticsData >(Arena* arena) {
  return Arena::CreateInternal< ::StatisticsMessage_StatisticsData >(arena);
}
template<> PROTOBUF_NOINLINE ::StatisticsMessage* Arena::CreateMaybeMessage< ::StatisticsMessage >(Arena* arena) {
  return Arena::CreateInternal< ::StatisticsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatRequestMessage* Arena::CreateMaybeMessage< ::ChatRequestMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ChatRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessage* Arena::CreateMaybeMessage< ::ChatMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatRejectMessage* Arena::CreateMaybeMessage< ::ChatRejectMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ChatRejectMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::DialogMessage* Arena::CreateMaybeMessage< ::DialogMessage >(Arena* arena) {
  return Arena::CreateInternal< ::DialogMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TimeoutWarningMessage* Arena::CreateMaybeMessage< ::TimeoutWarningMessage >(Arena* arena) {
  return Arena::CreateInternal< ::TimeoutWarningMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ResetTimeoutMessage* Arena::CreateMaybeMessage< ::ResetTimeoutMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ResetTimeoutMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ReportAvatarMessage* Arena::CreateMaybeMessage< ::ReportAvatarMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ReportAvatarMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ReportAvatarAckMessage* Arena::CreateMaybeMessage< ::ReportAvatarAckMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ReportAvatarAckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ReportGameMessage* Arena::CreateMaybeMessage< ::ReportGameMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ReportGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ReportGameAckMessage* Arena::CreateMaybeMessage< ::ReportGameAckMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ReportGameAckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ErrorMessage* Arena::CreateMaybeMessage< ::ErrorMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ErrorMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AdminRemoveGameMessage* Arena::CreateMaybeMessage< ::AdminRemoveGameMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AdminRemoveGameMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AdminRemoveGameAckMessage* Arena::CreateMaybeMessage< ::AdminRemoveGameAckMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AdminRemoveGameAckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AdminBanPlayerMessage* Arena::CreateMaybeMessage< ::AdminBanPlayerMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AdminBanPlayerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AdminBanPlayerAckMessage* Arena::CreateMaybeMessage< ::AdminBanPlayerAckMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AdminBanPlayerAckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::PokerTHMessage* Arena::CreateMaybeMessage< ::PokerTHMessage >(Arena* arena) {
  return Arena::CreateInternal< ::PokerTHMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
