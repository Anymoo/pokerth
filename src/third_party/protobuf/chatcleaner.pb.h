// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatcleaner.proto

#ifndef PROTOBUF_INCLUDED_chatcleaner_2eproto
#define PROTOBUF_INCLUDED_chatcleaner_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chatcleaner_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_chatcleaner_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
class ChatCleanerMessage;
class ChatCleanerMessageDefaultTypeInternal;
extern ChatCleanerMessageDefaultTypeInternal _ChatCleanerMessage_default_instance_;
class CleanerChatReplyMessage;
class CleanerChatReplyMessageDefaultTypeInternal;
extern CleanerChatReplyMessageDefaultTypeInternal _CleanerChatReplyMessage_default_instance_;
class CleanerChatRequestMessage;
class CleanerChatRequestMessageDefaultTypeInternal;
extern CleanerChatRequestMessageDefaultTypeInternal _CleanerChatRequestMessage_default_instance_;
class CleanerInitAckMessage;
class CleanerInitAckMessageDefaultTypeInternal;
extern CleanerInitAckMessageDefaultTypeInternal _CleanerInitAckMessage_default_instance_;
class CleanerInitMessage;
class CleanerInitMessageDefaultTypeInternal;
extern CleanerInitMessageDefaultTypeInternal _CleanerInitMessage_default_instance_;
namespace google {
namespace protobuf {
template<> ::ChatCleanerMessage* Arena::CreateMaybeMessage<::ChatCleanerMessage>(Arena*);
template<> ::CleanerChatReplyMessage* Arena::CreateMaybeMessage<::CleanerChatReplyMessage>(Arena*);
template<> ::CleanerChatRequestMessage* Arena::CreateMaybeMessage<::CleanerChatRequestMessage>(Arena*);
template<> ::CleanerInitAckMessage* Arena::CreateMaybeMessage<::CleanerInitAckMessage>(Arena*);
template<> ::CleanerInitMessage* Arena::CreateMaybeMessage<::CleanerInitMessage>(Arena*);
}  // namespace protobuf
}  // namespace google

enum CleanerChatReplyMessage_CleanerActionType {
  CleanerChatReplyMessage_CleanerActionType_cleanerActionNone = 0,
  CleanerChatReplyMessage_CleanerActionType_cleanerActionWarning = 1,
  CleanerChatReplyMessage_CleanerActionType_cleanerActionKick = 2,
  CleanerChatReplyMessage_CleanerActionType_cleanerActionBan = 3,
  CleanerChatReplyMessage_CleanerActionType_cleanerActionMute = 4
};
bool CleanerChatReplyMessage_CleanerActionType_IsValid(int value);
const CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage_CleanerActionType_CleanerActionType_MIN = CleanerChatReplyMessage_CleanerActionType_cleanerActionNone;
const CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage_CleanerActionType_CleanerActionType_MAX = CleanerChatReplyMessage_CleanerActionType_cleanerActionMute;
const int CleanerChatReplyMessage_CleanerActionType_CleanerActionType_ARRAYSIZE = CleanerChatReplyMessage_CleanerActionType_CleanerActionType_MAX + 1;

enum ChatCleanerMessage_ChatCleanerMessageType {
  ChatCleanerMessage_ChatCleanerMessageType_Type_CleanerInitMessage = 1,
  ChatCleanerMessage_ChatCleanerMessageType_Type_CleanerInitAckMessage = 2,
  ChatCleanerMessage_ChatCleanerMessageType_Type_CleanerChatRequestMessage = 3,
  ChatCleanerMessage_ChatCleanerMessageType_Type_CleanerChatReplyMessage = 4
};
bool ChatCleanerMessage_ChatCleanerMessageType_IsValid(int value);
const ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage_ChatCleanerMessageType_ChatCleanerMessageType_MIN = ChatCleanerMessage_ChatCleanerMessageType_Type_CleanerInitMessage;
const ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage_ChatCleanerMessageType_ChatCleanerMessageType_MAX = ChatCleanerMessage_ChatCleanerMessageType_Type_CleanerChatReplyMessage;
const int ChatCleanerMessage_ChatCleanerMessageType_ChatCleanerMessageType_ARRAYSIZE = ChatCleanerMessage_ChatCleanerMessageType_ChatCleanerMessageType_MAX + 1;

enum CleanerChatType {
  cleanerChatTypeLobby = 0,
  cleanerChatTypeGame = 1
};
bool CleanerChatType_IsValid(int value);
const CleanerChatType CleanerChatType_MIN = cleanerChatTypeLobby;
const CleanerChatType CleanerChatType_MAX = cleanerChatTypeGame;
const int CleanerChatType_ARRAYSIZE = CleanerChatType_MAX + 1;

// ===================================================================

class CleanerInitMessage :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CleanerInitMessage) */ {
 public:
  CleanerInitMessage();
  virtual ~CleanerInitMessage();

  CleanerInitMessage(const CleanerInitMessage& from);

  inline CleanerInitMessage& operator=(const CleanerInitMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CleanerInitMessage(CleanerInitMessage&& from) noexcept
    : CleanerInitMessage() {
    *this = ::std::move(from);
  }

  inline CleanerInitMessage& operator=(CleanerInitMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CleanerInitMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CleanerInitMessage* internal_default_instance() {
    return reinterpret_cast<const CleanerInitMessage*>(
               &_CleanerInitMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CleanerInitMessage* other);
  friend void swap(CleanerInitMessage& a, CleanerInitMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CleanerInitMessage* New() const final {
    return CreateMaybeMessage<CleanerInitMessage>(nullptr);
  }

  CleanerInitMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CleanerInitMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CleanerInitMessage& from);
  void MergeFrom(const CleanerInitMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CleanerInitMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string clientSecret = 2;
  bool has_clientsecret() const;
  void clear_clientsecret();
  static const int kClientSecretFieldNumber = 2;
  const ::std::string& clientsecret() const;
  void set_clientsecret(const ::std::string& value);
  #if LANG_CXX11
  void set_clientsecret(::std::string&& value);
  #endif
  void set_clientsecret(const char* value);
  void set_clientsecret(const char* value, size_t size);
  ::std::string* mutable_clientsecret();
  ::std::string* release_clientsecret();
  void set_allocated_clientsecret(::std::string* clientsecret);

  // required uint32 requestedVersion = 1;
  bool has_requestedversion() const;
  void clear_requestedversion();
  static const int kRequestedVersionFieldNumber = 1;
  ::google::protobuf::uint32 requestedversion() const;
  void set_requestedversion(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CleanerInitMessage)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clientsecret_;
  ::google::protobuf::uint32 requestedversion_;
  friend struct ::TableStruct_chatcleaner_2eproto;
};
// -------------------------------------------------------------------

class CleanerInitAckMessage :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CleanerInitAckMessage) */ {
 public:
  CleanerInitAckMessage();
  virtual ~CleanerInitAckMessage();

  CleanerInitAckMessage(const CleanerInitAckMessage& from);

  inline CleanerInitAckMessage& operator=(const CleanerInitAckMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CleanerInitAckMessage(CleanerInitAckMessage&& from) noexcept
    : CleanerInitAckMessage() {
    *this = ::std::move(from);
  }

  inline CleanerInitAckMessage& operator=(CleanerInitAckMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CleanerInitAckMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CleanerInitAckMessage* internal_default_instance() {
    return reinterpret_cast<const CleanerInitAckMessage*>(
               &_CleanerInitAckMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CleanerInitAckMessage* other);
  friend void swap(CleanerInitAckMessage& a, CleanerInitAckMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CleanerInitAckMessage* New() const final {
    return CreateMaybeMessage<CleanerInitAckMessage>(nullptr);
  }

  CleanerInitAckMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CleanerInitAckMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CleanerInitAckMessage& from);
  void MergeFrom(const CleanerInitAckMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CleanerInitAckMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string serverSecret = 2;
  bool has_serversecret() const;
  void clear_serversecret();
  static const int kServerSecretFieldNumber = 2;
  const ::std::string& serversecret() const;
  void set_serversecret(const ::std::string& value);
  #if LANG_CXX11
  void set_serversecret(::std::string&& value);
  #endif
  void set_serversecret(const char* value);
  void set_serversecret(const char* value, size_t size);
  ::std::string* mutable_serversecret();
  ::std::string* release_serversecret();
  void set_allocated_serversecret(::std::string* serversecret);

  // required uint32 serverVersion = 1;
  bool has_serverversion() const;
  void clear_serverversion();
  static const int kServerVersionFieldNumber = 1;
  ::google::protobuf::uint32 serverversion() const;
  void set_serverversion(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CleanerInitAckMessage)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr serversecret_;
  ::google::protobuf::uint32 serverversion_;
  friend struct ::TableStruct_chatcleaner_2eproto;
};
// -------------------------------------------------------------------

class CleanerChatRequestMessage :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CleanerChatRequestMessage) */ {
 public:
  CleanerChatRequestMessage();
  virtual ~CleanerChatRequestMessage();

  CleanerChatRequestMessage(const CleanerChatRequestMessage& from);

  inline CleanerChatRequestMessage& operator=(const CleanerChatRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CleanerChatRequestMessage(CleanerChatRequestMessage&& from) noexcept
    : CleanerChatRequestMessage() {
    *this = ::std::move(from);
  }

  inline CleanerChatRequestMessage& operator=(CleanerChatRequestMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CleanerChatRequestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CleanerChatRequestMessage* internal_default_instance() {
    return reinterpret_cast<const CleanerChatRequestMessage*>(
               &_CleanerChatRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CleanerChatRequestMessage* other);
  friend void swap(CleanerChatRequestMessage& a, CleanerChatRequestMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CleanerChatRequestMessage* New() const final {
    return CreateMaybeMessage<CleanerChatRequestMessage>(nullptr);
  }

  CleanerChatRequestMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CleanerChatRequestMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CleanerChatRequestMessage& from);
  void MergeFrom(const CleanerChatRequestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CleanerChatRequestMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string playerName = 5;
  bool has_playername() const;
  void clear_playername();
  static const int kPlayerNameFieldNumber = 5;
  const ::std::string& playername() const;
  void set_playername(const ::std::string& value);
  #if LANG_CXX11
  void set_playername(::std::string&& value);
  #endif
  void set_playername(const char* value);
  void set_playername(const char* value, size_t size);
  ::std::string* mutable_playername();
  ::std::string* release_playername();
  void set_allocated_playername(::std::string* playername);

  // required string chatMessage = 6;
  bool has_chatmessage() const;
  void clear_chatmessage();
  static const int kChatMessageFieldNumber = 6;
  const ::std::string& chatmessage() const;
  void set_chatmessage(const ::std::string& value);
  #if LANG_CXX11
  void set_chatmessage(::std::string&& value);
  #endif
  void set_chatmessage(const char* value);
  void set_chatmessage(const char* value, size_t size);
  ::std::string* mutable_chatmessage();
  ::std::string* release_chatmessage();
  void set_allocated_chatmessage(::std::string* chatmessage);

  // required uint32 requestId = 1;
  bool has_requestid() const;
  void clear_requestid();
  static const int kRequestIdFieldNumber = 1;
  ::google::protobuf::uint32 requestid() const;
  void set_requestid(::google::protobuf::uint32 value);

  // required .CleanerChatType cleanerChatType = 2;
  bool has_cleanerchattype() const;
  void clear_cleanerchattype();
  static const int kCleanerChatTypeFieldNumber = 2;
  ::CleanerChatType cleanerchattype() const;
  void set_cleanerchattype(::CleanerChatType value);

  // optional uint32 gameId = 3 [default = 0];
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameIdFieldNumber = 3;
  ::google::protobuf::uint32 gameid() const;
  void set_gameid(::google::protobuf::uint32 value);

  // required uint32 playerId = 4;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 4;
  ::google::protobuf::uint32 playerid() const;
  void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CleanerChatRequestMessage)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr playername_;
  ::google::protobuf::internal::ArenaStringPtr chatmessage_;
  ::google::protobuf::uint32 requestid_;
  int cleanerchattype_;
  ::google::protobuf::uint32 gameid_;
  ::google::protobuf::uint32 playerid_;
  friend struct ::TableStruct_chatcleaner_2eproto;
};
// -------------------------------------------------------------------

class CleanerChatReplyMessage :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CleanerChatReplyMessage) */ {
 public:
  CleanerChatReplyMessage();
  virtual ~CleanerChatReplyMessage();

  CleanerChatReplyMessage(const CleanerChatReplyMessage& from);

  inline CleanerChatReplyMessage& operator=(const CleanerChatReplyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CleanerChatReplyMessage(CleanerChatReplyMessage&& from) noexcept
    : CleanerChatReplyMessage() {
    *this = ::std::move(from);
  }

  inline CleanerChatReplyMessage& operator=(CleanerChatReplyMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CleanerChatReplyMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CleanerChatReplyMessage* internal_default_instance() {
    return reinterpret_cast<const CleanerChatReplyMessage*>(
               &_CleanerChatReplyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CleanerChatReplyMessage* other);
  friend void swap(CleanerChatReplyMessage& a, CleanerChatReplyMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CleanerChatReplyMessage* New() const final {
    return CreateMaybeMessage<CleanerChatReplyMessage>(nullptr);
  }

  CleanerChatReplyMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CleanerChatReplyMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CleanerChatReplyMessage& from);
  void MergeFrom(const CleanerChatReplyMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CleanerChatReplyMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CleanerChatReplyMessage_CleanerActionType CleanerActionType;
  static const CleanerActionType cleanerActionNone =
    CleanerChatReplyMessage_CleanerActionType_cleanerActionNone;
  static const CleanerActionType cleanerActionWarning =
    CleanerChatReplyMessage_CleanerActionType_cleanerActionWarning;
  static const CleanerActionType cleanerActionKick =
    CleanerChatReplyMessage_CleanerActionType_cleanerActionKick;
  static const CleanerActionType cleanerActionBan =
    CleanerChatReplyMessage_CleanerActionType_cleanerActionBan;
  static const CleanerActionType cleanerActionMute =
    CleanerChatReplyMessage_CleanerActionType_cleanerActionMute;
  static inline bool CleanerActionType_IsValid(int value) {
    return CleanerChatReplyMessage_CleanerActionType_IsValid(value);
  }
  static const CleanerActionType CleanerActionType_MIN =
    CleanerChatReplyMessage_CleanerActionType_CleanerActionType_MIN;
  static const CleanerActionType CleanerActionType_MAX =
    CleanerChatReplyMessage_CleanerActionType_CleanerActionType_MAX;
  static const int CleanerActionType_ARRAYSIZE =
    CleanerChatReplyMessage_CleanerActionType_CleanerActionType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional string cleanerText = 6 [default = ""];
  bool has_cleanertext() const;
  void clear_cleanertext();
  static const int kCleanerTextFieldNumber = 6;
  const ::std::string& cleanertext() const;
  void set_cleanertext(const ::std::string& value);
  #if LANG_CXX11
  void set_cleanertext(::std::string&& value);
  #endif
  void set_cleanertext(const char* value);
  void set_cleanertext(const char* value, size_t size);
  ::std::string* mutable_cleanertext();
  ::std::string* release_cleanertext();
  void set_allocated_cleanertext(::std::string* cleanertext);

  // required uint32 requestId = 1;
  bool has_requestid() const;
  void clear_requestid();
  static const int kRequestIdFieldNumber = 1;
  ::google::protobuf::uint32 requestid() const;
  void set_requestid(::google::protobuf::uint32 value);

  // required .CleanerChatType cleanerChatType = 2;
  bool has_cleanerchattype() const;
  void clear_cleanerchattype();
  static const int kCleanerChatTypeFieldNumber = 2;
  ::CleanerChatType cleanerchattype() const;
  void set_cleanerchattype(::CleanerChatType value);

  // optional uint32 gameId = 3 [default = 0];
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameIdFieldNumber = 3;
  ::google::protobuf::uint32 gameid() const;
  void set_gameid(::google::protobuf::uint32 value);

  // required uint32 playerId = 4;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 4;
  ::google::protobuf::uint32 playerid() const;
  void set_playerid(::google::protobuf::uint32 value);

  // required .CleanerChatReplyMessage.CleanerActionType cleanerActionType = 5;
  bool has_cleaneractiontype() const;
  void clear_cleaneractiontype();
  static const int kCleanerActionTypeFieldNumber = 5;
  ::CleanerChatReplyMessage_CleanerActionType cleaneractiontype() const;
  void set_cleaneractiontype(::CleanerChatReplyMessage_CleanerActionType value);

  // @@protoc_insertion_point(class_scope:CleanerChatReplyMessage)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cleanertext_;
  ::google::protobuf::uint32 requestid_;
  int cleanerchattype_;
  ::google::protobuf::uint32 gameid_;
  ::google::protobuf::uint32 playerid_;
  int cleaneractiontype_;
  friend struct ::TableStruct_chatcleaner_2eproto;
};
// -------------------------------------------------------------------

class ChatCleanerMessage :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:ChatCleanerMessage) */ {
 public:
  ChatCleanerMessage();
  virtual ~ChatCleanerMessage();

  ChatCleanerMessage(const ChatCleanerMessage& from);

  inline ChatCleanerMessage& operator=(const ChatCleanerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatCleanerMessage(ChatCleanerMessage&& from) noexcept
    : ChatCleanerMessage() {
    *this = ::std::move(from);
  }

  inline ChatCleanerMessage& operator=(ChatCleanerMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChatCleanerMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatCleanerMessage* internal_default_instance() {
    return reinterpret_cast<const ChatCleanerMessage*>(
               &_ChatCleanerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ChatCleanerMessage* other);
  friend void swap(ChatCleanerMessage& a, ChatCleanerMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatCleanerMessage* New() const final {
    return CreateMaybeMessage<ChatCleanerMessage>(nullptr);
  }

  ChatCleanerMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChatCleanerMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ChatCleanerMessage& from);
  void MergeFrom(const ChatCleanerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChatCleanerMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessageType;
  static const ChatCleanerMessageType Type_CleanerInitMessage =
    ChatCleanerMessage_ChatCleanerMessageType_Type_CleanerInitMessage;
  static const ChatCleanerMessageType Type_CleanerInitAckMessage =
    ChatCleanerMessage_ChatCleanerMessageType_Type_CleanerInitAckMessage;
  static const ChatCleanerMessageType Type_CleanerChatRequestMessage =
    ChatCleanerMessage_ChatCleanerMessageType_Type_CleanerChatRequestMessage;
  static const ChatCleanerMessageType Type_CleanerChatReplyMessage =
    ChatCleanerMessage_ChatCleanerMessageType_Type_CleanerChatReplyMessage;
  static inline bool ChatCleanerMessageType_IsValid(int value) {
    return ChatCleanerMessage_ChatCleanerMessageType_IsValid(value);
  }
  static const ChatCleanerMessageType ChatCleanerMessageType_MIN =
    ChatCleanerMessage_ChatCleanerMessageType_ChatCleanerMessageType_MIN;
  static const ChatCleanerMessageType ChatCleanerMessageType_MAX =
    ChatCleanerMessage_ChatCleanerMessageType_ChatCleanerMessageType_MAX;
  static const int ChatCleanerMessageType_ARRAYSIZE =
    ChatCleanerMessage_ChatCleanerMessageType_ChatCleanerMessageType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .CleanerInitMessage cleanerInitMessage = 2;
  bool has_cleanerinitmessage() const;
  void clear_cleanerinitmessage();
  static const int kCleanerInitMessageFieldNumber = 2;
  const ::CleanerInitMessage& cleanerinitmessage() const;
  ::CleanerInitMessage* release_cleanerinitmessage();
  ::CleanerInitMessage* mutable_cleanerinitmessage();
  void set_allocated_cleanerinitmessage(::CleanerInitMessage* cleanerinitmessage);

  // optional .CleanerInitAckMessage cleanerInitAckMessage = 3;
  bool has_cleanerinitackmessage() const;
  void clear_cleanerinitackmessage();
  static const int kCleanerInitAckMessageFieldNumber = 3;
  const ::CleanerInitAckMessage& cleanerinitackmessage() const;
  ::CleanerInitAckMessage* release_cleanerinitackmessage();
  ::CleanerInitAckMessage* mutable_cleanerinitackmessage();
  void set_allocated_cleanerinitackmessage(::CleanerInitAckMessage* cleanerinitackmessage);

  // optional .CleanerChatRequestMessage cleanerChatRequestMessage = 4;
  bool has_cleanerchatrequestmessage() const;
  void clear_cleanerchatrequestmessage();
  static const int kCleanerChatRequestMessageFieldNumber = 4;
  const ::CleanerChatRequestMessage& cleanerchatrequestmessage() const;
  ::CleanerChatRequestMessage* release_cleanerchatrequestmessage();
  ::CleanerChatRequestMessage* mutable_cleanerchatrequestmessage();
  void set_allocated_cleanerchatrequestmessage(::CleanerChatRequestMessage* cleanerchatrequestmessage);

  // optional .CleanerChatReplyMessage cleanerChatReplyMessage = 5;
  bool has_cleanerchatreplymessage() const;
  void clear_cleanerchatreplymessage();
  static const int kCleanerChatReplyMessageFieldNumber = 5;
  const ::CleanerChatReplyMessage& cleanerchatreplymessage() const;
  ::CleanerChatReplyMessage* release_cleanerchatreplymessage();
  ::CleanerChatReplyMessage* mutable_cleanerchatreplymessage();
  void set_allocated_cleanerchatreplymessage(::CleanerChatReplyMessage* cleanerchatreplymessage);

  // required .ChatCleanerMessage.ChatCleanerMessageType messageType = 1;
  bool has_messagetype() const;
  void clear_messagetype();
  static const int kMessageTypeFieldNumber = 1;
  ::ChatCleanerMessage_ChatCleanerMessageType messagetype() const;
  void set_messagetype(::ChatCleanerMessage_ChatCleanerMessageType value);

  // @@protoc_insertion_point(class_scope:ChatCleanerMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::CleanerInitMessage* cleanerinitmessage_;
  ::CleanerInitAckMessage* cleanerinitackmessage_;
  ::CleanerChatRequestMessage* cleanerchatrequestmessage_;
  ::CleanerChatReplyMessage* cleanerchatreplymessage_;
  int messagetype_;
  friend struct ::TableStruct_chatcleaner_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CleanerInitMessage

// required uint32 requestedVersion = 1;
inline bool CleanerInitMessage::has_requestedversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CleanerInitMessage::clear_requestedversion() {
  requestedversion_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CleanerInitMessage::requestedversion() const {
  // @@protoc_insertion_point(field_get:CleanerInitMessage.requestedVersion)
  return requestedversion_;
}
inline void CleanerInitMessage::set_requestedversion(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  requestedversion_ = value;
  // @@protoc_insertion_point(field_set:CleanerInitMessage.requestedVersion)
}

// required string clientSecret = 2;
inline bool CleanerInitMessage::has_clientsecret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CleanerInitMessage::clear_clientsecret() {
  clientsecret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CleanerInitMessage::clientsecret() const {
  // @@protoc_insertion_point(field_get:CleanerInitMessage.clientSecret)
  return clientsecret_.GetNoArena();
}
inline void CleanerInitMessage::set_clientsecret(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clientsecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CleanerInitMessage.clientSecret)
}
#if LANG_CXX11
inline void CleanerInitMessage::set_clientsecret(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clientsecret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CleanerInitMessage.clientSecret)
}
#endif
inline void CleanerInitMessage::set_clientsecret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clientsecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CleanerInitMessage.clientSecret)
}
inline void CleanerInitMessage::set_clientsecret(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clientsecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CleanerInitMessage.clientSecret)
}
inline ::std::string* CleanerInitMessage::mutable_clientsecret() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:CleanerInitMessage.clientSecret)
  return clientsecret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CleanerInitMessage::release_clientsecret() {
  // @@protoc_insertion_point(field_release:CleanerInitMessage.clientSecret)
  if (!has_clientsecret()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clientsecret_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CleanerInitMessage::set_allocated_clientsecret(::std::string* clientsecret) {
  if (clientsecret != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clientsecret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientsecret);
  // @@protoc_insertion_point(field_set_allocated:CleanerInitMessage.clientSecret)
}

// -------------------------------------------------------------------

// CleanerInitAckMessage

// required uint32 serverVersion = 1;
inline bool CleanerInitAckMessage::has_serverversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CleanerInitAckMessage::clear_serverversion() {
  serverversion_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CleanerInitAckMessage::serverversion() const {
  // @@protoc_insertion_point(field_get:CleanerInitAckMessage.serverVersion)
  return serverversion_;
}
inline void CleanerInitAckMessage::set_serverversion(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  serverversion_ = value;
  // @@protoc_insertion_point(field_set:CleanerInitAckMessage.serverVersion)
}

// required string serverSecret = 2;
inline bool CleanerInitAckMessage::has_serversecret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CleanerInitAckMessage::clear_serversecret() {
  serversecret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CleanerInitAckMessage::serversecret() const {
  // @@protoc_insertion_point(field_get:CleanerInitAckMessage.serverSecret)
  return serversecret_.GetNoArena();
}
inline void CleanerInitAckMessage::set_serversecret(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serversecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CleanerInitAckMessage.serverSecret)
}
#if LANG_CXX11
inline void CleanerInitAckMessage::set_serversecret(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  serversecret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CleanerInitAckMessage.serverSecret)
}
#endif
inline void CleanerInitAckMessage::set_serversecret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  serversecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CleanerInitAckMessage.serverSecret)
}
inline void CleanerInitAckMessage::set_serversecret(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  serversecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CleanerInitAckMessage.serverSecret)
}
inline ::std::string* CleanerInitAckMessage::mutable_serversecret() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:CleanerInitAckMessage.serverSecret)
  return serversecret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CleanerInitAckMessage::release_serversecret() {
  // @@protoc_insertion_point(field_release:CleanerInitAckMessage.serverSecret)
  if (!has_serversecret()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return serversecret_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CleanerInitAckMessage::set_allocated_serversecret(::std::string* serversecret) {
  if (serversecret != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serversecret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serversecret);
  // @@protoc_insertion_point(field_set_allocated:CleanerInitAckMessage.serverSecret)
}

// -------------------------------------------------------------------

// CleanerChatRequestMessage

// required uint32 requestId = 1;
inline bool CleanerChatRequestMessage::has_requestid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CleanerChatRequestMessage::clear_requestid() {
  requestid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CleanerChatRequestMessage::requestid() const {
  // @@protoc_insertion_point(field_get:CleanerChatRequestMessage.requestId)
  return requestid_;
}
inline void CleanerChatRequestMessage::set_requestid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  requestid_ = value;
  // @@protoc_insertion_point(field_set:CleanerChatRequestMessage.requestId)
}

// required .CleanerChatType cleanerChatType = 2;
inline bool CleanerChatRequestMessage::has_cleanerchattype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CleanerChatRequestMessage::clear_cleanerchattype() {
  cleanerchattype_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::CleanerChatType CleanerChatRequestMessage::cleanerchattype() const {
  // @@protoc_insertion_point(field_get:CleanerChatRequestMessage.cleanerChatType)
  return static_cast< ::CleanerChatType >(cleanerchattype_);
}
inline void CleanerChatRequestMessage::set_cleanerchattype(::CleanerChatType value) {
  assert(::CleanerChatType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  cleanerchattype_ = value;
  // @@protoc_insertion_point(field_set:CleanerChatRequestMessage.cleanerChatType)
}

// optional uint32 gameId = 3 [default = 0];
inline bool CleanerChatRequestMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CleanerChatRequestMessage::clear_gameid() {
  gameid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CleanerChatRequestMessage::gameid() const {
  // @@protoc_insertion_point(field_get:CleanerChatRequestMessage.gameId)
  return gameid_;
}
inline void CleanerChatRequestMessage::set_gameid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  gameid_ = value;
  // @@protoc_insertion_point(field_set:CleanerChatRequestMessage.gameId)
}

// required uint32 playerId = 4;
inline bool CleanerChatRequestMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CleanerChatRequestMessage::clear_playerid() {
  playerid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CleanerChatRequestMessage::playerid() const {
  // @@protoc_insertion_point(field_get:CleanerChatRequestMessage.playerId)
  return playerid_;
}
inline void CleanerChatRequestMessage::set_playerid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CleanerChatRequestMessage.playerId)
}

// required string playerName = 5;
inline bool CleanerChatRequestMessage::has_playername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CleanerChatRequestMessage::clear_playername() {
  playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CleanerChatRequestMessage::playername() const {
  // @@protoc_insertion_point(field_get:CleanerChatRequestMessage.playerName)
  return playername_.GetNoArena();
}
inline void CleanerChatRequestMessage::set_playername(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CleanerChatRequestMessage.playerName)
}
#if LANG_CXX11
inline void CleanerChatRequestMessage::set_playername(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  playername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CleanerChatRequestMessage.playerName)
}
#endif
inline void CleanerChatRequestMessage::set_playername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CleanerChatRequestMessage.playerName)
}
inline void CleanerChatRequestMessage::set_playername(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CleanerChatRequestMessage.playerName)
}
inline ::std::string* CleanerChatRequestMessage::mutable_playername() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:CleanerChatRequestMessage.playerName)
  return playername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CleanerChatRequestMessage::release_playername() {
  // @@protoc_insertion_point(field_release:CleanerChatRequestMessage.playerName)
  if (!has_playername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return playername_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CleanerChatRequestMessage::set_allocated_playername(::std::string* playername) {
  if (playername != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  playername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playername);
  // @@protoc_insertion_point(field_set_allocated:CleanerChatRequestMessage.playerName)
}

// required string chatMessage = 6;
inline bool CleanerChatRequestMessage::has_chatmessage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CleanerChatRequestMessage::clear_chatmessage() {
  chatmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CleanerChatRequestMessage::chatmessage() const {
  // @@protoc_insertion_point(field_get:CleanerChatRequestMessage.chatMessage)
  return chatmessage_.GetNoArena();
}
inline void CleanerChatRequestMessage::set_chatmessage(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  chatmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CleanerChatRequestMessage.chatMessage)
}
#if LANG_CXX11
inline void CleanerChatRequestMessage::set_chatmessage(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  chatmessage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CleanerChatRequestMessage.chatMessage)
}
#endif
inline void CleanerChatRequestMessage::set_chatmessage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  chatmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CleanerChatRequestMessage.chatMessage)
}
inline void CleanerChatRequestMessage::set_chatmessage(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  chatmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CleanerChatRequestMessage.chatMessage)
}
inline ::std::string* CleanerChatRequestMessage::mutable_chatmessage() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:CleanerChatRequestMessage.chatMessage)
  return chatmessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CleanerChatRequestMessage::release_chatmessage() {
  // @@protoc_insertion_point(field_release:CleanerChatRequestMessage.chatMessage)
  if (!has_chatmessage()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return chatmessage_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CleanerChatRequestMessage::set_allocated_chatmessage(::std::string* chatmessage) {
  if (chatmessage != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  chatmessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatmessage);
  // @@protoc_insertion_point(field_set_allocated:CleanerChatRequestMessage.chatMessage)
}

// -------------------------------------------------------------------

// CleanerChatReplyMessage

// required uint32 requestId = 1;
inline bool CleanerChatReplyMessage::has_requestid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CleanerChatReplyMessage::clear_requestid() {
  requestid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CleanerChatReplyMessage::requestid() const {
  // @@protoc_insertion_point(field_get:CleanerChatReplyMessage.requestId)
  return requestid_;
}
inline void CleanerChatReplyMessage::set_requestid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  requestid_ = value;
  // @@protoc_insertion_point(field_set:CleanerChatReplyMessage.requestId)
}

// required .CleanerChatType cleanerChatType = 2;
inline bool CleanerChatReplyMessage::has_cleanerchattype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CleanerChatReplyMessage::clear_cleanerchattype() {
  cleanerchattype_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::CleanerChatType CleanerChatReplyMessage::cleanerchattype() const {
  // @@protoc_insertion_point(field_get:CleanerChatReplyMessage.cleanerChatType)
  return static_cast< ::CleanerChatType >(cleanerchattype_);
}
inline void CleanerChatReplyMessage::set_cleanerchattype(::CleanerChatType value) {
  assert(::CleanerChatType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  cleanerchattype_ = value;
  // @@protoc_insertion_point(field_set:CleanerChatReplyMessage.cleanerChatType)
}

// optional uint32 gameId = 3 [default = 0];
inline bool CleanerChatReplyMessage::has_gameid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CleanerChatReplyMessage::clear_gameid() {
  gameid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CleanerChatReplyMessage::gameid() const {
  // @@protoc_insertion_point(field_get:CleanerChatReplyMessage.gameId)
  return gameid_;
}
inline void CleanerChatReplyMessage::set_gameid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  gameid_ = value;
  // @@protoc_insertion_point(field_set:CleanerChatReplyMessage.gameId)
}

// required uint32 playerId = 4;
inline bool CleanerChatReplyMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CleanerChatReplyMessage::clear_playerid() {
  playerid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CleanerChatReplyMessage::playerid() const {
  // @@protoc_insertion_point(field_get:CleanerChatReplyMessage.playerId)
  return playerid_;
}
inline void CleanerChatReplyMessage::set_playerid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CleanerChatReplyMessage.playerId)
}

// required .CleanerChatReplyMessage.CleanerActionType cleanerActionType = 5;
inline bool CleanerChatReplyMessage::has_cleaneractiontype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CleanerChatReplyMessage::clear_cleaneractiontype() {
  cleaneractiontype_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::cleaneractiontype() const {
  // @@protoc_insertion_point(field_get:CleanerChatReplyMessage.cleanerActionType)
  return static_cast< ::CleanerChatReplyMessage_CleanerActionType >(cleaneractiontype_);
}
inline void CleanerChatReplyMessage::set_cleaneractiontype(::CleanerChatReplyMessage_CleanerActionType value) {
  assert(::CleanerChatReplyMessage_CleanerActionType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  cleaneractiontype_ = value;
  // @@protoc_insertion_point(field_set:CleanerChatReplyMessage.cleanerActionType)
}

// optional string cleanerText = 6 [default = ""];
inline bool CleanerChatReplyMessage::has_cleanertext() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CleanerChatReplyMessage::clear_cleanertext() {
  cleanertext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CleanerChatReplyMessage::cleanertext() const {
  // @@protoc_insertion_point(field_get:CleanerChatReplyMessage.cleanerText)
  return cleanertext_.GetNoArena();
}
inline void CleanerChatReplyMessage::set_cleanertext(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cleanertext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CleanerChatReplyMessage.cleanerText)
}
#if LANG_CXX11
inline void CleanerChatReplyMessage::set_cleanertext(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cleanertext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CleanerChatReplyMessage.cleanerText)
}
#endif
inline void CleanerChatReplyMessage::set_cleanertext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cleanertext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CleanerChatReplyMessage.cleanerText)
}
inline void CleanerChatReplyMessage::set_cleanertext(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cleanertext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CleanerChatReplyMessage.cleanerText)
}
inline ::std::string* CleanerChatReplyMessage::mutable_cleanertext() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:CleanerChatReplyMessage.cleanerText)
  return cleanertext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CleanerChatReplyMessage::release_cleanertext() {
  // @@protoc_insertion_point(field_release:CleanerChatReplyMessage.cleanerText)
  if (!has_cleanertext()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cleanertext_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CleanerChatReplyMessage::set_allocated_cleanertext(::std::string* cleanertext) {
  if (cleanertext != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cleanertext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cleanertext);
  // @@protoc_insertion_point(field_set_allocated:CleanerChatReplyMessage.cleanerText)
}

// -------------------------------------------------------------------

// ChatCleanerMessage

// required .ChatCleanerMessage.ChatCleanerMessageType messageType = 1;
inline bool ChatCleanerMessage::has_messagetype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatCleanerMessage::clear_messagetype() {
  messagetype_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::messagetype() const {
  // @@protoc_insertion_point(field_get:ChatCleanerMessage.messageType)
  return static_cast< ::ChatCleanerMessage_ChatCleanerMessageType >(messagetype_);
}
inline void ChatCleanerMessage::set_messagetype(::ChatCleanerMessage_ChatCleanerMessageType value) {
  assert(::ChatCleanerMessage_ChatCleanerMessageType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:ChatCleanerMessage.messageType)
}

// optional .CleanerInitMessage cleanerInitMessage = 2;
inline bool ChatCleanerMessage::has_cleanerinitmessage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatCleanerMessage::clear_cleanerinitmessage() {
  if (cleanerinitmessage_ != nullptr) cleanerinitmessage_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CleanerInitMessage& ChatCleanerMessage::cleanerinitmessage() const {
  const ::CleanerInitMessage* p = cleanerinitmessage_;
  // @@protoc_insertion_point(field_get:ChatCleanerMessage.cleanerInitMessage)
  return p != nullptr ? *p : *reinterpret_cast<const ::CleanerInitMessage*>(
      &::_CleanerInitMessage_default_instance_);
}
inline ::CleanerInitMessage* ChatCleanerMessage::release_cleanerinitmessage() {
  // @@protoc_insertion_point(field_release:ChatCleanerMessage.cleanerInitMessage)
  _has_bits_[0] &= ~0x00000001u;
  ::CleanerInitMessage* temp = cleanerinitmessage_;
  cleanerinitmessage_ = nullptr;
  return temp;
}
inline ::CleanerInitMessage* ChatCleanerMessage::mutable_cleanerinitmessage() {
  _has_bits_[0] |= 0x00000001u;
  if (cleanerinitmessage_ == nullptr) {
    auto* p = CreateMaybeMessage<::CleanerInitMessage>(GetArenaNoVirtual());
    cleanerinitmessage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ChatCleanerMessage.cleanerInitMessage)
  return cleanerinitmessage_;
}
inline void ChatCleanerMessage::set_allocated_cleanerinitmessage(::CleanerInitMessage* cleanerinitmessage) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cleanerinitmessage_;
  }
  if (cleanerinitmessage) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cleanerinitmessage = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cleanerinitmessage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cleanerinitmessage_ = cleanerinitmessage;
  // @@protoc_insertion_point(field_set_allocated:ChatCleanerMessage.cleanerInitMessage)
}

// optional .CleanerInitAckMessage cleanerInitAckMessage = 3;
inline bool ChatCleanerMessage::has_cleanerinitackmessage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatCleanerMessage::clear_cleanerinitackmessage() {
  if (cleanerinitackmessage_ != nullptr) cleanerinitackmessage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CleanerInitAckMessage& ChatCleanerMessage::cleanerinitackmessage() const {
  const ::CleanerInitAckMessage* p = cleanerinitackmessage_;
  // @@protoc_insertion_point(field_get:ChatCleanerMessage.cleanerInitAckMessage)
  return p != nullptr ? *p : *reinterpret_cast<const ::CleanerInitAckMessage*>(
      &::_CleanerInitAckMessage_default_instance_);
}
inline ::CleanerInitAckMessage* ChatCleanerMessage::release_cleanerinitackmessage() {
  // @@protoc_insertion_point(field_release:ChatCleanerMessage.cleanerInitAckMessage)
  _has_bits_[0] &= ~0x00000002u;
  ::CleanerInitAckMessage* temp = cleanerinitackmessage_;
  cleanerinitackmessage_ = nullptr;
  return temp;
}
inline ::CleanerInitAckMessage* ChatCleanerMessage::mutable_cleanerinitackmessage() {
  _has_bits_[0] |= 0x00000002u;
  if (cleanerinitackmessage_ == nullptr) {
    auto* p = CreateMaybeMessage<::CleanerInitAckMessage>(GetArenaNoVirtual());
    cleanerinitackmessage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ChatCleanerMessage.cleanerInitAckMessage)
  return cleanerinitackmessage_;
}
inline void ChatCleanerMessage::set_allocated_cleanerinitackmessage(::CleanerInitAckMessage* cleanerinitackmessage) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cleanerinitackmessage_;
  }
  if (cleanerinitackmessage) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cleanerinitackmessage = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cleanerinitackmessage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cleanerinitackmessage_ = cleanerinitackmessage;
  // @@protoc_insertion_point(field_set_allocated:ChatCleanerMessage.cleanerInitAckMessage)
}

// optional .CleanerChatRequestMessage cleanerChatRequestMessage = 4;
inline bool ChatCleanerMessage::has_cleanerchatrequestmessage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatCleanerMessage::clear_cleanerchatrequestmessage() {
  if (cleanerchatrequestmessage_ != nullptr) cleanerchatrequestmessage_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CleanerChatRequestMessage& ChatCleanerMessage::cleanerchatrequestmessage() const {
  const ::CleanerChatRequestMessage* p = cleanerchatrequestmessage_;
  // @@protoc_insertion_point(field_get:ChatCleanerMessage.cleanerChatRequestMessage)
  return p != nullptr ? *p : *reinterpret_cast<const ::CleanerChatRequestMessage*>(
      &::_CleanerChatRequestMessage_default_instance_);
}
inline ::CleanerChatRequestMessage* ChatCleanerMessage::release_cleanerchatrequestmessage() {
  // @@protoc_insertion_point(field_release:ChatCleanerMessage.cleanerChatRequestMessage)
  _has_bits_[0] &= ~0x00000004u;
  ::CleanerChatRequestMessage* temp = cleanerchatrequestmessage_;
  cleanerchatrequestmessage_ = nullptr;
  return temp;
}
inline ::CleanerChatRequestMessage* ChatCleanerMessage::mutable_cleanerchatrequestmessage() {
  _has_bits_[0] |= 0x00000004u;
  if (cleanerchatrequestmessage_ == nullptr) {
    auto* p = CreateMaybeMessage<::CleanerChatRequestMessage>(GetArenaNoVirtual());
    cleanerchatrequestmessage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ChatCleanerMessage.cleanerChatRequestMessage)
  return cleanerchatrequestmessage_;
}
inline void ChatCleanerMessage::set_allocated_cleanerchatrequestmessage(::CleanerChatRequestMessage* cleanerchatrequestmessage) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cleanerchatrequestmessage_;
  }
  if (cleanerchatrequestmessage) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cleanerchatrequestmessage = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cleanerchatrequestmessage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cleanerchatrequestmessage_ = cleanerchatrequestmessage;
  // @@protoc_insertion_point(field_set_allocated:ChatCleanerMessage.cleanerChatRequestMessage)
}

// optional .CleanerChatReplyMessage cleanerChatReplyMessage = 5;
inline bool ChatCleanerMessage::has_cleanerchatreplymessage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatCleanerMessage::clear_cleanerchatreplymessage() {
  if (cleanerchatreplymessage_ != nullptr) cleanerchatreplymessage_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::CleanerChatReplyMessage& ChatCleanerMessage::cleanerchatreplymessage() const {
  const ::CleanerChatReplyMessage* p = cleanerchatreplymessage_;
  // @@protoc_insertion_point(field_get:ChatCleanerMessage.cleanerChatReplyMessage)
  return p != nullptr ? *p : *reinterpret_cast<const ::CleanerChatReplyMessage*>(
      &::_CleanerChatReplyMessage_default_instance_);
}
inline ::CleanerChatReplyMessage* ChatCleanerMessage::release_cleanerchatreplymessage() {
  // @@protoc_insertion_point(field_release:ChatCleanerMessage.cleanerChatReplyMessage)
  _has_bits_[0] &= ~0x00000008u;
  ::CleanerChatReplyMessage* temp = cleanerchatreplymessage_;
  cleanerchatreplymessage_ = nullptr;
  return temp;
}
inline ::CleanerChatReplyMessage* ChatCleanerMessage::mutable_cleanerchatreplymessage() {
  _has_bits_[0] |= 0x00000008u;
  if (cleanerchatreplymessage_ == nullptr) {
    auto* p = CreateMaybeMessage<::CleanerChatReplyMessage>(GetArenaNoVirtual());
    cleanerchatreplymessage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ChatCleanerMessage.cleanerChatReplyMessage)
  return cleanerchatreplymessage_;
}
inline void ChatCleanerMessage::set_allocated_cleanerchatreplymessage(::CleanerChatReplyMessage* cleanerchatreplymessage) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cleanerchatreplymessage_;
  }
  if (cleanerchatreplymessage) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cleanerchatreplymessage = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cleanerchatreplymessage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  cleanerchatreplymessage_ = cleanerchatreplymessage;
  // @@protoc_insertion_point(field_set_allocated:ChatCleanerMessage.cleanerChatReplyMessage)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CleanerChatReplyMessage_CleanerActionType> : ::std::true_type {};
template <> struct is_proto_enum< ::ChatCleanerMessage_ChatCleanerMessageType> : ::std::true_type {};
template <> struct is_proto_enum< ::CleanerChatType> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_chatcleaner_2eproto
